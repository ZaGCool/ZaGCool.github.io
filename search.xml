<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Webpack 笔记整理</title>
      <link href="/2019/03/02/%E5%89%8D%E7%AB%AF-2019-03-02-webpack%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/02/%E5%89%8D%E7%AB%AF-2019-03-02-webpack%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="webpack-4-0-简介"><a href="#webpack-4-0-简介" class="headerlink" title="webpack 4.0+简介"></a>webpack 4.0+简介</h2><blockquote><p><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack中文网</a></p><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack官网</a></p><p>webpack是一个前端自动化打包构建工具</p><p>基于nodeJs平台的工具/模块  会遵循nodeJs的规范</p><p>nodeJs ===&gt; npm 包管理器</p></blockquote><h4 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h4><ul><li>代码开发过程中出现的大量注释空格以及换行导致文件体积过大，webpack可以通过压缩打包的方式来解决这些问题</li><li>ES6在开发过程中非常便捷方便我们开发，但是运行在不同的浏览器中，可能会出现兼容性问题，webpack可以帮助我们在打包的时候，把高版本语法转换为低版本语法，实现兼容</li><li>在组件化开发过程中，资源整合会导致index.html入口引入文件过多，不方便管理，webpack可以帮助通过nodeJs或者es6的模块化规范来解决资源整合问题，还可以处理vue的单文件组件</li><li>webpack还有其他的诸如启动本地服务，实现模块热加载，区分开发环境和生产环境，对各个类型文件进行预编译…</li></ul><h4 id="webpack可以使用nodeJs的一个规范"><a href="#webpack可以使用nodeJs的一个规范" class="headerlink" title="webpack可以使用nodeJs的一个规范"></a>webpack可以使用nodeJs的一个规范</h4><blockquote><p>commonJS规范 （主要解决了模块的导入导出方式）</p><p>还支持es6的模块化规范 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四种模块化规范</span><br><span class="line"><span class="number">1</span> AMD模块化规范  具体实现 <span class="built_in">require</span>.js </span><br><span class="line"><span class="number">2</span> CMD模块化规范 具体实现 seajs</span><br><span class="line"><span class="number">3</span> commonJs 规范 （可以在nodejs中运行）<span class="built_in">require</span>()  / exports <span class="built_in">module</span>.exports</span><br><span class="line"><span class="number">4</span> es6模块化规范  <span class="keyword">import</span> <span class="keyword">from</span> /  <span class="keyword">export</span></span><br></pre></td></tr></table></figure></div><h4 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h4><blockquote><p> webpack 是一个现代 JavaScript 应用程序的*静态模块打包器</p></blockquote><p><a href="/imgs/webpack01.png" data-fancybox="group" data-caption="webpack01" class="fancybox"><img alt="webpack01" title="webpack01" data-src="/imgs/webpack01.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>可以做的事情</strong></p><blockquote><p>代码转换、文件转换、代码分割、模块合并、自动刷新，代码校验，自动发布</p></blockquote><h5 id="需要提前准备的基础"><a href="#需要提前准备的基础" class="headerlink" title="需要提前准备的基础"></a>需要提前准备的基础</h5><ul><li>了解node以及npm的使用</li><li>掌握es6的语法</li></ul><hr><blockquote><p>包管理器 npm  install / yarn  add</p><p>-g  全局安装  不会在本地项目中生成  会在你的安装的nodeJs对应的node_modules目录存在</p><p>–save (-S) 把模块安装到项目依赖当中  jquery </p><p>–save-dev (-D) 把模块安装到开发依赖当中 webpack</p><p>你的项目目录中 package.json (当前的你的项目中安装的模块)  npm install</p></blockquote><h4 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h4><h5 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y    yarn init -y</span><br></pre></td></tr></table></figure></div><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装本地webpack打包工具   webpack-cli (webpack命令行工具)</span><br><span class="line">yarn add &#x2F; npm install  webpack webpack-cli  -D</span><br></pre></td></tr></table></figure></div><h5 id="webpack最基本的使用-（0配置）"><a href="#webpack最基本的使用-（0配置）" class="headerlink" title="webpack最基本的使用 （0配置）"></a>webpack最基本的使用 （0配置）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx webpack 进行打包  会生成 dist目录 （index.js ===》 main.js）</span><br><span class="line"></span><br><span class="line"><span class="comment">// npx 命令是npx包管理器5.x出来的 这个命令 npx可以在本地项目中进行查找这个模块，如果有这个模块 则直接执行命令 如果没有这个模块 自动下载这个模块到项目 并且完成命令执行</span></span><br></pre></td></tr></table></figure></div><h5 id="手动配置webpack"><a href="#手动配置webpack" class="headerlink" title="手动配置webpack"></a>手动配置webpack</h5><blockquote><p>犹如 gulp中使用  gulpfile.js</p></blockquote><blockquote><p>在你的项目根目录下 webpack.config.js （作为webpack的配置文件）</p></blockquote><h5 id="webpack支持commonJs规范"><a href="#webpack支持commonJs规范" class="headerlink" title="webpack支持commonJs规范"></a>webpack支持commonJs规范</h5><blockquote><p>解释 打包的bundle文件–commonJs规范 的运行大致原理（加载依赖） </p></blockquote> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeJs自身通过commonJs来实现模块化，就是通过一个入口文件(index.js)来进行查找相关require的模块&#x3D;&#x3D;&gt; 进而找到其他的依赖的模块，最终汇集到一个全局的module对象上，在执行的时候 通过一个入口文件加载并按照顺序进行执行</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.exports 导出</span></span><br><span class="line"><span class="comment">// exports 导出 （本质上exports还是指向 module.exports 是一个快捷方式）</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">"hello"</span></span><br><span class="line"><span class="comment">// 可以导出一个字符串 单个数据</span></span><br><span class="line"><span class="comment">// 也可以导出一个对象 合并多个导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sayHi:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;,</span><br><span class="line">  person: &#123;<span class="attr">name</span>:<span class="string">"zs"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require() 引入 当前需要加载的模块路径</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">require</span>()</span><br><span class="line">obj.sayHi()</span><br><span class="line"><span class="built_in">console</span>.log(obj.person)</span><br></pre></td></tr></table></figure></div><h5 id="简单的打包"><a href="#简单的打包" class="headerlink" title="简单的打包"></a>简单的打包</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  打包时 手动指定 webpack配置文件</span></span><br><span class="line">npx webpack --config webpack.config.my.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//  在package.json中 配置scripts脚本命令</span></span><br><span class="line">scripts: &#123;</span><br><span class="line"><span class="string">"build"</span>:<span class="string">"webpack --config webpack.config.my.js"</span>,</span><br><span class="line">  <span class="string">"aa"</span>: <span class="string">"npm install jquery"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有些特殊的命令 运行时不需要加run </span></span><br><span class="line"><span class="comment">// npm  test  start   stop ..</span></span><br></pre></td></tr></table></figure></div><h5 id="webpack-config-js配置文件"><a href="#webpack-config-js配置文件" class="headerlink" title="webpack.config.js配置文件"></a>webpack.config.js配置文件</h5><blockquote><p>webpack会自动找当前的配置文件进行打包</p></blockquote><h5 id="配置入口和出口"><a href="#配置入口和出口" class="headerlink" title="配置入口和出口"></a>配置入口和出口</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 这是一个nodejs文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置入口文件</span></span><br><span class="line">  entry: path.join(__dirname, <span class="string">'index.js'</span>),</span><br><span class="line">  <span class="comment">// 设置出口</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 设置输出目录</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// 输出文件</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h5><blockquote><p>webpack 或者 npx webpack </p></blockquote><h5 id="模式的配置"><a href="#模式的配置" class="headerlink" title="模式的配置"></a>模式的配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">"production"</span>（生产环境下代码打包压缩） </span><br><span class="line">  <span class="string">"development"</span> 开发环境 （代码打包不压缩）</span><br></pre></td></tr></table></figure></div><h5 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步  npm install webpack-dev-server -D  </span></span><br><span class="line">webpack-dev-server （提供的本地服务器）</span><br><span class="line">    <span class="number">1.</span>它会帮你在内存中进行打包 并启动服务器 默认启动在根目录下</span><br><span class="line">    <span class="number">2.</span>在内存中打包效率很高 方便我们开发</span><br><span class="line">    <span class="number">3.</span>自动开启http服务</span><br><span class="line">    <span class="number">4.</span>自动打开浏览器</span><br><span class="line">    <span class="number">5.</span>自动监视文件的变化</span><br><span class="line">    <span class="number">6.</span>引入，每次修改代码，都需要重新打包 浏览器会自动刷新</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 第二步 可以在配置文件中进行设置</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">  contentBase:<span class="string">''</span>, <span class="comment">// 配置启动目录</span></span><br><span class="line">  port:<span class="number">9999</span>, <span class="comment">// 配置端口</span></span><br><span class="line">  open:<span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  progress: <span class="literal">true</span>, <span class="comment">// 显示打包进度</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 第三步 运行的时候 执行</span></span><br><span class="line"> npx webpack-dev-server  或者  webpack-dev-server</span><br></pre></td></tr></table></figure></div><h5 id="热更新的说明"><a href="#热更新的说明" class="headerlink" title="热更新的说明"></a>热更新的说明</h5><ul><li>开启</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hot: <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: path.join(__dirname,<span class="string">"src"</span>, <span class="string">'index.html'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure></div><ul><li>热更新与dev-server模式不会在生产环境下用，生产环境还是需要<code>npm run build</code></li></ul><hr><h4 id="webpack的loader以及plugins"><a href="#webpack的loader以及plugins" class="headerlink" title="webpack的loader以及plugins"></a>webpack的loader以及plugins</h4><blockquote><p>webpack 可以使用 <a href="https://www.webpackjs.com/concepts/loaders" target="_blank" rel="noopener">loader</a> 来预处理文件。这允许你打包除 JavaScript 之外的任何静态资源。你可以使用 Node.js 来很简单地编写自己的 loader。 </p></blockquote><blockquote><p>webpack 有着丰富的插件接口(rich plugin interface)。webpack 自身的多数功能都使用这个插件接口。这个插件接口使 webpack 变得<strong>极其灵活</strong>。 </p></blockquote><h5 id="html插件"><a href="#html插件" class="headerlink" title="html插件"></a>html插件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">html-webpack-plugin 借助这样一个插件 实现 打包一个html模版文件 并实现打包js自动引入</span><br><span class="line"><span class="comment">// 第一步 需要安装这个插件 </span></span><br><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步 引入这个html插件 </span></span><br><span class="line"><span class="keyword">let</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步  在webpack配置文件中进行配置</span></span><br><span class="line"><span class="comment">// 引入 html-webpack-plugin插件 插件需要 plugins: []</span></span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">  filename: <span class="string">"index.html"</span>,</span><br><span class="line">  minify: &#123;</span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">// 删除属性的双引号</span></span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>  <span class="comment">// 合并空行 进行压缩</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hash: <span class="literal">true</span>  <span class="comment">// 把模版文件中引入的打包的js后面加?hash值 避免浏览器缓存</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h5 id="打包文件hash进行-版本控制"><a href="#打包文件hash进行-版本控制" class="headerlink" title="打包文件hash进行 版本控制"></a>打包文件hash进行 版本控制</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename: <span class="string">'bundle.[hash:8].js'</span>, 可以实现打包js的版本控制</span><br></pre></td></tr></table></figure></div><h5 id="css样式处理"><a href="#css样式处理" class="headerlink" title="css样式处理"></a>css样式处理</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yarn add less less-loader -D </span></span><br><span class="line"><span class="comment">// yarn add style-loader css-loader -D</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">rules:[</span><br><span class="line"> &#123;</span><br><span class="line">         test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">         use: [&#123;</span><br><span class="line">             loader: <span class="string">"style-loader"</span>,</span><br><span class="line">             options: &#123;</span><br><span class="line">                 <span class="comment">// singleton: 是否只使用一个style标签,会将多个引入混合为一个style标签插入页面</span></span><br><span class="line">                 injectType: <span class="string">'singletonStyleTag'</span>,</span><br><span class="line">                 insert: <span class="function"><span class="keyword">function</span> <span class="title">insertAtTop</span>(<span class="params">ele</span>) </span>&#123;                          <span class="built_in">document</span>.querySelector(<span class="string">'head'</span>).insertBefore(ele, <span class="built_in">document</span>.querySelector(<span class="string">'style'</span>))</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="抽离css文件以及添加浏览器前缀"><a href="#抽离css文件以及添加浏览器前缀" class="headerlink" title="抽离css文件以及添加浏览器前缀"></a>抽离css文件以及添加浏览器前缀</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin -D 抽离css</span><br><span class="line">在插件位置 添加如下代码：</span><br><span class="line"><span class="keyword">new</span>  mini-css-extract-plugin(&#123;</span><br><span class="line">filename: <span class="string">"main.css"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在style-loader的位置 替换成以下内容</span></span><br><span class="line"> miniCssExtractPlugin.loader,</span><br><span class="line"> </span><br><span class="line"> css浏览器的前缀</span><br><span class="line"> yarn add postcss-loader autoprefixer -D</span><br><span class="line"> </span><br><span class="line"> 在css-loader 之前 添加 postcss-loader</span><br><span class="line"> 添加 postcss.config.js 配置文件 需要设置一些 使用插件</span><br><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> plugins:[ <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;</span><br><span class="line">            overrideBrowserslist: [<span class="string">'last 100 versions'</span>] <span class="comment">//必须设置支持的浏览器才会自动添加添加浏览器兼容</span></span><br><span class="line">        &#125;)]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h5 id="css压缩以及js压缩处理"><a href="#css压缩以及js压缩处理" class="headerlink" title="css压缩以及js压缩处理"></a>css压缩以及js压缩处理</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如果想实现css的压缩处理 需要引入一个插件</span><br><span class="line">optimize-css-assets-webpack-plugin</span><br><span class="line">需要设置优化项</span><br><span class="line">但设置之后 我们的js 却无法实现压缩于是</span><br><span class="line">我们需要引入另一个插件 那就是js的优化压缩插件(内部使用uglifyjs进行压缩，支持最新ES6+)</span><br><span class="line">terser-webpack-plugin</span><br><span class="line"></span><br><span class="line">optimization:&#123;</span><br><span class="line">minimizer:[</span><br><span class="line"><span class="keyword">new</span> TerserJSPlugin(&#123;&#125;),</span><br><span class="line"><span class="keyword">new</span> OptimizeCSSAssetPlugin(&#123;&#125;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="file-loader处理图片文件"><a href="#file-loader处理图片文件" class="headerlink" title="file-loader处理图片文件"></a>file-loader处理图片文件</h4><ul><li>安装</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure></div><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置图片加载</span></span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>md5文件名的说明</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5值，访问文件名重复，如果是相同的图片，计算出来的md5码是相同的。</span><br></pre></td></tr></table></figure></div><h4 id="url-loader处理图片文件"><a href="#url-loader处理图片文件" class="headerlink" title="url-loader处理图片文件"></a>url-loader处理图片文件</h4><blockquote><p>url-loader与file-loader一样，也可以处理图片，但是url-loader可以以base64编码的方式处理图片</p></blockquote><ul><li>安装</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure></div><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 配置图片加载</span><br><span class="line">    <span class="built_in">test</span>: /\.(png|jpg|gif)$/,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>base64的优点</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 精灵图的作用：减小网络请求</span><br><span class="line"><span class="number">2.</span> base64:减少网络请求  通过京东查看base64编码的图片</span><br></pre></td></tr></table></figure></div><ul><li>设置limit参数</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置图片加载</span></span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 限定文件大小，注意：如果文件超出了大小，会自动调用file-loader，所以安装url-loader通过都要安装file-loader</span></span><br><span class="line">                    limit: <span class="number">8192</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="url-loader处理字体图标文件"><a href="#url-loader处理字体图标文件" class="headerlink" title="url-loader处理字体图标文件"></a>url-loader处理字体图标文件</h4><blockquote><p>处理字体图标文件与处理图标一模一样</p></blockquote><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置字体图标加载</span></span><br><span class="line">    test: /\.(woff|woff2|eot|ttf|otf|svg)$/,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader: 'url-loader',</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 限定文件大小</span></span><br><span class="line">                    limit: 819200</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="babel处理高版本的ES语法"><a href="#babel处理高版本的ES语法" class="headerlink" title="babel处理高版本的ES语法"></a>babel处理高版本的ES语法</h4><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Babel 是一个 JavaScript 编译器。</p><p>今天就开始使用下一代 JavaScript 语法吧！</p><p><a href="http://babeljs.io/" target="_blank" rel="noopener">官网</a></p><p><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">中文网</a></p><p>babel可以把最新版本的语法编译成浏览器能够兼容的代码（ES5）</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul><li>安装</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure></div><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    exclude: /(node_modules)/,</span><br><span class="line">    use: &#123;</span><br><span class="line">           loader: 'babel-loader',</span><br><span class="line">           options: &#123;</span><br><span class="line">               presets: [</span><br><span class="line">                  '@babel/preset-env'</span><br><span class="line">               ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>babel配置文件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在项目根目录创建.babelrc配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    "env"   # 设置babel处理哪些版本的语法，env包括：ES2015/ES2016/ES2017的结合体</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h3><p>在之前的 javascript 中一直是没有模块系统的，前辈们为了解决这些问题，提出了各种规范, 最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。而 ES6 中提供了简单的模块系统，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。 </p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个 变量，就必须使用export关键字输出该变量。下面是一个JS文件，里面使用export命令输出变量。 </p></blockquote><p>es6 中新增了两个命令 <code>export</code> 和 <code>import</code> , <code>export</code> 命令用于规定模块的对外接口，<code>import</code> 命令用于输入其他模块提供的功能 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'hucc'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> desc = <span class="string">'很帅'</span></span><br></pre></td></tr></table></figure></div><p>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件） </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, desc&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'从模块内部导出的内容:'</span>, name, age, desc)</span><br></pre></td></tr></table></figure></div><h4 id="export详解"><a href="#export详解" class="headerlink" title="export详解"></a>export详解</h4><p>上面介绍了模块化最基础的用法，export 不止可以导出函数，还可以导出对象，数组，字符串等等</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'hucc'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> export的写法，除了像上面这样，还有另外一种。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'hucc'</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优点：上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。 </span></span><br><span class="line"><span class="keyword">export</span> &#123;name, arr, obj&#125;</span><br></pre></td></tr></table></figure></div><p>通过 as 改变输出名称 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'hucc'</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过as把obj的名字改成了user，导入时只能写 as 后的命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, arr, obj <span class="keyword">as</span> user&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, arr, user&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'读取的值：'</span>, name, arr, user)</span><br></pre></td></tr></table></figure></div><p>上面的写法中，<code>import</code> 中需要指定加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。 </p><p><code>export default</code> 指定默认输出, import 无需知道变量名就可以直接使用 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//在导入时，可以随意的使用变量名来接收</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line">a()</span><br></pre></td></tr></table></figure></div><p><strong>注意：export default是非常用的语法，用的很多, 以一些常用的模块为例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jQuery'</span>   <span class="comment">// 加载jQuery 库</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>   <span class="comment">// 加载 lodash</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span> <span class="comment">// 加载 moment</span></span><br></pre></td></tr></table></figure></div><h4 id="import详解"><a href="#import详解" class="headerlink" title="import详解"></a>import详解</h4><p><code>import</code> 为加载模块的命令，基础使用方式和之前一样 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, arr, user&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是export default导出的内容</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a'</span></span><br></pre></td></tr></table></figure></div><p>通过 as 命令修改导入的变量名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> n, arr, user&#125; <span class="keyword">from</span> <span class="string">'./a'</span></span><br></pre></td></tr></table></figure></div><p>加载模块的全部内容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'hucc'</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;name, arr, obj <span class="keyword">as</span> user&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//math.js</span></span><br><span class="line"><span class="comment">//除了指定输出变量名或者 export.default 定义的导入， 还可以通过 * 号加载模块的全部.</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">'./a'</span></span><br><span class="line"><span class="built_in">console</span>.log(all.name)</span><br><span class="line"><span class="built_in">console</span>.log(all.arr)</span><br><span class="line"><span class="built_in">console</span>.log(all.user)</span><br></pre></td></tr></table></figure></div><h4 id="兼容性说明"><a href="#兼容性说明" class="headerlink" title="兼容性说明"></a>兼容性说明</h4><p>上面介绍了，es6 中模块的使用方式，但是现在es6的模块化，无论在浏览器端还是 node.js 上都没有得到很好的支持，所以需要，一些转码的工具（babel）。使我们可以用es6的方式来编码，最后输出es5的代码。 </p><hr><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components(单文件组件)</strong> </p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件</a></p><p>优势：</p><ul><li><a href="https://github.com/vuejs/awesome-vue#source-code-editing" target="_blank" rel="noopener">完整语法高亮</a></li><li><a href="https://webpack.js.org/concepts/modules/#what-is-a-webpack-module" target="_blank" rel="noopener">CommonJS 模块</a></li><li><a href="https://vue-loader.vuejs.org/zh-cn/features/scoped-css.html" target="_blank" rel="noopener">组件作用域的 CSS</a></li></ul><h4 id="vscode插件的安装"><a href="#vscode插件的安装" class="headerlink" title="vscode插件的安装"></a>vscode插件的安装</h4><ul><li><code>vutur</code>:默认单文件组件是没有高亮的，需要安装此插件</li><li><code>vue 2 snippets</code>:vue的智能提示，提供了很多vue的快捷键</li></ul><h4 id="单文件组件的格式介绍"><a href="#单文件组件的格式介绍" class="headerlink" title="单文件组件的格式介绍"></a>单文件组件的格式介绍</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件的模板 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件对象 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;&#125;,</span><br><span class="line">    created() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件的样式,可以使用其他预编译语言来编写 --&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div><h4 id="vue-loader处理单文件组件"><a href="#vue-loader处理单文件组件" class="headerlink" title="vue-loader处理单文件组件"></a>vue-loader处理单文件组件</h4><ul><li>新建单文件组件<code>App.vue</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;hello Vue!!!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div><ul><li>安装vue</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure></div><ul><li>准备app.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack的入口文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  template: <span class="string">"&lt;Vue/&gt;"</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>打包，会报错</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> ./src/App.vue <span class="number">1</span>:<span class="number">0</span></span><br><span class="line">Module parse failed: Unexpected token (<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">You may need an appropriate loader to handle <span class="keyword">this</span> file type.</span><br></pre></td></tr></table></figure></div><ul><li>需要vue-loader</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader --save-dev</span><br></pre></td></tr></table></figure></div><ul><li>配置</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ... 其它规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 请确保引入这个插件！</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>打包报错</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[vue-loader] vue-template-compiler must be installed <span class="keyword">as</span> a peer dependency, or a compatible compiler implementation must be passed via options.</span><br></pre></td></tr></table></figure></div><ul><li>安装依赖项</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure></div><ul><li>报错</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue.runtime.esm.js:<span class="number">588</span> [Vue warn]: You are using the runtime-only build <span class="keyword">of</span> Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br><span class="line"></span><br><span class="line">(found <span class="keyword">in</span> &lt;Root&gt;)</span><br></pre></td></tr></table></figure></div><h4 id="vue的构建版本介绍"><a href="#vue的构建版本介绍" class="headerlink" title="vue的构建版本介绍"></a>vue的构建版本介绍</h4><ul><li>重新导入vue</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue/dist/vue.esm"</span></span><br></pre></td></tr></table></figure></div><ul><li><p>重新编译，发现就可以了</p></li><li><p>对比引入<code>vue.esm</code>与<code>vue</code>的区别</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template方法 与 render方法</span><br></pre></td></tr></table></figure></div><h3 id="webpack-配置vue-router"><a href="#webpack-配置vue-router" class="headerlink" title="webpack-配置vue-router"></a>webpack-配置vue-router</h3><ul><li>安装vue-router</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure></div><ul><li>使用vue-router</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import Vue from "vue"</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue/dist/vue.esm"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></div><ul><li>配置路由</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span>  VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">redirect</span>: <span class="string">'/home'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/home"</span>, <span class="attr">component</span>: Home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/list"</span>, <span class="attr">component</span>: List&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>使用路由</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  template: <span class="string">'&lt;App&gt;&lt;/App&gt;'</span>,</span><br><span class="line">  components: &#123; App  &#125;,</span><br><span class="line">  router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="路由功能模块化提取"><a href="#路由功能模块化提取" class="headerlink" title="路由功能模块化提取"></a>路由功能模块化提取</h3><p>vue-router模块功能提取</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue/dist/vue.esm"</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home.vue"</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"../components/List.vue"</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span>  VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">redirect</span>: <span class="string">'/home'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/home"</span>, <span class="attr">component</span>: Home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/list"</span>, <span class="attr">component</span>: List&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h5 id="打包文件分类"><a href="#打包文件分类" class="headerlink" title="打包文件分类"></a>打包文件分类</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 css文件 放在dist目录下的 css文件夹中</span></span><br><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">  filename: <span class="string">"css/main.css"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2  img </span></span><br><span class="line">outputPath: <span class="string">"/img/"</span>,</span><br><span class="line">publicPath: <span class="string">'http://www.zag.com'</span> <span class="comment">// 添加图片资源的公共路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 js</span></span><br><span class="line">output:  filename: <span class="string">'js/bundle.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在output中配置 所有的资源的公共路径</span></span><br><span class="line">publicPath: <span class="string">'http://www.zag.com'</span></span><br></pre></td></tr></table></figure></div><h5 id="resolve属性的设置"><a href="#resolve属性的设置" class="headerlink" title="resolve属性的设置"></a>resolve属性的设置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">'.js'</span>,<span class="string">'.json'</span>, <span class="string">'.css'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">"bootstrap$"</span>: <span class="string">"bootstrap/dist/css/bootstrap.css"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="全局变量引入问题"><a href="#全局变量引入问题" class="headerlink" title="全局变量引入问题"></a>全局变量引入问题</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="comment">// 在每个模块中注入$符  直接使用</span></span><br><span class="line">$:<span class="string">"jquery"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">如果在文件中引入外部js文件 （比如jquery的CDN）</span><br><span class="line">为了防止jquery通过模块引入打包文件中 可以设置忽略</span><br><span class="line">externals: &#123;</span><br><span class="line">   jquery:<span class="string">"$"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="webpack中的一些小插件"><a href="#webpack中的一些小插件" class="headerlink" title="webpack中的一些小插件"></a>webpack中的一些小插件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 cleanWebpackPlugin  清空插件 （可以用来清空每次打包的目录 然后再进行新的打包）</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'./dist'</span>),</span><br><span class="line"><span class="comment">// 2 copyWebpackPlugin  拷贝文件的插件</span></span><br><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">  &#123;<span class="attr">from</span>: <span class="string">'doc'</span>, <span class="attr">to</span>: <span class="string">'./'</span>&#125;</span><br><span class="line">]),</span><br><span class="line"><span class="comment">// 3 bannerPlugin  webpack内置插件</span></span><br><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">"make 2019 by zag"</span>)</span><br></pre></td></tr></table></figure></div><h5 id="webpack开发环境下的代理跨域方式"><a href="#webpack开发环境下的代理跨域方式" class="headerlink" title="webpack开发环境下的代理跨域方式"></a>webpack开发环境下的代理跨域方式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在devServer中 设置proxy</span></span><br><span class="line">proxy:&#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">    <span class="comment">// secure: false,// 如果是https接口，需要配置这个参数</span></span><br><span class="line">    changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">    pathRewrite: &#123;<span class="comment">// 通过重写的方式代理到目标服务器</span></span><br><span class="line">        <span class="string">"/api"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意：打包上线之前 需要把/api请求前缀在文件中全部去掉，可以借助使用axios工具的 Axios.defaults.baseURL = <span class="string">'/api'</span>;</span><br></pre></td></tr></table></figure></div><h5 id="Ignore-Plugin"><a href="#Ignore-Plugin" class="headerlink" title="Ignore Plugin"></a>Ignore Plugin</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了防止 在引入第三方模块的时候 内部加载一些不必要的大的文件，</span></span><br><span class="line"><span class="comment">// 比如 moment 日期时间的包 需要引入 它目录下的 ./locale/各种语言包 导致整个文件打包体积变大 </span></span><br><span class="line"><span class="comment">// 可以通过webpack内置插件 来实现忽略</span></span><br><span class="line"><span class="keyword">new</span> Webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, /moment/),</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当然 如果需要引入其中的中文支持 则可以单独引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"moment/locale/zh-cn"</span>; 即可， 这样文件打包体积也不会变的很大</span><br></pre></td></tr></table></figure></div><h5 id="treeShaking"><a href="#treeShaking" class="headerlink" title="treeShaking"></a>treeShaking</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 语法 在生产环境下 会自动去除掉没用的代码</span><br><span class="line"><span class="comment">// tree-shaking 把没用的代码 自动删除掉</span></span><br></pre></td></tr></table></figure></div><h5 id="实时打包文件"><a href="#实时打包文件" class="headerlink" title="实时打包文件"></a>实时打包文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:<span class="literal">true</span> <span class="comment">// 实时监控 变化 从而进行打包</span></span><br><span class="line">watchOptions: &#123; </span><br><span class="line">  poll:<span class="number">1000</span>,  <span class="comment">// 每秒 监控 1000次</span></span><br><span class="line">  aggregateTimeout: <span class="number">500</span>, <span class="comment">// 防抖 我一直输入代码</span></span><br><span class="line">  ignored: <span class="regexp">/node_modules/</span>  <span class="comment">// 不需要进行监控哪个文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devtool: 源码映射 会单独生成一个 sourcemap文件 出错了，会标示 当前报错的列和行 大而全</span><br><span class="line">devtool: <span class="string">"source-map"</span> <span class="comment">// 增加映射文件 帮我们调试代码</span></span><br><span class="line">devtool:<span class="string">'eval-source-map'</span>; <span class="comment">// 不会产生单独文件 但是可以显示行和列</span></span><br></pre></td></tr></table></figure></div><h5 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a>打包多页应用</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 在webpack配置文件中 </span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">"home"</span>: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    <span class="string">"other"</span>: <span class="string">"./src/other.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// name: 代表 home/other</span></span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html-webpack-plugin html模版生成插件</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 将两个文件分别引入不同的模版文件中 chunks 代码块</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"./index.html"</span>,</span><br><span class="line">    filename: <span class="string">"home.html"</span>,</span><br><span class="line">    chunks: [<span class="string">"home"</span>]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"./index.html"</span>,</span><br><span class="line">    filename: <span class="string">"other.html"</span>,</span><br><span class="line">    chunks: [<span class="string">"home"</span>, <span class="string">'other'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><h2 id="vue-cli的使用"><a href="#vue-cli的使用" class="headerlink" title="vue-cli的使用"></a>vue-cli的使用</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 工作过程中，vue开发都是需要基于webpack来开发的。</span><br><span class="line">- 但是webpack实际上很难使用和掌握，因为配置项太多了，导致很多vue初学者因为不会使用webpack而放弃了vue，这是vue作者不想看到的</span><br><span class="line">- 因此vue作者提供了vue-cli,vue脚手架工具，通过这个工具只要执行一条命令就可以生成给一个项目结构，这个项目结构中，所有的webpack全都配置好了</span><br></pre></td></tr></table></figure></div><ul><li><a href="https://github.com/vuejs/vue-cli/tree/v2#vue-cli--" target="_blank" rel="noopener">github地址</a></li><li><a href="/imgs/%E5%9B%BE1.png" data-fancybox="group" data-caption="webpack01" class="fancybox"><img alt="webpack01" title="webpack01" data-src="/imgs/%E5%9B%BE1.png" src="/img/loading.gif" class="lazyload"></a></li></ul><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ul><li>安装</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure></div><ul><li>初始化项目</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue-project</span><br></pre></td></tr></table></figure></div><ul><li>如果下载失败</li></ul><p><a href="https://blog.csdn.net/qq_15243963/article/details/78779111" target="_blank" rel="noopener">解决vue-cli不能初始化webpack模板的问题</a></p><ul><li>使用命令</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue-project --offline</span><br></pre></td></tr></table></figure></div><ul><li>启动项目</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法04</title>
      <link href="/2019/02/24/%E5%89%8D%E7%AB%AF-2019-02-24-vue%E5%9F%BA%E7%A1%8004/"/>
      <url>/2019/02/24/%E5%89%8D%E7%AB%AF-2019-02-24-vue%E5%9F%BA%E7%A1%8004/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h2 id="props是只读的"><a href="#props是只读的" class="headerlink" title="props是只读的"></a>props是只读的</h2><p>props属性是只读的，子组件中不允许修改父组件中的数据</p><h2 id="父组件到子组件"><a href="#父组件到子组件" class="headerlink" title="父组件到子组件"></a>父组件到子组件</h2><ul><li>方式：通过<code>props</code>属性来传递数据</li><li>注意：属性的值必须在组件中通过<code>props</code>属性显示指定，否则，不会生效</li><li>说明：传递过来的<code>props</code>属性的用法与<code>data</code>属性的用法相同</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">msg</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">my-msg</span>=<span class="string">"'abc'"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    hello: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 显式创建props及其传递过来的属性</span></span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'msg'</span>, <span class="string">'myMsg'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 hello 组件，这是消息：</span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"> --- </span><span class="template-variable">&#123;&#123;myMsg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="子组件到父组件"><a href="#子组件到父组件" class="headerlink" title="子组件到父组件"></a>子组件到父组件</h2><ul><li>方式：父组件给子组件传递一个函数，由子组件调用这个函数</li><li>说明：借助vue中的自定义事件（v-on:cunstomFn=”fn”）</li><li><code>$emit()</code>：触发事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span> @<span class="attr">pfn</span>=<span class="string">"parentFn"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 父组件：提供方法</span></span></span><br><span class="line">      parentFn(data) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'父组件：'</span>, data)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'hello'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 子组件：通过$emit调用</span></span></span><br><span class="line">      fn() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'pfn'</span>, <span class="string">'这是子组件传递给父组件的数据'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h2><blockquote><p>在简单的场景下，可以使用一个空的 Vue 实例作为事件总线</p></blockquote><ul><li><code>$on()</code>：绑定事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>示例：组件A —&gt; 组件B</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件A： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件B： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      comB: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">p</span>&gt;</span>组件A告诉我：</span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>',</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            msg: <span class="string">''</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 定义事件：</span></span></span><br><span class="line"><span class="actionscript">          bus.$on(<span class="string">'tellComB'</span>, (msg) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.msg = msg</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      comA: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"emitFn"</span>&gt;</span>告诉B<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          emitFn() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 调用组件B中定义的事件：</span></span></span><br><span class="line"><span class="actionscript">            bus.$emit(<span class="string">'tellComB'</span>, <span class="string">'土豆土豆我是南瓜'</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="获取组件（或元素）-refs"><a href="#获取组件（或元素）-refs" class="headerlink" title="获取组件（或元素） - refs"></a>获取组件（或元素） - refs</h2><ul><li>说明：<code>vm.$refs</code> 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）</li><li>使用：在 HTML元素 中，添加<code>ref</code>属性，然后在JS中通过<code>vm.$refs.属性</code>来获取</li><li>注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods</li><li><code>$refs允许父组件直接快速的获取子组件的数据，使用场景并不多</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  vm.$refs.dv</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>通过ref属性可以获取到子组件</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">ref</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.son)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 获取子组件的数据和方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.son.msg)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="组件-slot插槽"><a href="#组件-slot插槽" class="headerlink" title="组件-slot插槽"></a>组件-slot插槽</h2><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><blockquote><p>当组件中某一项需要单独定义，那么就应该使用solt </p></blockquote><h3 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h3><blockquote><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃 ,当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。 </p></blockquote><p>在组件的模版中定义<code>slot</code>插槽</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"modal"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="modal"&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;温馨提示&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;关闭&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>父组件传值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;modal&gt;你确定要退出系统吗？&lt;<span class="regexp">/modal&gt;</span></span><br><span class="line"><span class="regexp">&lt;modal&gt;你确定要删除这个内容吗？&lt;/m</span>odal&gt;</span><br></pre></td></tr></table></figure></div><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p>如果一个组件中想使用多个slot那么此时就应该使用具名slot。 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"modal"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="modal"&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="header"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="content"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="footer"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>你要删除内容吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>你要删除这条记录吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>开启<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="动态组件-component"><a href="#动态组件-component" class="headerlink" title="动态组件 - component"></a>动态组件 - component</h2><ul><li>作用：渲染一个“元组件”为动态组件。依 <code>is</code> 的值，来决定哪个组件被渲染。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"componentId"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 两个组件：</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'home'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Home 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'login'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Login 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">  componentId: <span class="string">'home'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="vue重点知识回顾"><a href="#vue重点知识回顾" class="headerlink" title="vue重点知识回顾"></a>vue重点知识回顾</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 组件定义方式</span><br><span class="line"><span class="number">2.</span> 组件通讯</span><br><span class="line">父-》子</span><br><span class="line">子-》父</span><br><span class="line">非父子 （bus）</span><br></pre></td></tr></table></figure></div><h1 id="单页应用程序与路由"><a href="#单页应用程序与路由" class="headerlink" title="单页应用程序与路由"></a>单页应用程序与路由</h1><h2 id="SPA-单页应用程序"><a href="#SPA-单页应用程序" class="headerlink" title="SPA -单页应用程序"></a>SPA -单页应用程序</h2><ul><li>SPA： <code>Single Page Application</code></li></ul><p><a href="https://baike.baidu.com/item/SPA/17536313?fr=aladdin" target="_blank" rel="noopener">SPA </a></p><p><a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单页Web应用（single page application，SPA），就是只有一个Web页面的应用，</span><br><span class="line">是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面, 需要加载很多资源文件，css js 图片</span><br><span class="line"></span><br><span class="line">对于单页应用程序来说, 只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.</span><br><span class="line">  然后, 由页面中js解析获取的数据, 展示在页面中</span><br></pre></td></tr></table></figure></div><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>1 减少了请求体积，加快页面响应速度，降低了对服务器的压力</li><li>2 更好的用户体验，让用户在web app感受native app的流畅</li></ul><h3 id="主要技术点"><a href="#主要技术点" class="headerlink" title="主要技术点"></a>主要技术点</h3><ul><li>1 ajax / axios</li><li>2 哈希值（锚点）的使用（window.location.hash #）</li><li>3 hashchange 事件</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>监听锚点值变化的事件，根据不同的锚点值，请求相应的数据</li><li>1 锚点（#）原本用作页面内部进行跳转，定位并展示相应的内容</li><li>2 SPA中，锚点被用作请求不同资源的标识，请求数据并展示内容</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>路由即：浏览器URL中的哈希值（# hash）与展示视图内容（template）之间的对应规则</li><li>vue中的路由是：hash 和 component的对应关系，一个哈希值对应一个组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 Web app 中，通过一个页面来展示和管理整个应用的功能。</span><br><span class="line">SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！</span><br><span class="line">简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。</span><br><span class="line">当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容</span><br></pre></td></tr></table></figure></div><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>安装：<code>npm i -S vue-router</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 5 路由入口：链接导航 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 6 路由出口：用来展示匹配路由视图内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 导入 vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 导入 路由文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 3 创建两个组件</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Home = Vue.component(<span class="string">'home'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Home 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Login = Vue.component(<span class="string">'login'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Login 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 4 创建路由对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">    routes: [</span><br><span class="line"><span class="actionscript">      &#123; path: <span class="string">'/home'</span>, component: Home &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; path: <span class="string">'/login'</span>, component: Login &#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 不要忘记，将路由与vue实例关联到一起！</span></span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li>解释：将 <code>/</code> 重定向到 <code>/home</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/home'</span> &#125;</span><br></pre></td></tr></table></figure></div><h3 id="路由导航高亮"><a href="#路由导航高亮" class="headerlink" title="路由导航高亮"></a>路由导航高亮</h3><ul><li>说明：当前匹配的导航链接，会自动添加<code>router-link-exact-active router-link-active</code>类</li><li>通过配置项 <code>linkActiveClass: &#39;now&#39;</code> 来修改默认的高亮类名</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改默认高亮的a标签的类名</span></span><br><span class="line">  linkActiveClass: <span class="string">'now'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><ul><li>说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理</li><li>语法：<code>/user/:id</code></li><li>使用：当匹配到一个路由时，参数值会被设置到 this.$route.params</li><li>其他：可以通过 <code>$route.query</code> 获取到 URL 中的查询字符串（queryString） 等</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链接：</span></span><br><span class="line">&lt;router-link to=<span class="string">"/user/1001"</span>&gt;用户 Jack&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">&lt;router-link to="/u</span>ser/<span class="number">1002</span><span class="string">"&gt;用户 Rose&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 路由：</span></span><br><span class="line"><span class="string">&#123; path: '/user/:id', component: User &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// User组件：</span></span><br><span class="line"><span class="string">const User = &#123;</span></span><br><span class="line"><span class="string">  template: `&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div><h1 id="vue过渡动画"><a href="#vue过渡动画" class="headerlink" title="vue过渡动画"></a>vue过渡动画</h1><blockquote><p>vue适合做增删改查，不适合做特别炫酷的动态效果，但是在网页中常见的显示隐藏动画也是非常普遍的。在vue中支持多种方式进行动画</p></blockquote><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="vue动画-类名"><a href="#vue动画-类名" class="headerlink" title="vue动画-类名"></a>vue动画-类名</h2><blockquote><p>在进入/离开的过渡中，会有 6 个 class 切换。 </p></blockquote><p><a href="E:/cursor/24-SH23/16-vue%E7%AC%AC%E5%9B%9B%E5%A4%A9/01-%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E7%AC%94%E8%AE%B0/imgs/transition.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="E:/cursor/24-SH23/16-vue%E7%AC%AC%E5%9B%9B%E5%A4%A9/01-%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E7%AC%94%E8%AE%B0/imgs/transition.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-enter</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-enter-to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave-to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="vue动画-animate-css"><a href="#vue动画-animate-css" class="headerlink" title="vue动画-animate.css"></a>vue动画-animate.css</h2><ul><li>安装</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i animate.css</span><br></pre></td></tr></table></figure></div><ul><li>引入</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="./node_modules/animate.css/animate.css"&gt;</span><br></pre></td></tr></table></figure></div><ul><li>使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated bounceInLeft"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法03</title>
      <link href="/2019/02/16/%E5%89%8D%E7%AB%AF-2019-02-16-vue%E5%9F%BA%E7%A1%8003/"/>
      <url>/2019/02/16/%E5%89%8D%E7%AB%AF-2019-02-16-vue%E5%9F%BA%E7%A1%8003/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="响应式数据的说明"><a href="#响应式数据的说明" class="headerlink" title="响应式数据的说明"></a>响应式数据的说明</h1><blockquote><p>axios根据id删除数据问题</p><p>动态添加数据不是响应式以及$set的使用 ===》多属性动态添加响应</p><p>异步dom更新以及$nextTick的使用</p></blockquote><h2 id="动态添加的数据是无效的以及-set的使用"><a href="#动态添加的数据是无效的以及-set的使用" class="headerlink" title="动态添加的数据是无效的以及$set的使用"></a>动态添加的数据是无效的以及$set的使用</h2><ul><li>data中的数据一定要先声明，再使用，动态给对象添加的属性不是响应式的</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;person.name&#125;&#125;---&#123;&#123;person.age&#125;&#125;---&#123;&#123;person.gender&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            person: &#123;</span></span><br><span class="line"><span class="regexp">                name: 'zs',</span></span><br><span class="line"><span class="regexp">                age: 18</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态给data中添加的数据是无效的</span></span><br><span class="line"><span class="comment">// 在vue实例创建的时候，会把data中的数据绑定到vm上，所以data中的数据是响应的</span></span><br><span class="line"><span class="comment">// 但是动态绑定的数据不是响应是的。</span></span><br><span class="line">vm.person.gender = <span class="string">'男'</span></span><br></pre></td></tr></table></figure></div><ul><li>如果想要动态绑定数据，并且是响应式的,需要使用<code>vm.$set方法</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.person, 'gender', '男')</span><br></pre></td></tr></table></figure></div><h2 id="异步DOM更新以及-nextTick的说明"><a href="#异步DOM更新以及-nextTick的说明" class="headerlink" title="异步DOM更新以及$nextTick的说明"></a>异步DOM更新以及$nextTick的说明</h2><p>在vue中数据发生了改变，DOM中的数据也会跟着发生改变，但是这个过程是异步的</p><p>vue的数据发生改变之后，DOM不会立即更新，会等到下一次渲染工作执行的时候才会更新DOM</p><p>目的：为了提高渲染的性能</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clickFn () &#123;</span><br><span class="line">    <span class="comment">// 数据变化了， view中的内容也要跟着变</span></span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'你好啊，vue1'</span></span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'你好啊，vue2'</span></span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'你好啊，vue3'</span></span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'你好啊，vue4'</span></span><br><span class="line">    <span class="keyword">this</span>.msg = <span class="string">'你好啊，vue5'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么：DOM操作是非常消耗性能的，简单DOM的操作能够提升我们的性能，如果每次操作数据，都立即更新DOM，无疑性能会非常的低，所以vue中会等待数据都修改完成</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>).innerHTML</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>$nextTick</code>方法会在DOM更新之后执行</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在实际开发中，有可能需要在数据改变之后，获取到更新之后的DOM数据</span></span><br><span class="line"><span class="comment">// 这个时候可以使用 $nextTick函数</span></span><br><span class="line"><span class="comment">// 当vue更新完DOM后，会自动调用$nextTick函数，确保在这个函数中可以获取到DOM结构是最新的</span></span><br><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>).innerHTML</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>#watch监视数据的变化</p><blockquote><p>vue实例中提供了一个watch属性，用于监听vue实例中的属性的变化。</p><p>watch对应了一个对象，键是观察的属性，值是对应的回调函数。</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>基本使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：当前值</span></span><br><span class="line"><span class="comment">//第二个参数：上一次的值</span></span><br><span class="line">username: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>表单校验效果</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch: 监视数据的变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// 监视msg，只要msg属性的值发生改变，function就会执行</span></span><br><span class="line">    <span class="comment">// value: 当前值  oldValue:上一次的值</span></span><br><span class="line">    msg: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.length &gt;=<span class="number">3</span> &amp;&amp; value.length &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tips = <span class="string">'正确'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.tips = <span class="string">'密码格式不正确'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="监视对象"><a href="#监视对象" class="headerlink" title="监视对象"></a>监视对象</h2><blockquote><p>监视对象的时候，需要加上<code>deep: true</code></p><p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> </p></blockquote><ul><li>如果是一个对象，无法监听到对象内部值的变化</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">          name:<span class="string">'zs'</span>,</span><br><span class="line">          age: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        user: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(curr, old);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;input type="text" v-model="user.name"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" v-model="user.age"&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>需要加上deep</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">        deep: <span class="literal">true</span>,</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//注意：如果监听的是对象，新值与旧值都是相同的，因为指向了同一个对象。</span></span><br><span class="line">          <span class="comment">// https://cn.vuejs.org/v2/api/#vm-watch</span></span><br><span class="line">          <span class="built_in">console</span>.log(curr.age, curr.name);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><strong>immediate</strong> 属性,立马进行监听</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">        deep: <span class="literal">true</span>,</span><br><span class="line">        immediate:<span class="literal">true</span>,</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span>(<span class="params">curr, old</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(curr.age, curr.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><blockquote><p>计算属性：当计算属性依赖的数据发生改变的时候，计算属性会重新计算一次，如果计算属性依赖的属性没有发生改变，那么计算属性就不会重新计算。</p></blockquote><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        n1:<span class="string">''</span>,</span><br><span class="line">        n2:<span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//n3依赖与n1和n2的值，当n1 和 n2发生改变的时候，这个函数就会执行。</span></span><br><span class="line">    <span class="comment">//返回值就是n3的值</span></span><br><span class="line">      computed: &#123;</span><br><span class="line">        n3()&#123;</span><br><span class="line">          <span class="keyword">return</span> +<span class="keyword">this</span>.n1 + +<span class="keyword">this</span>.n2;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></div><p><strong>计算属性是基于它们的依赖项进行缓存的</strong> </p><p>如果页面中需要使用多次计算属性的值，只会计算一次，计算属性只有在它的相关依赖发生改变时才会重新求值。 </p><p><strong>计算属性不能与data中的属性同名，因为无论是data中的属性还是计算属性，最终都是挂载到vm上的</strong></p><h2 id="计算属性与watch的区别"><a href="#计算属性与watch的区别" class="headerlink" title="计算属性与watch的区别"></a>计算属性与watch的区别</h2><blockquote><p>通过加法计算器进行比较</p></blockquote><p>计算属性：当依赖的属性发生改变的时候，当前属性就会跟着变化</p><p>监听：当前属性发生改变的时候，监听的函数就会执行</p><p><strong>注意：当你有一些数据需要随着其它数据变动而变动时，不要滥用 <code>watch</code></strong></p><h2 id="使用计算属性实现品牌管理案例"><a href="#使用计算属性实现品牌管理案例" class="headerlink" title="使用计算属性实现品牌管理案例"></a>使用计算属性实现品牌管理案例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    newList() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.list.filter( <span class="function"><span class="params">item</span>=&gt;</span>item.name.includes(<span class="keyword">this</span>.key) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>vue除了提供了核心的一些指令，还允许注册自定义指令。 </p><p>有的情况下，你仍然需要对<strong>普通 DOM 元素进行底层操作</strong>，这时候就会用到自定义指令。 </p><ul><li>基本语法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册自定义指令</span></span><br><span class="line"><span class="comment">// v-focus  v-text  v-on</span></span><br><span class="line"><span class="comment">// 参数1，指令名称  参数2：配置参数</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">    <span class="comment">// 钩子函数比较多，用的比较多的是 bind 和 update</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只会调用一次，当指令绑定到当前元素上时调用</span></span><br><span class="line">    bind (el) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前元素被插入到父节点的时候调用(渲染时)</span></span><br><span class="line">    inserted (el,binding) &#123;</span><br><span class="line">        el.focus()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当指令对应的数据发生改变的时候</span></span><br><span class="line">    update () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 所有的DOM都更新之后</span></span><br><span class="line">    componentUpdated () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令与元素解绑的时候</span></span><br><span class="line">    unbind () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>指令的参数</li></ul><p>所有的钩子函数两个参数<code>el</code>和<code>binding</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">el: 当前元素</span><br><span class="line">binding：一个对象，包含以下属性：</span><br><span class="line">    name：指令名，不包括 v- 前缀。</span><br><span class="line">    value：指令的绑定值，例如：v-my-directive=<span class="string">"1 + 1"</span> 中，绑定值为 <span class="number">2</span>。</span><br><span class="line">    oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</span><br><span class="line">    expression：字符串形式的指令表达式。例如 v-my-directive=<span class="string">"1 + 1"</span> 中，表达式为 <span class="string">"1 + 1"</span>。</span><br><span class="line">    arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 <span class="string">"foo"</span>。</span><br><span class="line">    modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 &#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;。</span><br></pre></td></tr></table></figure></div><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件的概念"><a href="#组件的概念" class="headerlink" title="组件的概念"></a>组件的概念</h2><blockquote><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。 </p><p>在vue中都是组件化开发的，组件化开发就是把一个完整的页面分割成一个一个的小组件。</p></blockquote><p>组件的优点：</p><ul><li>容易维护</li><li>复用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue组件分为全局组件和局部组件</span><br><span class="line">全局组件：在所有的vue实例中都能使用</span><br><span class="line">局部组件：只有在当前vue实例中能够使用</span><br></pre></td></tr></table></figure></div><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>定义</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要注册一个全局组件，可以使用 Vue.component(tagName, options)。</span></span><br><span class="line"><span class="comment">//注册一个全局的组件</span></span><br><span class="line"><span class="comment">// Vue.component(tagName, options)</span></span><br><span class="line">Vue.component(<span class="string">"hello"</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;h3&gt;我是全局组件！&lt;/h3&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><ul><li>使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">全局组件可以在所有的实例中使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>注意点：组件的模板有且仅有一个根元素</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是全局组件！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有两个根元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span>';  //错误的用法</span><br><span class="line">template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是全局组件！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>有两个根元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>';</span><br></pre></td></tr></table></figure></div><ul><li>如果有很多的内容，template可以使用字符串模版</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"my-button"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vue实例的内部，通过components属性来定义局部组件</span></span><br><span class="line">components: &#123;</span><br><span class="line">    <span class="string">"my-button"</span>: &#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="组件是特殊的vue实例"><a href="#组件是特殊的vue实例" class="headerlink" title="组件是特殊的vue实例"></a>组件是特殊的vue实例</h2><blockquote><p>可以将组件看成是一个vue的实例，因此，在vue实例中能配置的属性，在组件中依旧能够配置。</p><p>比如：data,method,watch,computed,钩子函数等</p><p>注意：组件中data属性必须是一个函数，返回值才是data的数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以把组件看成一个vue实例</span></span><br><span class="line">Vue.component(<span class="string">"my-button"</span>, &#123;</span><br><span class="line">   template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1 @click="add"&gt;我是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">//组件可以通过data属性提供组件自己的数据，注意，组件的data参数必须是一个函数，不能是用一个对象。</span></span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: <span class="string">'hello vue'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"哈哈"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><ul><li>组件是一个独立封闭的个体，组件之间的数据是无法相互使用的</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        outer: <span class="string">'我是实例的数据'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把组件看成一个vue实例</span></span><br><span class="line">Vue.component(<span class="string">"my-button"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;inner&#125;&#125;&lt;/p&gt;  //正确，组件可以使用自己的数据</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;outer&#125;&#125;&lt;/p&gt;  //报错，组件无法使用其他组件的数据</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            inner: <span class="string">'我是组件的数据'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="vue-devTool浏览器插件的使用"><a href="#vue-devTool浏览器插件的使用" class="headerlink" title="vue-devTool浏览器插件的使用"></a>vue-devTool浏览器插件的使用</h2><blockquote><p>vue-devtools是一款基于chrome游览器的插件，用于调试vue应用，这可以极大地提高我们的调试效率。</p></blockquote><p><a href="https://segmentfault.com/a/1190000009682735" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009682735</a></p><p>默认插件必须在http协议下打开才能看到。</p><p>插件详细信息—》允许访问文件网址   ，这样file协议打开也能看到效果了</p><h1 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h1><blockquote><p>因为组件是一个独立的个体，组件无法使用到外部的数据</p><p>但是在真实开发中，多个组件之间是需要相互使用彼此的数据的，因此需要使用组件通讯的技术，让组件之间能够相互传值。</p></blockquote><p>组件通讯分为三类</p><ul><li>父组件传递值给子组件</li><li>子组件传递值给父组件</li><li>非父子组件之间的传值</li></ul><h2 id="组件通讯-父传子"><a href="#组件通讯-父传子" class="headerlink" title="组件通讯-父传子"></a>组件通讯-父传子</h2><ul><li>定义两个组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"parent"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="parent"&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是父组件&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;son&gt;&lt;/son&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            car: <span class="string">'玛莎拉蒂'</span>,</span><br><span class="line">            month: <span class="number">1000000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"son"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="son"&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是子组件&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;parent&gt;&lt;<span class="regexp">/parent&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></div><ul><li>组件的通讯</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 在父组件的模版中，给子组件增加一个自定义的属性。</span><br><span class="line">&lt;son :car=<span class="string">"car"</span>&gt;&lt;<span class="regexp">/son&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2. 子组件通过props属性进行接收</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/接收父组件传递过来的值</span></span><br><span class="line"><span class="regexp">props: ['car']</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">3. 子组件使用父组件传递过来的值</span></span><br><span class="line"><span class="regexp">template: `</span></span><br><span class="line"><span class="regexp">&lt;div class="son"&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;这是子组件&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;这是父组件传递过来的值----&#123;&#123;car&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="string">`,</span></span><br></pre></td></tr></table></figure></div><ul><li>思考，怎么获取父组件的money</li></ul><p><strong>注意：props负责获取父组件的传递过来的，props中的值是只读的，不允许修改</strong></p><h2 id="组件通讯-子到父"><a href="#组件通讯-子到父" class="headerlink" title="组件通讯-子到父"></a>组件通讯-子到父</h2><blockquote><p>参考链接：<a href="https://blog.csdn.net/jsxiaoshu/article/details/79058940" target="_blank" rel="noopener">https://blog.csdn.net/jsxiaoshu/article/details/79058940</a></p></blockquote><p>整体思路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 父组件给子组件注册一个自定义事件</span><br><span class="line"><span class="number">2.</span> 子组件触发这个自定义事件，触发事件时把数据传递给父组件</span><br></pre></td></tr></table></figure></div><ul><li>父组件给子组件注册事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;son @fn=<span class="string">'getData'</span>&gt;&lt;<span class="regexp">/son&gt;</span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/1. 父组件中定义了一个方法，用于获取数据</span></span><br><span class="line"><span class="regexp">    getData () &#123;</span></span><br><span class="line"><span class="regexp">        console.log("父组件中提供的方法");</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div><ul><li>子组件触发自定义事件，并且把要传递的数据作为参数进行传递</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$emit可以出发当前实例的事件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'getData'</span>, <span class="keyword">this</span>.car);</span><br></pre></td></tr></table></figure></div><ul><li>父组件获取值</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//1. 父组件中定义了一个方法，用于获取数据</span></span><br><span class="line">    getData (skill) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父组件中提供的方法"</span>, skill);</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="案例-评论列表"><a href="#案例-评论列表" class="headerlink" title="案例-评论列表"></a>案例-评论列表</h2><ul><li>父到子</li><li>子到父</li><li>es6中属性的简写</li></ul><h2 id="组件通讯-非父子"><a href="#组件通讯-非父子" class="headerlink" title="组件通讯-非父子"></a>组件通讯-非父子</h2><blockquote><p>非父子组件之间通过一个空的Vue实例来传递数据。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> Vue();   <span class="comment">//bus:公交车  事件总线</span></span><br></pre></td></tr></table></figure></div><ul><li>核心逻辑</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">组件A给组件B传值：</span><br><span class="line"><span class="number">1.</span> 组件A给bus注册一个事件，监听事件的处理程序</span><br><span class="line"><span class="number">2.</span> 组件B触发bus上对应的事件，把 值当成参数来传递</span><br><span class="line"><span class="number">3.</span> 组件A通过事件处理程序获取数据</span><br></pre></td></tr></table></figure></div><ul><li>组件A给bus注册事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//rose在组件创建的时候，给bus注册了一个事件</span></span><br><span class="line">created () &#123;</span><br><span class="line">    bus.$on(<span class="string">"get"</span>, (msg)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是rose注册的事件"</span>, msg);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>组件B触发bus的事件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"send"</span>&gt;表白&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">    send() &#123;</span></span><br><span class="line"><span class="regexp">        bus.$emit("get", this.msg);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div><ul><li>组件A通过事件处理程序可以获取到传递的值</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bus.$on(<span class="string">"get"</span>, (msg)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是rose注册的事件"</span>, msg);</span><br><span class="line">    <span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p><strong>注意点：1. 必须是同一辆公交车  2. 注册的事件和触发的事件必须保持一致</strong></p><h2 id="案例：开关灯案例"><a href="#案例：开关灯案例" class="headerlink" title="案例：开关灯案例"></a>案例：开关灯案例</h2><h2 id="bus是一种通用的组件通讯方案"><a href="#bus是一种通用的组件通讯方案" class="headerlink" title="bus是一种通用的组件通讯方案"></a>bus是一种通用的组件通讯方案</h2><p>我们有三种组件通讯的方案</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 父父子</span><br><span class="line"><span class="number">2.</span> 子传父</span><br><span class="line"><span class="number">3.</span> 非父子（bus）</span><br><span class="line"></span><br><span class="line">其实bus方案也适用于父传子和子传父的方案。</span><br></pre></td></tr></table></figure></div><h5 id="了解：其他组件通信方式"><a href="#了解：其他组件通信方式" class="headerlink" title="了解：其他组件通信方式"></a>了解：其他组件通信方式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>$refs以及$parent、$children</span><br><span class="line"><span class="number">2.</span>$attrs &amp; $listeners</span><br><span class="line"><span class="number">3.</span>provide &amp; inject</span><br><span class="line"><span class="number">4.</span>vuex</span><br></pre></td></tr></table></figure></div><h1 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h1><blockquote><p>当组件中某一项需要单独定义，那么就应该使用slot </p></blockquote><h2 id="单个slot"><a href="#单个slot" class="headerlink" title="单个slot"></a>单个slot</h2><blockquote><p>除非子组件模板包含至少一个 <code>&lt;slot&gt;</code> 插口，否则父组件的内容将会被丢弃 ,当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。 </p></blockquote><p>在组件的模版中定义<code>slot</code>插槽</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"modal"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="modal"&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;温馨提示&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;button&gt;关闭&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>父组件传值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;modal&gt;你确定要退出系统吗？&lt;<span class="regexp">/modal&gt;</span></span><br><span class="line"><span class="regexp">&lt;modal&gt;你确定要删除这个内容吗？&lt;/m</span>odal&gt;</span><br></pre></td></tr></table></figure></div><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote><p>如果一个组件中想使用多个slot那么此时就应该使用具名slot。 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"modal"</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="modal"&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="header"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="content"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name="footer"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>温馨提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>你要删除内容吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span>你要删除这条记录吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>开启<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法02</title>
      <link href="/2019/02/10/%E5%89%8D%E7%AB%AF-2019-02-10-vue%E5%9F%BA%E7%A1%8002/"/>
      <url>/2019/02/10/%E5%89%8D%E7%AB%AF-2019-02-10-vue%E5%9F%BA%E7%A1%8002/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><blockquote><p>1.跑马灯点击加速 2. 品牌管理案例（为空不能添加/清空输入框）</p><p>3.关于事件对象的补充说明</p><p>4.修饰符的顺序 也可以只加修饰符</p><p>5 .passive事件修饰符<strong>不拦截默认事件</strong></p></blockquote><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符： </p><ul><li>基本使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>全局按键修饰符</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获“删除”和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure></div><ul><li>支持直接写keyCode</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 缺点：不知道对应的键盘码，可阅读不高</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.113</span>=<span class="string">"fn"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>支持自己配置</li></ul><blockquote><p><code>Vue.config.keyCodes</code></p></blockquote><h2 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/conditional.html" target="_blank" rel="noopener">条件渲染</a></li><li><code>v-if</code>：根据表达式的值的真假条件，销毁或重建元素</li><li><code>v-show</code>：根据表达式之真假值，切换元素的 display CSS 属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>这个元素展示出来了吗？？？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>这个元素，在HTML结构中吗？？？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="样式处理-class和style"><a href="#样式处理-class和style" class="headerlink" title="样式处理-class和style"></a>样式处理-class和style</h2><ul><li>使用方式：<code>v-bind:class=&quot;expression&quot;</code> or <code>:class=&quot;expression&quot;</code></li><li>表达式的类型：字符串、数组、对象（重点）</li><li>语法：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: true &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['active', 'text-danger']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: true &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- style ---</span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, 'font-size': fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- baseStyles 和 overridingStyles 都是对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="提升性能：v-pre"><a href="#提升性能：v-pre" class="headerlink" title="提升性能：v-pre"></a>提升性能：v-pre</h2><ul><li>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="提升性能：v-once"><a href="#提升性能：v-once" class="headerlink" title="提升性能：v-once"></a>提升性能：v-once</h2><ul><li>说明：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="案例：品牌管理"><a href="#案例：品牌管理" class="headerlink" title="案例：品牌管理"></a>案例：品牌管理</h2><h1 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h1><ul><li>作用：文本数据格式化</li><li>两种过滤器：1 全局过滤器 2 局部过滤器</li></ul><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><ul><li>说明：通过全局方式创建的过滤器，在任何一个vue实例中都可以使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'filterName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>示例：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date('YYYY-MM-DD hh:mm:ss') &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.filter(<span class="string">'date'</span>, <span class="function"><span class="keyword">function</span><span class="params">(value, format)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// value 要过滤的字符串内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// format 过滤器的参数</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h2><ul><li>说明：局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    filterName: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="品牌案例-日期格式化"><a href="#品牌案例-日期格式化" class="headerlink" title="品牌案例-日期格式化"></a>品牌案例-日期格式化</h2><h1 id="生命周期与钩子函数"><a href="#生命周期与钩子函数" class="headerlink" title="生命周期与钩子函数"></a>生命周期与钩子函数</h1><h2 id="生命周期介绍"><a href="#生命周期介绍" class="headerlink" title="生命周期介绍"></a>生命周期介绍</h2><ul><li>简单说：<strong>一个实例从开始到最后消亡所经历的各种状态，就是一个组件的生命周期</strong></li></ul><p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数！</p><ul><li>生命周期的钩子函数：框架提供的函数，能够让开发人员的代码，参与到组件的生命周期中。也就是说，通过钩子函数，就可以控制组件的行为</li><li>注意：vue再执行过程中会自动调用<code>生命周期钩子函数</code>，我们只需要提供这些钩子函数即可</li><li>注意：钩子函数的名称都是固定的！！！</li></ul><h2 id="钩子函数-beforeCreate"><a href="#钩子函数-beforeCreate" class="headerlink" title="钩子函数 - beforeCreate()"></a>钩子函数 - beforeCreate()</h2><ul><li>说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</li><li>注意：此时，无法获取 data中的数据、methods中的方法</li></ul><h2 id="钩子函数-created"><a href="#钩子函数-created" class="headerlink" title="钩子函数 - created()"></a>钩子函数 - <strong>created()</strong></h2><ul><li>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据</li><li>使用场景：发送请求获取数据</li></ul><h2 id="钩子函数-beforeMounted"><a href="#钩子函数-beforeMounted" class="headerlink" title="钩子函数 - beforeMounted()"></a>钩子函数 - beforeMounted()</h2><ul><li>说明：在挂载开始之前被调用</li></ul><h2 id="钩子函数-mounted"><a href="#钩子函数-mounted" class="headerlink" title="钩子函数 - mounted()"></a>钩子函数 - <strong>mounted()</strong></h2><ul><li>说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</li></ul><h2 id="钩子函数-beforeUpdated"><a href="#钩子函数-beforeUpdated" class="headerlink" title="钩子函数 - beforeUpdated()"></a>钩子函数 - beforeUpdated()</h2><ul><li>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li></ul><h2 id="钩子函数-updated"><a href="#钩子函数-updated" class="headerlink" title="钩子函数 - updated()"></a>钩子函数 - updated()</h2><ul><li>说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</li></ul><h2 id="钩子函数-beforeDestroy"><a href="#钩子函数-beforeDestroy" class="headerlink" title="钩子函数 - beforeDestroy()"></a>钩子函数 - beforeDestroy()</h2><ul><li>说明：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</li></ul><h2 id="钩子函数-destroyed"><a href="#钩子函数-destroyed" class="headerlink" title="钩子函数 - destroyed()"></a>钩子函数 - destroyed()</h2><ul><li>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p> vue自身没有提供发送ajax请求的工具</p><p> vue1.x的时候vue提供了一个包，vue-resource 专门用于发送ajax请求，但是vue2.x的时候，vue的作者的自己发了一个文章，推荐大家都使用axios库来发送ajax请求。</p></blockquote><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 </p><ul><li>Promise based HTTP client for the browser and node.js<ul><li>以Promise为基础的HTTP客户端，适用于：浏览器和node.js</li><li>封装ajax，用来发送请求，异步获取数据</li></ul></li><li>安装：<code>npm i -S axios</code></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios 推荐</a></li><li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">中文axios</a></li></ul><h1 id="品牌管理案例在线版"><a href="#品牌管理案例在线版" class="headerlink" title="品牌管理案例在线版"></a>品牌管理案例在线版</h1><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="监视数据变化-watch"><a href="#监视数据变化-watch" class="headerlink" title="监视数据变化 - watch"></a>监视数据变化 - watch</h2><ul><li>概述：<code>watch</code>是一个对象，键是需要观察的表达式，值是对应回调函数。</li><li>作用：当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视数据的变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">//newVal: 变化后的数据  </span></span><br><span class="line">    <span class="comment">//oldVal: 变化前的数据</span></span><br><span class="line">    msg: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'监视了msg的数据变化'</span>, newVal, oldVal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>监视对象数据的变化</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视数据的变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// watch的完整写法</span></span><br><span class="line">    car: &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// handler会在数据发生改变的时候触发</span></span><br><span class="line">            <span class="built_in">console</span>.log(newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>,  <span class="comment">//是否深度监听</span></span><br><span class="line">        immediate: <span class="literal">true</span> <span class="comment">// 在监视启动的时候，会立即启动这个函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="计算属性-1"><a href="#计算属性-1" class="headerlink" title="计算属性"></a>计算属性</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 说明：计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值</span><br><span class="line">- 注意：Mustache语法（&#123;&#123;&#125;&#125;）中不要放入太多的逻辑，否则会让模板过重、难以理解和维护</span><br><span class="line">- 注意：<span class="string">`computed`</span>中的属性不能与<span class="string">`data`</span>中的属性同名</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstname: <span class="string">'jack'</span>,</span><br><span class="line">    lastname: <span class="string">'rose'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullname() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">'.'</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>当计算属性依赖的属性值发生改变的时候，计算属性对应的函数就会重新计算，并且把值缓存起来，直到下一次重新计算，因此计算属性的效率是非常高的。</p><h2 id="品牌管理案例-筛选功能"><a href="#品牌管理案例-筛选功能" class="headerlink" title="品牌管理案例-筛选功能"></a>品牌管理案例-筛选功能</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法01</title>
      <link href="/2019/02/05/%E5%89%8D%E7%AB%AF-2019-02-05-vue%E5%9F%BA%E7%A1%8001/"/>
      <url>/2019/02/05/%E5%89%8D%E7%AB%AF-2019-02-05-vue%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h1><p><a href="/imgs/VUE-logo.png" data-fancybox="group" data-caption="Vue" class="fancybox"><img alt="Vue" title="Vue" data-src="/imgs/VUE-logo.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><ul><li>Vue基础知识</li><li>Vue全家桶（vue/vue-router/vuex/axios）</li><li>组件化开发</li><li>webpack - 前端模块化打包构建工具</li><li>ES6</li><li>Vue项目</li></ul><h2 id="vue介绍"><a href="#vue介绍" class="headerlink" title="vue介绍"></a>vue介绍</h2><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue 中文网</a></li><li><a href="https://cn.vuejs.org/v2/guide/index.html#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">Vue.js 是什么</a></li><li>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。 </li><li>建议：<strong>通读一遍Vue官网教程中的基础内容</strong></li></ul><h2 id="渐进式的概念-尤雨溪"><a href="#渐进式的概念-尤雨溪" class="headerlink" title="渐进式的概念(尤雨溪)"></a>渐进式的概念(尤雨溪)</h2><blockquote><p>渐进式——在原有项目中，可以先尝试引入一两个组件，可以当插件用….甚至也可以用它来开发整个项目！</p></blockquote><p><a href="http://www.bslxx.com/a/vue/2017/1026/1082.html" target="_blank" rel="noopener">vue是一个渐进式的框架，我是这么理解的</a></p><p>使用vue，不用一来就使用Vue所有的全家桶， 从最初的只因多看你一眼而用了前端js库，一直到最后的大型项目决方案。 </p><p><a href="imgs/jjs.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="imgs/jjs.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="库和框架的概念"><a href="#库和框架的概念" class="headerlink" title="库和框架的概念"></a>库和框架的概念</h2><p><a href="/imgs/%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93.png" data-fancybox="group" data-caption="框架和库的区别" class="fancybox"><img alt="框架和库的区别" title="框架和库的区别" data-src="/imgs/%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93.png" src="/img/loading.gif" class="lazyload"></a></p><ul><li><a href="https://zhuanlan.zhihu.com/p/26078359?group_id=830801800406917120" target="_blank" rel="noopener">我们所说的前端框架与库的区别？</a></li></ul><h3 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h3><blockquote><p>库，本质上是一些函数的集合。每次调用函数，实现一个特定的功能</p></blockquote><ul><li>代表：jQuery</li><li>使用库的时候，把库当成工具使用，需要自己控制代码的执行逻辑。</li></ul><h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><blockquote><p>框架，是一套完整的解决方案，使用框架的时候，需要把你的代码放到框架合适的地方，框架会在合适的时机调用你的代码</p></blockquote><ul><li>框架规定了自己的编程方式，是一套完整的解决方案</li><li>使用框架的时候，由框架控制一切，我们只需要按照规则写代码</li></ul><h3 id="库和框架的区别"><a href="#库和框架的区别" class="headerlink" title="库和框架的区别"></a>库和框架的区别</h3><ul><li>使用库的时候，很自由，只要调用库提供的各种各样的方法就行，也可以不用其他的一些方法</li><li>使用框架的时候，需要按照框架的规则写代码，限制会非常多，但同时框架的功能也很强大，可以极大的提升开发的效率。</li></ul><p><a href="imgs/ku.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="imgs/ku.jpg" src="/img/loading.gif" class="lazyload"></a></p><h2 id="MVVM的概念"><a href="#MVVM的概念" class="headerlink" title="MVVM的概念"></a>MVVM的概念</h2><p>参考资料：<a href="https://www.cnblogs.com/indream/p/3602348.html" target="_blank" rel="noopener">从Script到Code Blocks、Code Behind到MVC、MVP、MVVM</a></p><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul><li>MVC是一种软件架构模式，也有人叫做设计模式</li><li>M: Model 数据模型（专门用来操作数据，数据的CRUD）</li><li>V：View 视图（对于前端来说，就是页面）</li><li>C：Controller 控制器（是视图和数据模型沟通的桥梁，用于处理业务逻辑）</li></ul><p><a href="imgs/mvc.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="imgs/mvc.jpg" src="/img/loading.gif" class="lazyload"></a></p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM，一种更好的UI模式解决方案</p><ul><li>M：model数据模型</li><li>V：view视图</li><li>VM：ViewModel 视图模型</li></ul><h3 id="MVC-vs-MVVM"><a href="#MVC-vs-MVVM" class="headerlink" title="MVC vs MVVM"></a>MVC vs MVVM</h3><ul><li>MVC模式，将应用程序划分为三大部分，实现了职责分离，需要自己实现controller的代码，需要操作DOM</li><li>MVVM通过<code>数据双向绑定</code>让数据自动地双向同步<ul><li>V（修改视图） -&gt; M（数据自动同步）</li><li>M（修改数据） -&gt; V（视图自动徒步）</li></ul></li></ul><p><a href="imgs/MVVM.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="imgs/MVVM.png" src="/img/loading.gif" class="lazyload"></a></p><h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><p>虽然没有完全遵循 MVVM 模型，Vue 的设计无疑受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的简称) 这个变量名表示 Vue 实例</p><p>注意：</p><p><strong>1. 在vue中，不推荐直接手动操作DOM！！！</strong> </p><p><strong>2. 在vue中，通过数据驱动视图，不要在想着怎么操作DOM，而是想着如何操作数据！！</strong></p><h1 id="vue初体验"><a href="#vue初体验" class="headerlink" title="vue初体验"></a>vue初体验</h1><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><ul><li>安装：<code>npm install vue</code></li><li>注意：开发期间使用未压缩版vue.js！！！重说三</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.可以通过&#123;&#123;&#125;&#125;显示vue中的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. 引入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 创建vue实例，需要指定el和data属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 指定vue监管的视图区域,只要id为app的div内部才会受vue的管理</span></span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 提供了vue中使用的数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'hello vue'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>问题1：把<code></code>写到<code>div#app</code>外能生效么？</p></blockquote><blockquote><p>问题2：el能否写成ele, data能否写成datas? 框架的限制很多，但是习惯就好了！</p></blockquote><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">插值表达式：`&#123;&#123;&#125;&#125;`，也叫Mustache语法，小胡子语法，因为长得像胡子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 解释：使用`&#123;&#123;&#125;&#125;`（插值表达式）从`data`中获取数据，并展示在模板中</span><br><span class="line">- 说明：`&#123;&#123;&#125;&#125;`中只能出现JavaScript表达式</span><br><span class="line">- 说明：数据对象的属性值发生了改变，插值处的内容都会更新</span><br><span class="line"></span><br><span class="line">&gt; 1 不能使用不存在的数据 2 不能使用js语句</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; msg &#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; isOk ? 'yes': 'no' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1 + 2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ！！！错误示范！！！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; if()&#123;&#125; &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; err &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><ul><li>解释：指令 (Directives) 是带有 <code>v-</code> 前缀的特殊属性，可以在html标签中使用，可以看成特殊的html属性</li><li>作用：指令提供了一些特殊的功能，当指向绑定到标签上时，可以给标签增加一些特殊的行为</li></ul><h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><ul><li>描述：插值表达式不能用在html的属性上，如果想要动态的设置html元素的属性，需要使用v-bind指令</li><li>作用：动态的设置html的属性</li><li>语法：<code>v-bind:title=&quot;msg&quot;</code></li><li>简写：<code>:title=&quot;msg&quot;</code></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><ul><li>解释：更新元素的 <code>textContent</code>。如果要更新部分的 <code>textContent</code> ，需要使用 <code></code> 插值。 </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><ul><li>解释：更新DOM对象的 innerHTML,html标签会生效</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener">XSS 攻击</a>。只在可信内容上使用 <code>v-html</code>，</strong>永不<strong>用在用户提交的内容上。</strong> </p><h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li><li>思考：如何在JS代码中获取到文本框的值？？？</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>双向数据绑定：将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响<ul><li>数据的改变会引起DOM的改变</li><li>DOM的改变也会引起数据的变化</li></ul></li><li>原理：数据劫持，<code>Object.defineProperty</code>中的<code>get</code>和<code>set</code>方法<ul><li><code>getter</code>和<code>setter</code>：访问器</li><li>作用：指定<code>读取或设置</code>对象属性值的时候，执行的操作</li></ul></li><li>注意：<code>Object.defineProperty</code>方法是ES5中提供的，IE8浏览器不支持这个方法。因此，Vue支持IE8及其以下版本浏览器</li><li><a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">Vue - 深入响应式原理</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN - Object.defineProperty()</a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  语法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'msg'</span>, &#123;</span><br><span class="line">  <span class="comment">// 设置 obj.msg 执行的操作</span></span><br><span class="line">  <span class="keyword">set</span>: function () &#123;&#125;,</span><br><span class="line">  <span class="comment">// 读取 obj.msg 执行的操作</span></span><br><span class="line">  <span class="keyword">get</span>: function () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="Vue双向绑定的极简实现"><a href="#Vue双向绑定的极简实现" class="headerlink" title="Vue双向绑定的极简实现"></a>Vue双向绑定的极简实现</h3><ul><li><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">剖析Vue原理&amp;实现双向绑定MVVM</a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"msgBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> msgBox = <span class="built_in">document</span>.getElementById(<span class="string">'msgBox'</span>)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 给对象obj添加msg属性，并设置setter访问器</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'msg'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 设置 obj.msg 执行的操作</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(curVal)</span> </span>&#123;</span></span><br><span class="line">    txt.value = curVal</span><br><span class="line">    msgBox.innerText = curVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听文本框的改变</span></span></span><br><span class="line"><span class="actionscript">txt.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  obj.msg = <span class="keyword">this</span>.value</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><ul><li>作用：绑定事件</li><li>语法：<code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code></li><li>简写：<code>@click=&quot;say&quot;</code></li><li>说明：绑定的事件从<code>methods</code>中获取</li><li>案例：跑马灯</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><code>.stop</code>       阻止冒泡，调用 event.stopPropagation()</li><li><code>.prevent</code>    阻止默认行为，调用 event.preventDefault()</li><li><code>.capture</code>    添加事件侦听器时使用事件<code>捕获</code>模式</li><li><code>.self</code>       只当事件在该元素本身（比如不是子元素）触发时，才会触发事件</li><li><code>.once</code>       事件只触发一次</li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获“删除”和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure></div><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>作用：基于源数据多次渲染元素或模板块</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- item 为当前项，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in obj"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in 10"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="key属性"><a href="#key属性" class="headerlink" title="key属性"></a>key属性</h3><ul><li>推荐：使用 <code>v-for</code> 的时候提供 <code>key</code> 属性，能够提升列表渲染的性能</li><li>说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li><a href="https://cn.vuejs.org/v2/guide/list.html#key" target="_blank" rel="noopener">vue key</a></li><li><a href="https://www.zhihu.com/question/61064119/answer/183717717" target="_blank" rel="noopener">vue key属性的说明</a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="案例：品牌管理"><a href="#案例：品牌管理" class="headerlink" title="案例：品牌管理"></a>案例：品牌管理</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端ajax上传记录</title>
      <link href="/2019/01/02/2019-1-2-ajax%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/02/2019-1-2-ajax%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="ajax上传文件"><a href="#ajax上传文件" class="headerlink" title="ajax上传文件"></a>ajax上传文件</h3><blockquote><p>需要用到两个对象</p><ol><li><strong>FormData</strong></li><li><strong>XMLHttpRequest</strong></li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"UpladFile()"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">UploadFile=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件对象</span></span><br><span class="line">    <span class="keyword">let</span> fileObj = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 获取上传文件的后台地址</span></span><br><span class="line">    <span class="keyword">let</span> fileUrl = <span class="string">'./file/save'</span>;</span><br><span class="line">    <span class="comment">// FormData 对象</span></span><br><span class="line">    <span class="keyword">let</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="comment">// 增加表单数据</span></span><br><span class="line">    FD.append(<span class="string">'author'</span>,<span class="string">'zag'</span>);</span><br><span class="line">    FD.append(<span class="string">'file'</span>,filObj);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'post'</span>,fileUrl,<span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="string">'上传完成'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send(FD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="增加进度条-进行上传进度显示"><a href="#增加进度条-进行上传进度显示" class="headerlink" title="增加进度条 进行上传进度显示"></a>增加进度条 进行上传进度显示</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置一个html5的进度条 实时改变它的value值就可以实现不断变化的进度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">"progressBar"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span> <span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"progressText"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只需要在js的xhr对象上增加一个事件侦听器 就可以检测当前上传进度参数  通过赋值达到进度条的实时变化</span></span><br><span class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>,(e)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> progressBar = <span class="built_in">document</span>.querySelector(<span class="string">'#progressBar'</span>);</span><br><span class="line">    <span class="comment">// e事件对象中有两个参数 1 loaded  2 total</span></span><br><span class="line">    <span class="keyword">if</span>(e.lengthComputable)&#123;</span><br><span class="line">        progressBar.max = e.total</span><br><span class="line">        progressBar.value = e.loaded</span><br><span class="line">        progressText.innerHTML = (e.loaded/e.total * <span class="number">100</span>) + <span class="string">'%'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></div><h4 id="拖拽上传的简单逻辑实现"><a href="#拖拽上传的简单逻辑实现" class="headerlink" title="拖拽上传的简单逻辑实现"></a>拖拽上传的简单逻辑实现</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标区域target 的ondrop事件触发 之后 获取事件对象</span></span><br><span class="line"><span class="keyword">let</span> target = <span class="built_in">document</span>.querySelector(<span class="string">'.tip'</span>);</span><br><span class="line">target.ondrop = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">// 获取文件对象数组</span></span><br><span class="line">    <span class="keyword">let</span> fs = e.dataTransfer.files;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 读取为二进制数据</span></span><br><span class="line">            reader.readAsArrayBuffer(file);</span><br><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> binary = <span class="keyword">this</span>.result;</span><br><span class="line">                upload(binary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> upload = <span class="function">(<span class="params">binary</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">   xhr.open(<span class="string">"POST"</span>, <span class="string">"http://xxxx/opload"</span>);</span><br><span class="line">   xhr.overrideMimeType(<span class="string">"application/octet-stream"</span>);</span><br><span class="line">   <span class="comment">//直接发送二进制数据</span></span><br><span class="line">   <span class="keyword">if</span>(xhr.sendAsBinary)&#123;</span><br><span class="line">       xhr.sendAsBinary(binary);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       xhr.send(binary);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听变化</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status===<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 响应成功       </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="粘贴逻辑"><a href="#粘贴逻辑" class="headerlink" title="粘贴逻辑"></a>粘贴逻辑</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">'paste'</span>,<span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = (event.clipboardData)</span><br><span class="line">.... &#125;);</span><br></pre></td></tr></table></figure></div><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ol><li><p>大文件的上传</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采用blob.slice 分片 思想</span><br><span class="line">所有切片挨个发请求 然后merge</span><br></pre></td></tr></table></figure></div></li><li><p>断点续传 + 秒传</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">md5计算，缓存思想 ⽂文件⽤用md5计算⼀一个指纹，上传之</span><br><span class="line">前，先问后端，这个⽂文件的hash在不不在，在的话就不不⽤用</span><br><span class="line">传了了，就是所谓的断点续传，如果整个⽂文件都存在了了 就</span><br><span class="line">是秒传</span><br></pre></td></tr></table></figure></div></li><li><p>计算<strong>hash</strong>优化</p><ol><li><p><strong>web-worker</strong></p><p>⼤大⽂文件的md5太慢了了,启⽤用webworker计算</p></li><li><p><strong>time-slice</strong></p><p>react fiber架构学习，利利⽤用浏览器器空闲时间<br>requestIdleCallback</p></li></ol></li><li><p>抽样<strong>hash</strong></p><p>布隆隆过滤器器思想</p></li><li><p>请求并发数控制和重试</p></li><li><p>慢启动策略略</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TCP拥塞控制的问题 其实就是根据当前⽹网络情况，动态 调整切⽚片的⼤大⼩小</span><br><span class="line">1. chunk中带上size值，不不过进度条数量量不不确定了了， 修改createFileChunk， 请求加上时间统计)</span><br><span class="line">2. ⽐比如我们理理想是30秒传递⼀一个</span><br><span class="line">3. 初始⼤大⼩小定为1M，如果上传花了了10秒，那下⼀一个区</span><br><span class="line">块⼤大⼩小变成3M</span><br><span class="line">4. 如果上传花了了60秒，那下⼀一个区块⼤大⼩小变成500KB</span><br><span class="line">    web全栈架构师</span><br><span class="line">以此类推</span><br><span class="line">5. 并发+慢启动的逻辑有些复杂，我⾃自⼰己还没绕明⽩白，</span><br><span class="line">囧所以先⼀一次只传⼀一个切⽚片，来演示这个逻辑，新建 ⼀一个 handleUpload1 函数</span><br></pre></td></tr></table></figure></div></li><li><p>碎⽚片清理理</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包 装饰器</title>
      <link href="/2018/05/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-5-15-%E9%97%AD%E5%8C%85-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/05/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-5-15-%E9%97%AD%E5%8C%85-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>函数名只是函数代码空间的引用，当函数名赋值给一个对象的时候，就是引用传递</strong></p><p><strong>定义</strong>:在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包</p><p><strong>内部函数和使用的外部函数提供的变量构成的整体称为闭包</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line">line1 = line_conf(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">line2 - line_conf(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(line1(<span class="number">5</span>))</span><br><span class="line">print(line2(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div><p><strong>修改外部函数中的变量</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">c1 = outer(<span class="number">5</span>)</span><br><span class="line">print(c1())</span><br><span class="line">print(c1())</span><br></pre></td></tr></table></figure></div><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p><strong>案例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公司基础平台部门要在已有的功能基础上加上一些验证功能</span></span><br><span class="line"><span class="comment"># 秉着对修改关闭对扩展开发的软件开发原则 我们使用装饰器进行实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"><span class="meta">@w2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"><span class="meta">@w3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"><span class="meta">@w4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">不改动原有函数功能的前提下 加入装饰器修饰符  定义装饰器函数</span></span><br><span class="line"><span class="string">通过传入基础功能（在验证功能之后执行) 在调用内部闭包本身</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'%s called at %s'</span> %(fun.__name__, ctime()))</span><br><span class="line">        fun()</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'I am foo'</span>)</span><br><span class="line">   </span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="comment"># 加入函数执行时间统计功能</span></span><br></pre></td></tr></table></figure></div><p><strong>被装饰得函数有参数</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(a,b)</span>:</span></span><br><span class="line">        print(<span class="string">'%s called at %s'</span> %(fun.__name__, ctime()))</span><br><span class="line">        print(a,b)</span><br><span class="line">        fun(a,b)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line">   </span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">6</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure></div><p><strong>被装饰的函数有不定长参数</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'%s called at %s'</span>%(fun.__name__, ctime()))</span><br><span class="line">        fun(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,name=<span class="string">"lisi"</span>,age=<span class="number">22</span>)</span><br></pre></td></tr></table></figure></div><p><strong>装饰器中的return</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'%s called at %s'</span>%(fun.__name__, ctime()))</span><br><span class="line">        <span class="keyword">return</span> fun()</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'I am foo'</span>)</span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'---hahah'</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">print(getInfo())</span><br></pre></td></tr></table></figure></div><p><strong>在原有装饰器基础上 增加外部变量</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun_arg</span><span class="params">(pre=<span class="string">'hello'</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">timefun</span><span class="params">(fun)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">'%s called at %s'</span>%(fun.__name__, ctime()))</span><br><span class="line">            <span class="keyword">return</span> fun()</span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg('itcast')   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'I am foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg('python')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'too'</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 调用timefun_arg函数 传入"itcast"参数 得到timefun返回值</span></span><br><span class="line"><span class="string">2 执行timefun函数 传入foo函数 将返回值wrapped函数返回</span></span><br><span class="line"><span class="string">3 将返回的wrapped函数赋值给foo  </span></span><br><span class="line"><span class="string">4 调用foo函数 相当于执行wrapped闭包 </span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><p><strong>类装饰器</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python中一般callable对象都是函数，装饰器函数 必须接受一个callable对象作为参数 然后返回一个callable对象</span></span><br><span class="line">那么我们可以将某个对象重写__call__()方法 那么这个对象就是callable的</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'call me'</span>)</span><br><span class="line">t = Test()</span><br><span class="line">t()  <span class="comment"># call me</span></span><br></pre></td></tr></table></figure></div><p><strong>类装饰器的实现</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        print(<span class="string">'----初始化---'</span>)</span><br><span class="line">        print(<span class="string">'func name is %s'</span> % func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----装饰器中的功能'</span>)</span><br><span class="line">        self.__func()</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-----test---'</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库高级用法</title>
      <link href="/2018/05/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-5-3-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/2018/05/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-5-3-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="数据库的高级用法"><a href="#数据库的高级用法" class="headerlink" title="数据库的高级用法"></a>数据库的高级用法</h3><h4 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h4><blockquote><p>对于复杂的查询，往往是有多个数据表进行关联查询而得到，而这种语句往往比较复杂，也可能非常频繁的使用</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select goods.name,goods_cates.name,goods_brands.name</span><br><span class="line">from goods</span><br><span class="line">join goods_cates on goods.cate_id &#x3D; goods_cates.id</span><br><span class="line">join goods_brands on goods.brand_id &#x3D; goods_brands.id;</span><br></pre></td></tr></table></figure></div><blockquote><p>简化复杂的查询操作 使用视图 封装为虚拟表</p><p>视图只是一个虚表 不存储任何基本表的表数据 当用户使用视图 视图会从基本表中取出</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- create view 视图名称 as select语句</span><br><span class="line">create view v_goods_info</span><br><span class="line">as </span><br><span class="line">select goods.name,goods_cates.name,goods_brands.name</span><br><span class="line">from goods</span><br><span class="line">join goods_cates on goods.cate_id &#x3D; goods_cates.id</span><br><span class="line">join goods_brands on goods.brand_id &#x3D; goods_brands.id;</span><br><span class="line"></span><br><span class="line">-- 查看视图</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">drop view 视图名称</span><br><span class="line">drop view v_goods_info;</span><br></pre></td></tr></table></figure></div><h4 id="2-事务"><a href="#2-事务" class="headerlink" title="2.事务"></a>2.事务</h4><blockquote><p><strong>事务Transaction，是指作为一个基本工作单元执行的一系列sql语句的操作 要么完全的执行，要么完全的不执行</strong></p></blockquote><ul><li><p>原子性</p><p>一个事务是一个不可分割的最小工作单元，不可能只执行其中的一部分操作</p></li><li><p>一致性</p><p>数据库总是从一个一致性状态转换为另一个一致性状态</p></li><li><p>隔离性</p><p>通常来说，一个事务所做的修改在最终提交之前对其他事物是不可见的</p></li><li><p>持久性</p><p>一旦事务提交，则其所做的修改会永久保存到数据库中</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 开启事务</span><br><span class="line">begin;</span><br><span class="line">-- 或者</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">-- 回滚事务</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line"># 案例：</span><br><span class="line"># 查看商品分类信息</span><br><span class="line">select * from goods_cates;</span><br><span class="line"># 开启事务 增加数据</span><br><span class="line">begin;</span><br><span class="line">insert into goods_cates(name) values(&#39;小霸王游戏机&#39;);</span><br><span class="line"># 提交事务  或者回滚信息</span><br><span class="line">commit;  &#x2F;   rollback;</span><br><span class="line"># 查询新增数据</span><br><span class="line">select * from goods_cates;</span><br></pre></td></tr></table></figure></div><h4 id="3-索引"><a href="#3-索引" class="headerlink" title="3.索引"></a>3.索引</h4><blockquote><p>当数据库数据量很大时 修改较少的情况下，为了提高查询效率，可以给数据建立索引</p></blockquote><p><strong>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分).他们记录着数据的位置信息</strong></p><p>通过特定的查找算法（比如二叉三叉树）来提供查询效率</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查看表中的已有索引</span><br><span class="line">show index from 表名；</span><br><span class="line"></span><br><span class="line">-- 创建索引</span><br><span class="line">create index 索引名称 on 表名（字段名称(长度))</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index 索引名称 on 表名</span><br></pre></td></tr></table></figure></div><p><strong>案例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建测试数据表</span></span><br><span class="line">create table test_index(title varchar(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 导入十万条数据</span></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> connect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建Connection连接</span></span><br><span class="line">    conn = connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,database=<span class="string">'jing_dong'</span>,user=<span class="string">'root'</span>,password=<span class="string">'mysql'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 获得Cursor对象</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 插入10万次数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        cursor.execute(<span class="string">"insert into test_index values('ha-%d')"</span> % i)</span><br><span class="line">    <span class="comment"># 提交数据</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#========运行以上文件=============</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启运行时间检测</span></span><br><span class="line">set profiling =<span class="number">1</span>;</span><br><span class="line"><span class="comment"># 查找第1万条数据ha--99999</span></span><br><span class="line">select * <span class="keyword">from</span> test_index where title = <span class="string">'ha-99999'</span>;</span><br><span class="line"><span class="comment"># 为表title_index的title列创建索引</span></span><br><span class="line">create index title_index on test_index(title(<span class="number">10</span>));</span><br><span class="line"><span class="comment"># 执行查询语句</span></span><br><span class="line">select * <span class="keyword">from</span> test_index where title=<span class="string">"ha-99999"</span>;</span><br><span class="line"><span class="comment"># 再次查看执行的时间</span></span><br><span class="line">show profiles;</span><br></pre></td></tr></table></figure></div><p><a href="/img/images/pic/Snipaste_2018-09-21_15-55-47.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_15-55-47" class="fancybox"><img alt="Snipaste_2018-09-21_15-55-47" title="Snipaste_2018-09-21_15-55-47" data-src="/img/images/pic/Snipaste_2018-09-21_15-55-47.png" src="/img/loading.gif" class="lazyload"></a></p><p>可以看出  建立索引之后的查询速率得到很大的提升，但创建索引的过程花费不少时间，因此我们可以得到结论：对于频繁读取并且不经常更改的数据，可以使用创建索引来提高查询效率</p><h4 id="4-用户管理"><a href="#4-用户管理" class="headerlink" title="4.用户管理"></a>4.用户管理</h4><blockquote><ol><li>查看所有的用户</li><li>修改密码</li><li>删除用户</li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  所有的用户以及权限信息存储在mysql数据库的user表中</span></span><br><span class="line">use mysql</span><br><span class="line"><span class="comment"># 查看user表的结果</span></span><br><span class="line">desc user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Host表示允许访问的主机   User 用户名  authentication_string 密码 为加密后的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的用户</span></span><br><span class="line">select host,user,authentication_string <span class="keyword">from</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建账户 授权</span></span><br><span class="line"><span class="comment"># - 需要使用实例级账户登录后操作，以root为例</span></span><br><span class="line"><span class="comment"># - 常用权限主要包括：create、alter、drop、insert、update、delete、select</span></span><br><span class="line"><span class="comment"># - 如果分配所有权限，可以使用all privileges</span></span><br><span class="line"></span><br><span class="line">grant 权限列表 on 数据库 to <span class="string">'用户名'</span>@<span class="string">'访问主机'</span> identified by <span class="string">'密码'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 主机地址：localhost / 具体ip / % 任意主机</span></span><br></pre></td></tr></table></figure></div><p><strong>案例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用root登录</span></span><br><span class="line">mysql -uroot -pmysql</span><br><span class="line"><span class="comment"># 添加数据库账户 并设置权限</span></span><br><span class="line">grant select on jing_dong.* to <span class="string">'zhangsan'</span>@<span class="string">'%'</span> identified by <span class="string">'123'</span>;</span><br><span class="line"><span class="comment"># 显示创建的账户信息</span></span><br><span class="line">show grants <span class="keyword">for</span> zhangsan@%;</span><br><span class="line"><span class="comment"># 退出root账户</span></span><br><span class="line">quit</span><br><span class="line"><span class="comment"># 使用章三账户登录 进行查看和操作</span></span><br><span class="line">mysql -uzhangsan -p123</span><br></pre></td></tr></table></figure></div><p><strong>修改权限</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant 权限名称 on 数据库 to 账户@主机 with grant option；</span><br></pre></td></tr></table></figure></div><p><strong>修改密码</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用root登录  修改数据库中的user表</span><br><span class="line"># 1 使用password()函数进行密码加密</span><br><span class="line">update user set authenication_string&#x3D;password(&#39;12345&#39;) where user&#x3D;&quot;zhangsan&quot;;</span><br><span class="line">#  2 注册修改完成后需要刷新权限</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure></div><p><strong>删除账户</strong></p><p>使用root登录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#39;zhangsan&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除章三的用户信息</span><br><span class="line">delete from user where user&#x3D;&quot;zhangsan&quot;;</span><br><span class="line"># 操作结束之后需要刷新权限</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure></div><blockquote><p>如果root密码忘记怎么办？</p><p>参考 <a href="http://blog.csdn.net/lxpbs8851/article/details/10895085" target="_blank" rel="noopener">http://blog.csdn.net/lxpbs8851/article/details/10895085</a></p></blockquote><hr><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h4><ul><li>第一范式<strong>1NF</strong>：强调列的原子性</li><li>第二范式<strong>2NF</strong>：表中必须有一个主键，非主键字段必须完全依赖于主键，而不能部分依赖于主键</li><li>第三范式<strong>3NF</strong>：非主键必须直接依赖于主键，不能存在传递依赖</li></ul><h4 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h4><p>E-R图即实体-联系图(Entity Relationship Diagram)，是指提供了表示实体型、属性和联系的方法，用来描述现实世界的概念模型。由美籍华裔计算机科学家陈品山(Peter Chen)发明。</p><p><strong>E-R模型设计图</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-21_16-37-19.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_16-37-19" class="fancybox"><img alt="Snipaste_2018-09-21_16-37-19" title="Snipaste_2018-09-21_16-37-19" data-src="/img/images/pic/Snipaste_2018-09-21_16-37-19.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>一对一关系</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-21_16-37-56.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_16-37-56" class="fancybox"><img alt="Snipaste_2018-09-21_16-37-56" title="Snipaste_2018-09-21_16-37-56" data-src="/img/images/pic/Snipaste_2018-09-21_16-37-56.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>一对多</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-21_16-38-12.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_16-38-12" class="fancybox"><img alt="Snipaste_2018-09-21_16-38-12" title="Snipaste_2018-09-21_16-38-12" data-src="/img/images/pic/Snipaste_2018-09-21_16-38-12.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>多对多</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-21_16-38-26.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_16-38-26" class="fancybox"><img alt="Snipaste_2018-09-21_16-38-26" title="Snipaste_2018-09-21_16-38-26" data-src="/img/images/pic/Snipaste_2018-09-21_16-38-26.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="https://edu.aqniu.com/course/83/tasks#modal" target="_blank" rel="noopener">https://edu.aqniu.com/course/83/tasks#modal</a></p><p>#####总结：</p><ul><li>范式就是设计数据库的通用规范。<ul><li>1NF强调字段是最小单元，不可再分</li><li>2NF强调在1NF基础上必须要有主键和非主键字段必须完全依赖于主键，也就是说 不能部分依赖</li><li>3MF强调在2NF基础上 非主键字段必须直接依赖于主键，也就是说不能传递依赖(间接依赖)。</li></ul></li><li>E-R图由 实体、属性、实体之间的联系构成，主要用来描述 数据库中表结构。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表联查以及数据库编程</title>
      <link href="/2018/04/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-29-%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/04/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-29-%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="MySql编程"><a href="#MySql编程" class="headerlink" title="MySql编程"></a>MySql编程</h3><h4 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1.准备数据"></a>1.准备数据</h4><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 创建 &quot;京东&quot;数据库</span><br><span class="line">create database jing_dong charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- 使用&quot;京东&quot;数据库</span><br><span class="line">use jing_dong;</span><br><span class="line"></span><br><span class="line">-- 创建一个商品goods数据表</span><br><span class="line">create table goods (</span><br><span class="line">id int unsigned primary key auto_increment not null,</span><br><span class="line">    name varchar(150) not null,</span><br><span class="line">    cate_name varchar(40) not null,</span><br><span class="line">    brand_name varchar(40) not null,</span><br><span class="line">    price decimal(10,3) not null default 0,</span><br><span class="line">    is_show bit not null default 1,</span><br><span class="line">    is_saleoff bit not null default 0</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-- 创建 &quot;京东&quot; 数据库</span><br><span class="line">create database jing_dong charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- 使用 &quot;京东&quot; 数据库</span><br><span class="line">use jing_dong;</span><br><span class="line"></span><br><span class="line">-- 创建一个商品goods数据表</span><br><span class="line">create table goods(</span><br><span class="line">    id int unsigned primary key auto_increment not null,</span><br><span class="line">    name varchar(150) not null,</span><br><span class="line">    cate_name varchar(40) not null,</span><br><span class="line">    brand_name varchar(40) not null,</span><br><span class="line">    price decimal(10,3) not null default 0,</span><br><span class="line">    is_show bit not null default 1,</span><br><span class="line">    is_saleoff bit not null default 0</span><br><span class="line">);</span><br><span class="line">1.3 插入数据</span><br><span class="line"></span><br><span class="line">-- 向goods表中插入数据</span><br><span class="line"></span><br><span class="line">insert into goods values(0,&#39;r510vc 15.6英寸笔记本&#39;,&#39;笔记本&#39;,&#39;华硕&#39;,&#39;3399&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;y400n 14.0英寸笔记本电脑&#39;,&#39;笔记本&#39;,&#39;联想&#39;,&#39;4999&#39;,default,default);</span><br><span class="line">insert into goods values(0,&#39;g150th 15.6英寸游戏本&#39;,&#39;游戏本&#39;,&#39;雷神&#39;,&#39;8499&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;x550cc 15.6英寸笔记本&#39;,&#39;笔记本&#39;,&#39;华硕&#39;,&#39;2799&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;x240 超极本&#39;,&#39;超级本&#39;,&#39;联想&#39;,&#39;4880&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;u330p 13.3英寸超极本&#39;,&#39;超级本&#39;,&#39;联想&#39;,&#39;4299&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;svp13226scb 触控超极本&#39;,&#39;超级本&#39;,&#39;索尼&#39;,&#39;7999&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;ipad mini 7.9英寸平板电脑&#39;,&#39;平板电脑&#39;,&#39;苹果&#39;,&#39;1998&#39;,default,default);</span><br><span class="line">insert into goods values(0,&#39;ipad air 9.7英寸平板电脑&#39;,&#39;平板电脑&#39;,&#39;苹果&#39;,&#39;3388&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;ipad mini 配备 retina 显示屏&#39;,&#39;平板电脑&#39;,&#39;苹果&#39;,&#39;2788&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;ideacentre c340 20英寸一体电脑 &#39;,&#39;台式机&#39;,&#39;联想&#39;,&#39;3499&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;vostro 3800-r1206 台式电脑&#39;,&#39;台式机&#39;,&#39;戴尔&#39;,&#39;2899&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;imac me086ch&#x2F;a 21.5英寸一体电脑&#39;,&#39;台式机&#39;,&#39;苹果&#39;,&#39;9188&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;at7-7414lp 台式电脑 linux ）&#39;,&#39;台式机&#39;,&#39;宏碁&#39;,&#39;3699&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;z220sff f4f06pa工作站&#39;,&#39;服务器&#x2F;工作站&#39;,&#39;惠普&#39;,&#39;4288&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;poweredge ii服务器&#39;,&#39;服务器&#x2F;工作站&#39;,&#39;戴尔&#39;,&#39;5388&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;mac pro专业级台式电脑&#39;,&#39;服务器&#x2F;工作站&#39;,&#39;苹果&#39;,&#39;28888&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;hmz-t3w 头戴显示设备&#39;,&#39;笔记本配件&#39;,&#39;索尼&#39;,&#39;6999&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;商务双肩背包&#39;,&#39;笔记本配件&#39;,&#39;索尼&#39;,&#39;99&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;x3250 m4机架式服务器&#39;,&#39;服务器&#x2F;工作站&#39;,&#39;ibm&#39;,&#39;6888&#39;,default,default); </span><br><span class="line">insert into goods values(0,&#39;商务双肩背包&#39;,&#39;笔记本配件&#39;,&#39;索尼&#39;,&#39;99&#39;,default,default);</span><br></pre></td></tr></table></figure></div><h4 id="2-SQL语句强化"><a href="#2-SQL语句强化" class="headerlink" title="2.SQL语句强化"></a>2.SQL语句强化</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 查询类型cate_name为 &#39;超极本&#39; 的商品名称、价格</span><br><span class="line">select name,price from goods where cate_name &#x3D; &quot;超级本&quot;;</span><br><span class="line"></span><br><span class="line">-- 显示商品的种类</span><br><span class="line">select cate_name from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 求所有电脑产品的平均价格,并且保留两位小数</span><br><span class="line">select round(avg(price),2) as &quot;平均价格&quot; from goods;</span><br><span class="line"></span><br><span class="line">-- 显示每种商品的平均价格</span><br><span class="line">select cate_name,round(avg(price),2) from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 查询每种类型的商品中 最贵、最便宜、平均价、数量</span><br><span class="line">select cate_name,max(price),min(price),avg(price),count(*) from goods group by cate_name;</span><br><span class="line"></span><br><span class="line">-- 查询所有价格大于平均价格的商品，并且按价格降序排序</span><br><span class="line">select * from goods where price &gt; (select avg(price) from goods) order by price desc;</span><br></pre></td></tr></table></figure></div><h4 id="3-创建商品分类表"><a href="#3-创建商品分类表" class="headerlink" title="3.创建商品分类表"></a>3.创建商品分类表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 创建商品分类表</span><br><span class="line">create table if not exists goods_cates(</span><br><span class="line">id int unsigned primary key auto_increment,</span><br><span class="line">    name varchar(40) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">--  将分组结果写入到goods_cates数据表</span><br><span class="line">insert into goods_cates (name) </span><br><span class="line">    select cate_name from goods group by cate_name;</span><br><span class="line">    </span><br><span class="line">--  通过goods_cates数据表来更新goods表</span><br><span class="line">update goods as g</span><br><span class="line">    inner join goods_cates as gc</span><br><span class="line">    on g.cate_name&#x3D;gc.name</span><br><span class="line">    set g.cate_name&#x3D;gc.id;</span><br></pre></td></tr></table></figure></div><h4 id="4-创建商品品牌表"><a href="#4-创建商品品牌表" class="headerlink" title="4.创建商品品牌表"></a>4.创建商品品牌表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 在创建数据表的时候一起插入数据</span><br><span class="line">-- 注意: 需要对brand_name 用as起别名，否则name字段就没有值</span><br><span class="line">create table goods_brands (</span><br><span class="line">    id int unsigned primary key auto_increment,</span><br><span class="line">    name varchar(40) not null) select brand_name as name from goods group by brand_name;</span><br><span class="line"></span><br><span class="line">-- 通过goods_brands数据表来更新goods数据表</span><br><span class="line">update goods as g inner join goods_brands as b on g.brand_name&#x3D;b.name set g.brand_name&#x3D;b.id;</span><br></pre></td></tr></table></figure></div><h4 id="5-修改商品表结构"><a href="#5-修改商品表结构" class="headerlink" title="5.修改商品表结构"></a>5.修改商品表结构</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table goods  </span><br><span class="line">change cate_name cate_id int unsigned not null,</span><br><span class="line">change brand_name brand_id int unsigned not null;</span><br></pre></td></tr></table></figure></div><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foreign key约束指定某一个列或一组列作为外部键，其中包含外部键的表称为子表，包含外键所引用的键的表称为父表。</span><br></pre></td></tr></table></figure></div></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 在goods表中插入任意记录</span><br><span class="line">insert into goods (name,cate_id,brand_id,price)</span><br><span class="line">values(&#39;LaserJet Pro P1606dn 黑白激光打印机&#39;, 12, 4,&#39;1849&#39;);</span><br><span class="line"></span><br><span class="line">-- 通过内连接方式查看</span><br><span class="line">select g.id,g.name,c.name,b.name,g.price from goods as g</span><br><span class="line">inner join goods_cates as c on g.cate_id&#x3D;c.id</span><br><span class="line">inner join goods_brands as b on g.brand_id&#x3D;b.id;</span><br><span class="line"></span><br><span class="line">-- 通过左连接方式查看</span><br><span class="line">select g.id,g.name,c.name,b.name,g.price from goods as g</span><br><span class="line">left join goods_cates as c on g.cate_id&#x3D;c.id</span><br><span class="line">left join goods_brands as b on g.brand_id&#x3D;b.id;</span><br></pre></td></tr></table></figure></div><ul><li>如何防止无效信息的插入,就是可以在插入前判断类型或者品牌名称是否存在呢? 可以使用之前讲过的外键来解决</li><li>外键约束:对外键字段的值 在更新和插入时进行和引用的表中字段数据进行对比</li><li>关键字: foreign key,只有 innodb数据库引擎 支持外键约束</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给brand_id 添加外键约束成功</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (brand_id) <span class="keyword">references</span> goods_brands(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给cate_id 添加外键失败</span></span><br><span class="line"><span class="comment">-- 会出现1452错误</span></span><br><span class="line"><span class="comment">-- 错误原因:已经添加了一个不存在的cate_id值12,因此需要先删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> goods <span class="keyword">where</span> cate_id = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (cate_id) <span class="keyword">references</span> goods_cates(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure></div><h5 id="创建表的时候设置外键"><a href="#创建表的时候设置外键" class="headerlink" title="创建表的时候设置外键"></a>创建表的时候设置外键</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">    price <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">    cate_id <span class="built_in">int</span> <span class="keyword">unsigned</span>,</span><br><span class="line">    brand_id <span class="built_in">int</span> <span class="keyword">unsigned</span>,</span><br><span class="line">    is_show <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">    is_saleoff <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(cate_id) <span class="keyword">references</span> goods_cates(<span class="keyword">id</span>),</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(brand_id) <span class="keyword">references</span> goods_brands(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h5 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看外键名称</span><br><span class="line">show create table goods;</span><br><span class="line"></span><br><span class="line">alter table goods drop foreign key 外键名称</span><br></pre></td></tr></table></figure></div><p><strong>外键约束会降低表的更新速率，在读写效率优先的情况下很少使用外键约束</strong></p><hr><h3 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h3><h4 id="1-使用python操作mysql步骤"><a href="#1-使用python操作mysql步骤" class="headerlink" title="1.使用python操作mysql步骤"></a>1.使用python操作mysql步骤</h4><p><a href="/img/images/pic/Snipaste_2018-09-21_00-04-47.png" data-fancybox="group" data-caption="Snipaste_2018-09-21_00-04-47" class="fancybox"><img alt="Snipaste_2018-09-21_00-04-47" title="Snipaste_2018-09-21_00-04-47" data-src="/img/images/pic/Snipaste_2018-09-21_00-04-47.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建连接对象</span></span><br><span class="line">conn = connect(参数列表)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">* 参数host：连接的mysql主机，如果本机是'localhost'</span></span><br><span class="line"><span class="string">* 参数port：连接的mysql主机的端口，默认是3306</span></span><br><span class="line"><span class="string">* 参数database：数据库的名称</span></span><br><span class="line"><span class="string">* 参数user：连接的用户名</span></span><br><span class="line"><span class="string">* 参数password：连接的密码</span></span><br><span class="line"><span class="string">* 参数charset：通信采用的编码方式，推荐使用utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cs = conn.cursor()</span><br><span class="line"><span class="comment"># 执行sql语句 返回影响的行数</span></span><br><span class="line">row_count = cs.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用fetchall  或者 fetchone 方法</span></span><br><span class="line">content = cs.fetchall();</span><br><span class="line"><span class="keyword">for</span> each_data <span class="keyword">in</span> content:</span><br><span class="line">    print(each_data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cs.close()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></div><h4 id="面向对象封装交互案例"><a href="#面向对象封装交互案例" class="headerlink" title="面向对象封装交互案例"></a>面向对象封装交互案例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JD</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = pymysql.connect(host=<span class="string">'192.168.1.7'</span>,port=<span class="number">3306</span>,db = <span class="string">'jing_dong'</span>,user=<span class="string">'root'</span>,password=<span class="string">'mysql'</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line">        self.cs = self.conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cs.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main_fun</span><span class="params">(self,sql_str,params=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> params == <span class="literal">None</span>:</span><br><span class="line">            self.cs.execute(sql_str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cs.execute(sql_str,params)</span><br><span class="line">        data = self.cs.fetchall()</span><br><span class="line">        <span class="keyword">for</span> each_data <span class="keyword">in</span> data:</span><br><span class="line">            print(each_data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"welcom jd_db"</span>)</span><br><span class="line">        print(<span class="string">"1 显示全部商品信息"</span>)</span><br><span class="line">        print(<span class="string">"2 显示商品种类信息"</span>)</span><br><span class="line">        print(<span class="string">"3 显示商品品牌信息"</span>)</span><br><span class="line">        print(<span class="string">"4 显示某个商品信息"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.show_menu()</span><br><span class="line"></span><br><span class="line">            num = int(input(<span class="string">"请选择具体操作选项："</span>))</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">                self.main_fun(<span class="string">"select * from goods"</span>)</span><br><span class="line">            <span class="keyword">elif</span> num ==<span class="number">2</span>:</span><br><span class="line">                self.main_fun(<span class="string">"select * from goods_cates"</span>)</span><br><span class="line">            <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">                self.main_fun(<span class="string">"select * from goods_brands"</span>)</span><br><span class="line">            <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">                self.main_fun(<span class="string">"select * from goods where name=%s"</span>, [input(<span class="string">"请输入你要查找的商品"</span>)])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入格式错误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    jd = JD()</span><br><span class="line">    jd.start()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库进阶操作2</title>
      <link href="/2018/04/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-22-%E6%95%B0%E6%8D%AE%E5%BA%9302%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-22-%E6%95%B0%E6%8D%AE%E5%BA%9302%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="数据库进阶操作"><a href="#数据库进阶操作" class="headerlink" title="数据库进阶操作"></a>数据库进阶操作</h3><h4 id="查询强化-for-Example"><a href="#查询强化-for-Example" class="headerlink" title="查询强化 for Example:"></a>查询强化 for Example:</h4><h5 id="1-1-准备环境"><a href="#1-1-准备环境" class="headerlink" title="1.1 准备环境"></a>1.1 准备环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database python_test_1 charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"># 使用数据库</span><br><span class="line">use python_test_1;</span><br><span class="line"></span><br><span class="line">-- students表</span><br><span class="line">create python_test_1(</span><br><span class="line">    # id 整型 无符号 主键 自增 不为空</span><br><span class="line">id int unsigned primary key auto_increment not null，</span><br><span class="line">    # 名字 可变字长20字节  默认空字符串</span><br><span class="line">    name varchar(20) default &#39;&#39;，</span><br><span class="line">    # 年龄 微整型 无符号  默认为0</span><br><span class="line">age tinyint unsigned default 0,</span><br><span class="line">    # 身高 小数五位数字 小数占两位</span><br><span class="line">    height decimal(5,2),</span><br><span class="line">    # 性别 枚举类型</span><br><span class="line">    gender enum(&#39;男&#39;, &#39;女&#39;, &#39;中性&#39;, &#39;保密&#39;) default &#39;保密&#39;,</span><br><span class="line">    cls_id int unsigned default 0,</span><br><span class="line">    # 是否删除 比特位 默认为0</span><br><span class="line">    is_delete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- classes表</span><br><span class="line">create table classes(</span><br><span class="line">id int unsigned auto_increment primary key not null,</span><br><span class="line">    name varchar(30) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h5 id="1-2准备数据"><a href="#1-2准备数据" class="headerlink" title="1.2准备数据"></a>1.2准备数据</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 向students表中插入数据</span><br><span class="line">insert into students values</span><br><span class="line">(0,&#39;小明&#39;,18,180.00,2,1,0),</span><br><span class="line">(0,&#39;小月月&#39;,18,180.00,2,2,1),</span><br><span class="line">(0,&#39;彭于晏&#39;,29,185.00,1,1,0),</span><br><span class="line">(0,&#39;刘德华&#39;,59,175.00,1,2,1),</span><br><span class="line">(0,&#39;黄蓉&#39;,38,160.00,2,1,0),</span><br><span class="line">(0,&#39;凤姐&#39;,28,150.00,4,2,1),</span><br><span class="line">(0,&#39;王祖贤&#39;,18,172.00,2,1,1),</span><br><span class="line">(0,&#39;周杰伦&#39;,36,NULL,1,1,0),</span><br><span class="line">(0,&#39;程坤&#39;,27,181.00,1,2,0),</span><br><span class="line">(0,&#39;刘亦菲&#39;,25,166.00,2,2,0),</span><br><span class="line">(0,&#39;金星&#39;,33,162.00,3,3,1),</span><br><span class="line">(0,&#39;静香&#39;,12,180.00,2,4,0),</span><br><span class="line">(0,&#39;郭靖&#39;,12,170.00,1,4,0),</span><br><span class="line">(0,&#39;周杰&#39;,34,176.00,2,5,0);</span><br><span class="line"></span><br><span class="line">-- 向classes表中插入数据</span><br><span class="line">insert into classes values(0,&#39;python_01期&#39;),(0，&#39;python_02期&#39;);</span><br></pre></td></tr></table></figure></div><h5 id="1-3验证数据"><a href="#1-3验证数据" class="headerlink" title="1.3验证数据"></a>1.3验证数据</h5><ul><li><p>查询所有的字段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from students;</span><br><span class="line">select * from classes;</span><br></pre></td></tr></table></figure></div></li><li><p>查询指定字段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,age from students;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h4><ul><li><p>使用as给字段起别名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id as 序号,name as 名字,gender as 性别 from students;</span><br></pre></td></tr></table></figure></div></li><li><p>可以通过as给表起别名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 如果是单表查询 可以省略表名</span><br><span class="line">select id,name,gender from students;</span><br><span class="line"></span><br><span class="line">-- 表名.字段名</span><br><span class="line">select students.id,students.name,students.gender from students;</span><br><span class="line"></span><br><span class="line">-- 可以通过as给表起别名</span><br><span class="line">select s.id,s.name,s.gender from students as s;</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>给表起名 在后期学习 自连接的时候，必须要对表起别名</p></blockquote><h4 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h4><blockquote><p>distinct 可以消除重复的行</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select distinct 列1，... from 表名;</span><br><span class="line"># 查询班级中学生的性别</span><br><span class="line">select gender from students;</span><br><span class="line"># 需要去重</span><br><span class="line">select distinct gender from students;</span><br></pre></td></tr></table></figure></div><hr><h3 id="Where-条件"><a href="#Where-条件" class="headerlink" title="Where 条件"></a>Where 条件</h3><blockquote><p>对表中的数据进行条件限制 筛选  结果为true的行 会出现在结果中</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- select * from 表名 where 条件;</span><br><span class="line"></span><br><span class="line">select * from students where id&#x3D;1;</span><br></pre></td></tr></table></figure></div><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><blockquote><p>=  &gt;  &gt;=   &lt;   &lt;=   !=  &lt;&gt;</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询编号大于3的学生</span><br><span class="line">select * from students where id &gt; 3;</span><br><span class="line"></span><br><span class="line"># 2.查询编号不大于4的学生</span><br><span class="line">select * from students where id &lt;&#x3D; 4;</span><br><span class="line"></span><br><span class="line"># 3.查询姓名不是&quot;黄蓉&quot;的学生</span><br><span class="line">select * from students where name !&#x3D; &quot;黄蓉&quot;;</span><br><span class="line"></span><br><span class="line"># 4.查询没被删除的学生</span><br><span class="line">select *  from students where is_delete&#x3D;0;</span><br></pre></td></tr></table></figure></div><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><blockquote><p>and  or  not</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 5.查询编号大于3的女同学</span><br><span class="line">select * from students where id&gt;3 and gender&#x3D;2;</span><br><span class="line"></span><br><span class="line"># 查询编号小于4或没被删除的学生</span><br><span class="line">select * from students where id&lt;4 or is_delete&#x3D;0;</span><br></pre></td></tr></table></figure></div><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><blockquote><p><strong>like</strong>   <strong>%</strong>任意多个字符  <strong>_</strong>任意一个字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 7.查询姓黄的学生</span><br><span class="line">select * from students where name like &#39;黄%&#39;;</span><br><span class="line"></span><br><span class="line"># 8.查询姓黄并且&quot;名&quot;是一个字的学生</span><br><span class="line">select * from students where name like &quot;黄_&quot;;</span><br><span class="line"></span><br><span class="line"># 9.查询姓黄或叫靖的学生</span><br><span class="line">select * from students where name like &quot;黄%&quot; or name like &#39;%靖&#39;;</span><br></pre></td></tr></table></figure></div><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><blockquote><p> <strong>in</strong> 表示一个非连续的范围内</p></blockquote><blockquote><p>between ….and … 表示一个连续的范围</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 10.查询编号是1或者3或者8的学生</span><br><span class="line">select * from students where id in (1,3,8);</span><br><span class="line"></span><br><span class="line"># 11：查询编号为3至8的学生</span><br><span class="line">select * from students where id between 3 and 8;</span><br><span class="line"></span><br><span class="line"># 12. 查询编号是3至8的男生</span><br><span class="line">select * from students where (id between 3 and 8) and gender&#x3D;1;</span><br></pre></td></tr></table></figure></div><h4 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 13：查询没有填写身高的学生</span><br><span class="line">select * from students where height is null;</span><br><span class="line"></span><br><span class="line"># 14：查询填写了身高的学生</span><br><span class="line">select * from students where height is not null;</span><br><span class="line"></span><br><span class="line"># 15：查询填写了身高的男生</span><br><span class="line">select * from students where height is not null and gender&#x3D;1;</span><br></pre></td></tr></table></figure></div><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><blockquote><p>优先级由高到低: （）===&gt; not==&gt;比较运算符==&gt; 逻辑运算符（and先于or）</p></blockquote><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>select * from 表名 order by 列1 asc|desc [,列2 asc|desc,…]</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 例1：查询未删除男生信息，按学号降序</span><br><span class="line">select * from students where is_delete&#x3D;0 and gender&#x3D;1 order by id desc;</span><br><span class="line"></span><br><span class="line"># 例2：查询未删除学生信息，按名称升序</span><br><span class="line">select * from students where is_delete&#x3D;0 order by name;</span><br><span class="line"></span><br><span class="line"># 例3：显示所有的学生信息，先按照年龄从大--&gt;小排序，当年龄相同时 按照身高从高--&gt;矮排序</span><br><span class="line">select * from students order by age desc, height desc;</span><br></pre></td></tr></table></figure></div><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><blockquote><p>语法： select  * from  表名 limit start=0,count</p></blockquote><blockquote><p>start起始位置 默认为0  count 获取的数量</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询前3行男生信息</span><br><span class="line">select * from students where gender&#x3D;1 limit 0,3;</span><br></pre></td></tr></table></figure></div><h5 id="关于分页的有趣的推导公式"><a href="#关于分页的有趣的推导公式" class="headerlink" title="关于分页的有趣的推导公式"></a>关于分页的有趣的推导公式</h5><blockquote><p>每页显示 m条数据 当前显示第n页  则 start的起始值为(n-1)*m</p><p>count为m</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 获取第n页数据的sql语句</span><br><span class="line">select * from students where is_delete&#x3D;0 limit (n-1)*m,m;</span><br><span class="line"># 注意 这里的计算公式必须提前得到结果， 不能直接写在这里</span><br></pre></td></tr></table></figure></div><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>聚合函数 aggregation function 又称为 组函数</p></blockquote><h5 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询学生总数</span><br><span class="line">select count(*) from students;</span><br></pre></td></tr></table></figure></div><h5 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询女生的编号最大值</span><br><span class="line">select max(*) from students where gender&#x3D;2;</span><br></pre></td></tr></table></figure></div><h5 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询未删除的学生最小编号</span><br><span class="line">select min(*) from students where is_delete&#x3D;0;</span><br></pre></td></tr></table></figure></div><h5 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询男生的总年龄</span><br><span class="line">select sum(age) from students where gender&#x3D;1;</span><br></pre></td></tr></table></figure></div><h5 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询未删除女生的编号平均值</span><br><span class="line">select avg(id) from students where gender&#x3D;2 and is_delete&#x3D;0;</span><br></pre></td></tr></table></figure></div><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>什么是分组 所谓分组就是将一个数据集划分成若干小区域 然后进行数据处理</p></blockquote><h5 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别进行分组 显示出性别 分为四组 男  女 中性 保密</span><br><span class="line">select gender from students group by gender;</span><br><span class="line"></span><br><span class="line">+--------+</span><br><span class="line">| gender |</span><br><span class="line">+--------+</span><br><span class="line">| 男     |</span><br><span class="line">| 女     |</span><br><span class="line">| 中性   |</span><br><span class="line">| 保密   |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure></div><h5 id="group-by-group-concat"><a href="#group-by-group-concat" class="headerlink" title="group by + group_concat()"></a>group by + group_concat()</h5><blockquote><p>group_concat(字段名)根据分组结果，使用group_concat()来放置每一个分组中某字段的集合</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select gender,group_concat(name) from students group by gender;</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line">| gender | group_concat(name)                                        |</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line">| 男     | 彭于晏,刘德华,周杰伦,程坤,郭靖                                 |</span><br><span class="line">| 女     | 小明,小月月,黄蓉,王祖贤,刘亦菲,静香,周杰                        |</span><br><span class="line">| 中性   | 金星                                                       |</span><br><span class="line">| 保密   | 凤姐                                                       |</span><br><span class="line">+--------+-----------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">select gender,group_concat(id) from students group by gender;</span><br><span class="line">+--------+------------------+</span><br><span class="line">| gender | group_concat(id) |</span><br><span class="line">+--------+------------------+</span><br><span class="line">| 男     | 3,4,8,9,14       |</span><br><span class="line">| 女     | 1,2,5,7,10,12,13 |</span><br><span class="line">| 中性   | 11               |</span><br><span class="line">| 保密   | 6                |</span><br><span class="line">+--------+------------------+</span><br></pre></td></tr></table></figure></div><h5 id="group-by-聚合函数"><a href="#group-by-聚合函数" class="headerlink" title="group by + 聚合函数"></a>group by + 聚合函数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">select gender,group_concat(age) from students group by gender;</span><br><span class="line">+--------+----------------------+</span><br><span class="line">| gender | group_concat(age)    |</span><br><span class="line">+--------+----------------------+</span><br><span class="line">| 男     | 29,59,36,27,12       |</span><br><span class="line">| 女     | 18,18,38,18,25,12,34 |</span><br><span class="line">| 中性   | 33                   |</span><br><span class="line">| 保密   | 28                   |</span><br><span class="line">+--------+----------------------+</span><br><span class="line">select gender,avg(age) from students group by gender;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | avg(age) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |  32.6000 |</span><br><span class="line">| 女     |  23.2857 |</span><br><span class="line">| 中性   |  33.0000 |</span><br><span class="line">| 保密   |  28.0000 |</span><br><span class="line">+--------+----------+</span><br><span class="line">select gender,count(*) from students group by gender;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 |</span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 中性   |        1 |</span><br><span class="line">| 保密   |        1 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure></div><h5 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by + having"></a>group by + having</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from students group by gender having count(*) &gt;2</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 |</span><br><span class="line">| 女     |        7 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure></div><h5 id="group-by-with-rollup"><a href="#group-by-with-rollup" class="headerlink" title="group by + with rollup"></a>group by + with rollup</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from students group by gender having count(*) &gt;2 with rollup;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 </span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 中性   |        1 |</span><br><span class="line">| 保密   |        1 |</span><br><span class="line">| NULL   |       14 |</span><br><span class="line">+--------+----------+</span><br><span class="line">select gender,group_concat(age) from students group by gender with rollup;</span><br><span class="line">| gender | group_concat(age)                         |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| 男     | 29,59,36,27,12                            |</span><br><span class="line">| 女     | 18,18,38,18,25,12,34                      |</span><br><span class="line">| 中性   | 33                                        |</span><br><span class="line">| 保密   | 28                                        |</span><br><span class="line">| NULL   | 29,59,36,27,12,18,18,38,18,25,12,34,33,28 |</span><br><span class="line">+--------+-------------------------------------------+</span><br></pre></td></tr></table></figure></div><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><blockquote><p>mysql支持三种类型的连接查询：</p><ol><li><p>内连接查询：查询的结果为两个表匹配到的数据</p><p><a href="/img/images/pic/Snipaste_2018-09-18_16-35-43%E7%9A%84%E5%89%AF%E6%9C%AC.png" data-fancybox="group" data-caption="Snipaste_2018-09-18_16-35-43的副本" class="fancybox"><img alt="Snipaste_2018-09-18_16-35-43的副本" title="Snipaste_2018-09-18_16-35-43的副本" data-src="/img/images/pic/Snipaste_2018-09-18_16-35-43%E7%9A%84%E5%89%AF%E6%9C%AC.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>右连接查询 查询的结果为两个表匹配到的数据和右表特有的数据，对于左表中不存在的数据使用null填充</p><p><a href="/img/images/pic/Snipaste_2018-09-18_19-24-46.png" data-fancybox="group" data-caption="Snipaste_2018-09-18_19-24-46" class="fancybox"><img alt="Snipaste_2018-09-18_19-24-46" title="Snipaste_2018-09-18_19-24-46" data-src="/img/images/pic/Snipaste_2018-09-18_19-24-46.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>左连接查询 查询的结果为两个表匹配到的数据和左表特有的数据，对于右表中不存在的数据使用null填充</p><p><a href="/img/images/pic/Snipaste_2018-09-18_19-25-00.png" data-fancybox="group" data-caption="Snipaste_2018-09-18_19-25-00" class="fancybox"><img alt="Snipaste_2018-09-18_19-25-00" title="Snipaste_2018-09-18_19-25-00" data-src="/img/images/pic/Snipaste_2018-09-18_19-25-00.png" src="/img/loading.gif" class="lazyload"></a></p></li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 例1：使用内连接查询班级表与学生表</span><br><span class="line">select * from students inner join classes on students.cls_id &#x3D; classes.id;</span><br><span class="line"></span><br><span class="line">-- 例2：使用左连接查询班级表与学生表</span><br><span class="line">select * from students as s left join classes as c on s.cls_id &#x3D; c.id;</span><br><span class="line"></span><br><span class="line">--  例3：使用右连接查询班级表与学生表</span><br><span class="line">select * from students as s right join classes as c on s.cls_id&#x3D;c.id;</span><br></pre></td></tr></table></figure></div><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><blockquote><p>以设计表结构来存储 全国所有的省份和全国所有的市</p></blockquote><p><strong>数据表内的数据间关联查询 称为自连接</strong></p><p><strong>定义表areas，结构如下</strong></p><ul><li>id</li><li>atitle</li><li>pid</li></ul><h5 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h5><ol><li><p>创建areas表的语句如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table areas (</span><br><span class="line">aid int primary key,</span><br><span class="line">    atitle varchar(20),</span><br><span class="line">    pid int</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li><li><p>从sql文件中导入数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source areas.sql;</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="查询用法"><a href="#查询用法" class="headerlink" title="查询用法"></a>查询用法</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询一共多少个省</span><br><span class="line">select count(*) from areas where pid is null;</span><br><span class="line"></span><br><span class="line">-- 例1：查询省的名称为“山西省”的所有城市</span><br><span class="line">select city.* from areas as city</span><br><span class="line">inner join areas as province on city.pid&#x3D;province.aid</span><br><span class="line">where province.atitle&#x3D;&#39;山西省&#39;;</span><br><span class="line"></span><br><span class="line">-- 例2：查询市的名称为“长治市”的所有区县</span><br><span class="line">select q.* from areas as q inner join areas as c on c.aid &#x3D; q.pid where c.atitle&#x3D;&quot;长治市&quot;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 广东省 深圳市 宝安区</span><br></pre></td></tr></table></figure></div><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句,外部那个select语句则称为主查询.</p><p><strong>分类</strong></p><ul><li>标量子查询: 子查询返回的结果是一个数据(一行一列)</li><li>列子查询: 返回的结果是一列(一列多行)</li><li>行子查询: 返回的结果是一行(一行多列)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询班级大于平均身高的学生</span><br><span class="line">select * from students where height &gt; (select avg(height) from  students);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询还有学生在班的所有班级名字</span><br><span class="line">-- -- 找出学生表中所有的班级 id</span><br><span class="line">-- -- 找出班级表中对应的名字</span><br><span class="line">select name from classes where id in (select cls_id from students);</span><br><span class="line">select name from students where cls_id in (select id from classes);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求: 查找班级年龄最大,身高最高的学生</span><br><span class="line">行元素: 将多个字段合成一个行元素,在行级子查询中会使用到行元素</span><br><span class="line">select * from students where (height,age) &#x3D; (select max(height),max(age) from students);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础01</title>
      <link href="/2018/04/13/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-13-%E6%95%B0%E6%8D%AE%E5%BA%9301%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/04/13/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-13-%E6%95%B0%E6%8D%AE%E5%BA%9301%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h3><ol><li>数据库四天<ol><li>基本概念</li><li>sql查询命令</li><li>数据库与python交互</li><li>高级概念</li></ol></li></ol><hr><h4 id="1-数据库的概念"><a href="#1-数据库的概念" class="headerlink" title="1.数据库的概念"></a>1.数据库的概念</h4><blockquote><p>数据库就是以一定格式进行组织的数据的集合</p></blockquote><p><strong>数据库是用户计算机上 一些具有特殊格式的数据文件的集合</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-17_09-08-28.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_09-08-28" class="fancybox"><img alt="Snipaste_2018-09-17_09-08-28" title="Snipaste_2018-09-17_09-08-28" data-src="/img/images/pic/Snipaste_2018-09-17_09-08-28.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p><em>数据库中的图片只是存储img.url 信息，不擅长存储图片信息  后期可以使用图片服务器做存储</em></p></blockquote><p><a href="/img/images/pic/Snipaste_2018-09-17_14-47-39.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_14-47-39" class="fancybox"><img alt="Snipaste_2018-09-17_14-47-39" title="Snipaste_2018-09-17_14-47-39" data-src="/img/images/pic/Snipaste_2018-09-17_14-47-39.png" src="/img/loading.gif" class="lazyload"></a></p><p>类比 excel表格，其实也可以看成一个数据库</p><p><a href="/img/images/pic/Snipaste_2018-09-17_09-32-20.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_09-32-20" class="fancybox"><img alt="Snipaste_2018-09-17_09-32-20" title="Snipaste_2018-09-17_09-32-20" data-src="/img/images/pic/Snipaste_2018-09-17_09-32-20.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>数据库有多个数据表组成的，数据表才是真正数据的存储位置</strong></p><ol><li><strong>字段</strong> 存储同一类信息的一列</li><li><strong>记录</strong> 用来存储某一个具体事物的详细信息的一行</li><li>能够标识唯一的一行记录的特殊字段为<strong>主键</strong> （特点：不可重复，不可为空）</li><li><strong>关系型数据库</strong>  数据库中表可以发生响应的关联</li><li><strong>数据库</strong>：数据表的集合</li></ol><h5 id="关系型数据库的作用"><a href="#关系型数据库的作用" class="headerlink" title="关系型数据库的作用"></a>关系型数据库的作用</h5><ol><li>持久化存储</li><li>读写速度极高</li><li>保证数据的有效性</li><li>对程序支持性非常好，容易扩展</li></ol><h5 id="关系型数据库的主要产品"><a href="#关系型数据库的主要产品" class="headerlink" title="关系型数据库的主要产品"></a>关系型数据库的主要产品</h5><ul><li><p>oracle 银行电信等项目</p></li><li><p>sqlite 轻量级数据库</p></li><li><p>ms sql server 在微软的项目中使用</p></li><li><p>mysql  web时代使用最广泛的关系型数据库</p><p>附带网址: <a href="http://www.mysql.com" target="_blank" rel="noopener">http://www.mysql.com</a></p></li></ul><h4 id="2-数据库管理系统"><a href="#2-数据库管理系统" class="headerlink" title="2.数据库管理系统"></a>2.数据库管理系统</h4><p><a href="/img/images/pic/Snipaste_2018-09-17_09-29-03.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_09-29-03" class="fancybox"><img alt="Snipaste_2018-09-17_09-29-03" title="Snipaste_2018-09-17_09-29-03" data-src="/img/images/pic/Snipaste_2018-09-17_09-29-03.png" src="/img/loading.gif" class="lazyload"></a></p><ol><li><p>关系型数据库RDBMS  <strong>本质上使用一张二维表来表示关系</strong></p></li><li><p>sql语句的主要划分：</p><ol><li>DQL：查询语言 用于对数据进行查询  如select</li><li>DML：数据库操作语言 对数据进行增加 修改 删除 如insert， update， delete</li><li>DDL 数据定义语言  进行数据库 表的管理等</li></ol></li><li><p>查找进程 ps -aux | grep mysql</p><p>ajx 不会显示用户名</p></li></ol><h5 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h5><ol><li><p>安装mysql到Linux服务器中 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line"><span class="comment"># 安装客户端</span></span><br><span class="line">sudo apt-get install mysql-client</span><br></pre></td></tr></table></figure></div></li></ol><ol start="4"><li><p>开启服务和停止服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br><span class="line">sudo service mysql stop</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></div></li><li><p>查看配置文件  vi  mysqld.cnf</p><p>目录路径：/etc/mysql/mysql.conf.d/mysqld.cnf</p></li></ol><p>里面有端口port 以及记录日志错误  datadir数据库目录</p><hr><h4 id="客户端的安装"><a href="#客户端的安装" class="headerlink" title="客户端的安装"></a>客户端的安装</h4><blockquote><p>客户端为开发人员与dba使用，使用socket方式与服务端通信，常用的有图形navicat  以及命令行mysql</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux 下安装navicat</span></span><br><span class="line">tar zxcf navicat112_mysql_cs_x64.tar.gz</span><br><span class="line"><span class="comment"># 解压之后 进入目录 运行如下命令</span></span><br><span class="line">./start_navicat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题1 中文乱码 </span></span><br><span class="line"><span class="comment"># 解决 打开start_navicat 文件</span></span><br><span class="line">将export LANG=<span class="string">"en_US.UTF-8"</span>改为export LANG=<span class="string">"zh-cn.UTF-8"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题2 试用期 删除用户目录下的 .navicat64目录</span></span><br><span class="line">cd ~</span><br><span class="line">rm -rf .navicat64</span><br></pre></td></tr></table></figure></div><h5 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行终端中 输入以下信息</span></span><br><span class="line">sudo apt-get install mysql-client</span><br><span class="line"><span class="comment"># 详细的连接命令可以查看帮助文档</span></span><br><span class="line">mysql --help</span><br><span class="line"><span class="comment"># 最基本的连接命令</span></span><br><span class="line">mysql -uroot -pmysql  <span class="comment"># 连接成功后可进入mysql交互模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ctrl+d 退出</span></span><br><span class="line">quit 或者exit</span><br></pre></td></tr></table></figure></div><hr><h3 id="数据的完整性"><a href="#数据的完整性" class="headerlink" title="数据的完整性"></a>数据的完整性</h3><h4 id="1-数据的类型"><a href="#1-数据的类型" class="headerlink" title="1.数据的类型"></a>1.数据的类型</h4><p><strong>整数</strong></p><ul><li><p>int类型 四个字节</p></li><li><p>bit 八分之一个字节</p></li></ul><p><strong>小数</strong></p><ul><li>decimal 小数 decimal(5,2)能存5位 小数为2位</li></ul><p><strong>字符串</strong></p><ul><li><p>char(3) “ab”==&gt; “ab  “</p></li><li><p>varchar(3) “ab” ==&gt; “ab”</p></li><li><p>text 大文本类型 一般字节超过4千 比如技术博客</p></li></ul><p><strong>日期类型</strong> </p><ul><li>date</li><li>time</li><li>datetime</li></ul><p><strong>枚举类型</strong></p><ul><li>enum枚举类型  gender(“男”, “女”)</li></ul><blockquote><p>对于图片视频以及音频的文件，不存储在数据库中， 而是上传到某个服务器上，数据库中保存资源的路径即可</p></blockquote><h4 id="2-数据的约束"><a href="#2-数据的约束" class="headerlink" title="2.数据的约束"></a>2.数据的约束</h4><p><strong>常见约束</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主键 不可重复 唯一标识一行的特殊字段  不可为空  </span></span><br><span class="line">primary key</span><br><span class="line"><span class="comment"># 非空  字段不能为空</span></span><br><span class="line"><span class="keyword">not</span> null</span><br><span class="line"><span class="comment"># 不允许重复 </span></span><br><span class="line">unique</span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">default 不填写此字段 （null <span class="number">0</span>也可以）会使用默认值 如果需要写默认值 则必须使用default</span><br><span class="line"><span class="comment"># 对关系字段进行约束  ？？？</span></span><br><span class="line">foreign key</span><br></pre></td></tr></table></figure></div><h4 id="3-数据类型的附录表"><a href="#3-数据类型的附录表" class="headerlink" title="3.数据类型的附录表"></a>3.数据类型的附录表</h4><p><a href="/img/images/pic/Snipaste_2018-09-17_16-08-40.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_16-08-40" class="fancybox"><img alt="Snipaste_2018-09-17_16-08-40" title="Snipaste_2018-09-17_16-08-40" data-src="/img/images/pic/Snipaste_2018-09-17_16-08-40.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="/img/images/pic/Snipaste_2018-09-17_16-08-53.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_16-08-53" class="fancybox"><img alt="Snipaste_2018-09-17_16-08-53" title="Snipaste_2018-09-17_16-08-53" data-src="/img/images/pic/Snipaste_2018-09-17_16-08-53.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="/img/images/pic/Snipaste_2018-09-17_16-09-03.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_16-09-03" class="fancybox"><img alt="Snipaste_2018-09-17_16-09-03" title="Snipaste_2018-09-17_16-09-03" data-src="/img/images/pic/Snipaste_2018-09-17_16-09-03.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>thinking:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 含义：设置一个字段是id  必须是整型 无符号 不能为空 唯一的</span></span><br><span class="line">id int unsigned <span class="keyword">not</span> null unique </span><br></pre></td></tr></table></figure></div></blockquote><hr><h4 id="Navicat图形化界面的操作"><a href="#Navicat图形化界面的操作" class="headerlink" title="Navicat图形化界面的操作"></a>Navicat图形化界面的操作</h4><p><strong>pass</strong></p><h4 id="命令行客户端的操作"><a href="#命令行客户端的操作" class="headerlink" title="命令行客户端的操作"></a>命令行客户端的操作</h4><h5 id="数据库的操作-连接数据库-对数据库-表结构-表数据进行操作"><a href="#数据库的操作-连接数据库-对数据库-表结构-表数据进行操作" class="headerlink" title="数据库的操作 (连接数据库  对数据库 表结构 表数据进行操作)"></a>数据库的操作 (连接数据库  对数据库 表结构 表数据进行操作)</h5><p><strong>数据基本操作</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.连接数据库</span></span><br><span class="line">mysql -uroot -pmysql</span><br><span class="line"><span class="comment"># 2.不显示密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 3.退出数据库</span></span><br><span class="line">exit/quit/ctrl + d</span><br></pre></td></tr></table></figure></div><p><a href="/img/images/pic/Snipaste_2018-09-17_16-22-07.png" data-fancybox="group" data-caption="Snipaste_2018-09-17_16-22-07" class="fancybox"><img alt="Snipaste_2018-09-17_16-22-07" title="Snipaste_2018-09-17_16-22-07" data-src="/img/images/pic/Snipaste_2018-09-17_16-22-07.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>数据登录之后的查看操作</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.显示数据库版本</span></span><br><span class="line">select  version();</span><br><span class="line"><span class="comment"># 2.显示时间</span></span><br><span class="line">select  now();</span><br></pre></td></tr></table></figure></div><p><strong>使用数据库</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.使用某数据库 use 数据库名;</span></span><br><span class="line">use python17</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些常用的快捷键</span></span><br><span class="line">ctrl+a 快速定位开头  ctrl+e 回到结尾</span><br><span class="line">ctrl+c + 回车   结束当前语句</span><br><span class="line">ctrl+L  清屏</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库 要指定字符集 charset=utf8;</span></span><br><span class="line">create database  zag charset=utf8;</span><br></pre></td></tr></table></figure></div><p><strong>查看数据库的操作</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前使用的数据库</span></span><br><span class="line">select database();</span><br><span class="line"><span class="comment"># 2.查看所有的数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 3.查看创建数据库的语句</span></span><br><span class="line">show create database zag;</span><br></pre></td></tr></table></figure></div><p><strong>删除数据库</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="comment"># drop  database  数据库名</span></span><br></pre></td></tr></table></figure></div><h4 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h4><p><strong>查看数据表的操作</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前所有数据表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 2.查看表结构</span></span><br><span class="line">desc 表名</span><br><span class="line"><span class="comment"># 3.查看表的字符集</span></span><br><span class="line">show create table 表名；</span><br><span class="line">ENGINE= InnoDB  (mysql的引擎)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  int(10) 10表示整型表示方式用10bit去表示</span></span><br></pre></td></tr></table></figure></div><p><strong>创建数据表的语法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    <span class="comment"># 整型  无符号  主键    不为空    自动增加</span></span><br><span class="line">id int unsigned primary key <span class="keyword">not</span> null auto_increment，</span><br><span class="line">    name varchar(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p><strong>案例</strong></p><p><strong>创建班级表</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table classes (</span><br><span class="line">id int unsigned auto_increment primary key not null,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p><strong>创建学生信息表</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 字段名称  数据类型  可选的约束条件</span><br><span class="line">create table students (  </span><br><span class="line">    id int unsigned not null auto_increment primary key,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int unsigned,</span><br><span class="line">    high decimal(5, 2)</span><br><span class="line">    gender enum(&#39;男&#39;, &#39;女&#39;, &#39;保密&#39;) default&#39;保密&#39;，</span><br><span class="line">    cls_id int </span><br><span class="line">  );</span><br></pre></td></tr></table></figure></div><p><strong>修改表</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1. 添加字段：</span><br><span class="line">   alter  table 表名 add  列名 类型 约束条件</span><br><span class="line">   alter table  students  add  birthday  datetime</span><br><span class="line">   alter table  classes add jixiangwu  varchar(30)</span><br><span class="line"># 2. 修改字段： 不重命名</span><br><span class="line">   alter table 表名  modify  列名  类名以及约束</span><br><span class="line">   alter table students modify jixiangwu varchar(30)</span><br><span class="line"># 3. 修改字段： 重命令版</span><br><span class="line">   alter  table 表名 change  原名  新名 类型以及约束</span><br><span class="line">   alter table classes change jixiangwu  mascot varchar(20)</span><br><span class="line"># 4. 修改表—---删除字段</span><br><span class="line">   alter  table  表名  drop  列名</span><br><span class="line">   alter table classes drop mascot</span><br><span class="line"># 5.删除表</span><br><span class="line">drop table 表名；</span><br><span class="line"># 6.删除数据库</span><br><span class="line">drop database  数据库；</span><br><span class="line"># 更改数据表的名称</span><br><span class="line">rename table 旧表名 to 新表名；</span><br></pre></td></tr></table></figure></div><h4 id="增删改查（crud）"><a href="#增删改查（crud）" class="headerlink" title="增删改查（crud）"></a>增删改查（crud）</h4><ol><li><p>增加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20)      | YES  |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure></div></li></ol><ol><li><p>全列插入,部分插入 ，多行插入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert [into] 表名 values(……)</span><br><span class="line"><span class="comment"># 主键字段 可以用 0  null  default  来占位</span></span><br><span class="line">向classes表中插入 一个班级</span><br><span class="line">insert  into classes value(<span class="number">1</span>,<span class="string">'python17'</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  +--------+-------------------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field  | Type                                | Null | Key | Default | Extra          |</span><br><span class="line">+--------+-------------------------------------+------+-----+---------+----------------+</span><br><span class="line">| id     | int(<span class="number">10</span>) unsigned                    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name   | varchar(<span class="number">20</span>)                         | YES  |     | NULL    |                |</span><br><span class="line">| age    | int(<span class="number">10</span>) unsigned                    | YES  |     | NULL    |                |</span><br><span class="line">| high   | decimal(<span class="number">5</span>,<span class="number">2</span>)                        | YES  |     | NULL    |                |</span><br><span class="line">| gender | enum(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'中性'</span>,<span class="string">'保密'</span>)       | YES  |     | 保密    |                |</span><br><span class="line">| cls_id | int(<span class="number">11</span>)                             | YES  |     | NULL    |                |</span><br><span class="line">+--------+-------------------------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全列插入    ID    name  age  high  gender  cls_id</span></span><br><span class="line">insert into students values(<span class="number">1</span>,<span class="string">"班主任"</span>, <span class="number">18</span>, <span class="number">166.66</span>, <span class="number">2</span>, <span class="number">110</span>);</span><br><span class="line"><span class="comment"># 部分插入  </span></span><br><span class="line">insert into students(name,high,gender) values(<span class="string">"吴彦祖"</span>, <span class="number">188.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment"># 多行插入</span></span><br><span class="line">insert into students values(null, <span class="string">"老谢"</span>, <span class="number">28</span>, <span class="number">188.88</span>,<span class="number">1</span>,<span class="number">110</span>),(null,<span class="string">"老马"</span>,<span class="number">17</span>,<span class="number">170.00</span>, default, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></div></li></ol><ol start="2"><li><p>修改数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># update 表名 set 列1&#x3D;值1，列2&#x3D;值2 ... where 条件</span><br><span class="line">update students set high&#x3D;170.00;  #  全部会被修改</span><br><span class="line"># 按条件修改</span><br><span class="line">update students set high&#x3D;188.88 where id&#x3D;2;</span><br></pre></td></tr></table></figure></div></li><li><p>查询基本使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有列</span><br><span class="line">select * from 表名</span><br><span class="line">select * from students;</span><br><span class="line"># 定条件查询</span><br><span class="line">select * from students where id&#x3D;2;</span><br><span class="line">#查询指定列</span><br><span class="line">select name,gender from students;</span><br><span class="line"># 可以使用as作为列或者指定别名</span><br><span class="line">select name as &quot;姓名&quot;,gender as &quot;性别&quot; from students;</span><br><span class="line"># 字段的顺序</span><br><span class="line">select gender&#x3D;&quot;性别&quot;,name&#x3D;&quot;姓名&quot; from students;</span><br></pre></td></tr></table></figure></div></li><li><p>删除</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 物理删除</span><br><span class="line">delete from 表名 where 条件</span><br><span class="line"># 逻辑删除 用一个字段来表示 这条信息是否已经不能用了</span><br><span class="line">给students添加一个is_del 字段 bit类型</span><br></pre></td></tr></table></figure></div></li><li><p>数据库备份与恢复（了解）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p zagcool &gt; zagcool.sql;</span><br><span class="line"></span><br><span class="line">mysql -uroot -p 新数据库名  &lt; zagcool.sql</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式以及http服务器</title>
      <link href="/2018/04/08/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-8-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/04/08/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-8-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>正则表达式</p><pre><code>re高级函数 find  findall  sub  search的作用</code></pre><p>http协议</p><h4 id="一-匹配分组"><a href="#一-匹配分组" class="headerlink" title="一. 匹配分组"></a>一. 匹配分组</h4><ol><li><p>|  或的意思 </p><p>re = /^\d?\d$|^100$/ </p></li><li><p>(ab) 将括号中字符作为一个分组 括号中的内容是一个整体去匹配</p><p>\w{4,20}@(163|qq|126|sina)\.(com|cn|net|org|edu){1,2}</p></li><li><p>提取电话号码或区号</p><p>“010-1234567”</p><p>re = “^(\d{3,4})-(\d{7})$”</p></li></ol><ol start="4"><li><p>“&lt;[^&gt;*]&gt;”   ???</p></li><li><p>\1 表示引用第一组正则 重复分组</p><p>re.match(“&lt;([\a-zA-Z0-9]+)&gt;.*&lt;/\1&gt;”)</p></li><li><p>给分组起别名 (?P&lt;name&gt;) ===&gt;(?P=name)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">r'&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;'</span>, <span class="string">'&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;'</span>)</span><br><span class="line">ret = re.match(<span class="string">r'&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/?P=name2&gt;&lt;/?P=name1&gt;'</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>一些方法</p><ol><li><p>match的使用</p><p>从需要匹配的字符串中的开始位置进行匹配 如果匹配成功返回match对象，否则返回None</p></li><li><p>search的使用</p><p>在其中进行查找匹配 只返回第一次匹配的结果</p><p>start() 返回开始第一次匹配成功的位置</p></li><li><p>findall 查找所有</p><p>返回的是列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.findall(<span class="string">r'\d+'</span>, <span class="string">"阅读次数9999次，转发次数8888, 评论次数:3次"</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">[<span class="string">"9999"</span>, <span class="string">'8888'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure></div></li><li><p>sub  替换所有</p><p>返回值是替换后的字符串</p><p>用法：re.sub(正则，新的内容，要替换的内容字符串)</p><p><code>re.sub(&quot;&lt;\[^&gt;*]&gt;|&amp;nbsp| |\n&quot;,html_str)</code></p><p>科大讯飞的分词技术 接口有吗</p></li><li><p>split 按照正则进行分割</p><p>把字符串按照正则进行分割，返回值是一个列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">":|\s"</span>, <span class="string">"email:info@163.com zhongshan lisi 123"</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>贪婪模式和非贪婪模式</p><p>贪婪默认  转为非贪婪 用？号</p><p><code>src=\&quot;(.*?)\&quot;</code></p><p>通过search方法 通过group(1)</p></li><li><p>r的作用：只针对\起作用，让其不再让其有转义作用</p></li></ol></li></ol><h4 id="IP-和域名"><a href="#IP-和域名" class="headerlink" title="IP 和域名"></a>IP 和域名</h4><h5 id="1-域名概念"><a href="#1-域名概念" class="headerlink" title="1.域名概念"></a>1.域名概念</h5><p>Domain Name</p><h5 id="2-为什么要有域名"><a href="#2-为什么要有域名" class="headerlink" title="2.为什么要有域名"></a>2.为什么要有域名</h5><pre><code>域名构成：由字母数字 中划线（-） 长度不超过255个字符</code></pre><h5 id="3-DNS服务器"><a href="#3-DNS服务器" class="headerlink" title="3.DNS服务器"></a>3.DNS服务器</h5><pre><code>本地DNS：是ip地址和域名的映射表</code></pre><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p><a href="/img/images/pic/QQ20180914-154502@2x.png" data-fancybox="group" data-caption="QQ20180914-154502@2x" class="fancybox"><img alt="QQ20180914-154502@2x" title="QQ20180914-154502@2x" data-src="/img/images/pic/QQ20180914-154502@2x.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="request协议"><a href="#request协议" class="headerlink" title="- request协议"></a>- request协议</h5><ol><li>请求行<ol><li>GET 请求方式 （此方式可以省略请求体）</li><li>/  请求服务器资源路径</li><li>HTTP/1.1 （http协议以及版本)</li></ol></li><li>请求头</li><li>空行  分割请求头和请求体</li><li>请求体</li></ol><p>Accept-Encoding:浏览器在协议层支持的数据压缩格式 gzip  deflate</p><p>Accept-charset ： 浏览器的支持的字符集</p><p>referer：前一次的加载的路径 判断站内和站外访问</p><p>Accept-Language:支持语言 以及相应权重</p><p>Cookie：浏览器缓存</p><p>user-agent:用户代理 爬虫重点考虑</p><h5 id="response协议"><a href="#response协议" class="headerlink" title="- response协议"></a>- response协议</h5><ol><li>响应行（状态行）<ol><li>协议版本号</li><li>状态码</li><li>状态描述</li></ol></li></ol><p><strong>注意:</strong></p><p>状态码和状态描述是一一对应的！</p><pre><code>状态代码有三种数字组成，第一个数字定义了响应的类别 且有五种可能取值：</code></pre><ul><li>1XX： 指示信息 表示请求已接受 继续处理</li><li>2XX：成功—表示请求已被成功接收 理解</li><li>3XX：重定向—要完成请求必须进行更进一步的操作</li><li>4XX：客户端错误—请求有语法错误或请求无法实现</li><li>5XX：服务器端错误–未能实现合法的请求</li></ul><p><a href="/img/images/pic/QQ20180914-154315@2x.png" data-fancybox="group" data-caption="QQ20180914-154315@2x" class="fancybox"><img alt="QQ20180914-154315@2x" title="QQ20180914-154315@2x" data-src="/img/images/pic/QQ20180914-154315@2x.png" src="/img/loading.gif" class="lazyload"></a></p><ol><li>响应头<ol><li>server  nginx </li><li>Date  访问文件的响应时间</li><li>last-modified  访问文件的最后一次修改时间</li><li>Content-Length 响应的字节数</li></ol></li><li>空行</li><li>响应主体（响应数据）Response中查看</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><a href="/img/images/pic/QQ20180914-154805@2x.png" data-fancybox="group" data-caption="QQ20180914-154805@2x" class="fancybox"><img alt="QQ20180914-154805@2x" title="QQ20180914-154805@2x" data-src="/img/images/pic/QQ20180914-154805@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="/img/images/pic/QQ20180914-154745@2x.png" data-fancybox="group" data-caption="QQ20180914-154745@2x" class="fancybox"><img alt="QQ20180914-154745@2x" title="QQ20180914-154745@2x" data-src="/img/images/pic/QQ20180914-154745@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p>for example：</p><p><strong>TCP网络助手与浏览器端模拟http协议通信</strong></p><h5 id="长连接与短链接"><a href="#长连接与短链接" class="headerlink" title="长连接与短链接"></a>长连接与短链接</h5><ol><li><p>在HTTP/1.0 默认使用短连接  <strong>浏览器和服务器每进行一次http操作，就建立一次连接，但任务结束就中断连接</strong>，如果客户端浏览器访问的某个html或其他类型的web页中包含其他web资源，如js文件，图像文件，css文件，当浏览器每遇到这样一个web资源，就会建立一个html会话</p></li><li><p>http1.1起 默认使用长连接 使用长连接的http协议，会在响应头有加入这行代码</p><p><code>Connection:keep-alive</code></p><p>每次连接都会有三次握手 每次断开和释放 就需要四次挥手，所以消耗资源和时间较多</p><p><strong>短连接 资源占用少 高并发的时候响应慢</strong></p><p><strong>长连接 建立后的速率高 高并发的时候服务器带宽占用过大，有可能无法建立连接  服务不可用</strong></p></li></ol><h5 id="模拟浏览器实现"><a href="#模拟浏览器实现" class="headerlink" title="模拟浏览器实现"></a>模拟浏览器实现</h5><h4 id="web静态服务器"><a href="#web静态服务器" class="headerlink" title="web静态服务器"></a>web静态服务器</h4><ul><li>返回指定页面</li><li>协程实现多任务服务器</li><li>面向对象封装</li><li>给服务器加上命令行参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器，生成器，协程以及应用</title>
      <link href="/2018/04/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-2-%E8%BF%AD%E4%BB%A3%E5%99%A8-%E7%94%9F%E6%88%90%E5%99%A8-%E5%8D%8F%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2018/04/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-4-2-%E8%BF%AD%E4%BB%A3%E5%99%A8-%E7%94%9F%E6%88%90%E5%99%A8-%E5%8D%8F%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><blockquote><p>迭代是访问集合元素的一种方式，迭代器是一个可以记住遍历位置的对象，迭代器只能往前不能后退</p></blockquote><h4 id="1-可迭代对象"><a href="#1-可迭代对象" class="headerlink" title="1.可迭代对象"></a>1.可迭代对象</h4><blockquote><p>向list  tuple  str等类型数据 可以使用for ..in去循环依次拿到数据，我们可以理解这些数据本身内部会有迭代方法 返回一个迭代器对象，供遍历调用（通过next方法去实现）</p></blockquote><p><a href="/img/images/pic/Snipaste_2018-09-23_08-07-24.png" data-fancybox="group" data-caption="Snipaste_2018-09-23_08-07-24" class="fancybox"><img alt="Snipaste_2018-09-23_08-07-24" title="Snipaste_2018-09-23_08-07-24" data-src="/img/images/pic/Snipaste_2018-09-23_08-07-24.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用各个迭代对象进行迭代测试</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="string">'hello'</span>:</span><br><span class="line">    print(value)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> &#123;<span class="string">"a"</span>:<span class="number">100</span>,<span class="string">"b"</span>:<span class="number">200</span>&#125;:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></div><h4 id="2-如何判断一个对象是否可以迭代"><a href="#2-如何判断一个对象是否可以迭代" class="headerlink" title="2.如何判断一个对象是否可以迭代"></a>2.如何判断一个对象是否可以迭代</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Tterable</span><br><span class="line"><span class="comment"># 列表 字符串  字典 数字</span></span><br><span class="line"><span class="comment"># 用 isinstance() 判断一个对象是否是iterable对象</span></span><br><span class="line">print(isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],Iterable))  <span class="comment"># True</span></span><br><span class="line">print(isinstance((<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>),Iterable))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(<span class="string">"hello"</span>,Iterable))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(&#123;&#125;,Iterable))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(<span class="number">100</span>,Iterable))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">c1 = MyClass()</span><br><span class="line">result = isinstance(c1, Iterable)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div><h4 id="可迭代对象-1"><a href="#可迭代对象-1" class="headerlink" title="可迭代对象"></a>可迭代对象</h4><h5 id="1-可迭代对象的本质"><a href="#1-可迭代对象的本质" class="headerlink" title="1.可迭代对象的本质"></a>1.可迭代对象的本质</h5><blockquote><p>在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据</p></blockquote><h5 id="2-iter-函数-与-next-函数"><a href="#2-iter-函数-与-next-函数" class="headerlink" title="2.iter()函数 与 next() 函数"></a>2.iter()函数 与 next() 函数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">li_iter = iter(li)</span><br><span class="line">next(li)</span><br><span class="line">next(li)</span><br><span class="line">next(li)</span><br><span class="line">next(li)  <span class="comment"># StopIteration 抛出异常</span></span><br></pre></td></tr></table></figure></div><p><a href="/img/images/pic/Snipaste_2018-09-23_10-15-10.png" data-fancybox="group" data-caption="Snipaste_2018-09-23_10-15-10" class="fancybox"><img alt="Snipaste_2018-09-23_10-15-10" title="Snipaste_2018-09-23_10-15-10" data-src="/img/images/pic/Snipaste_2018-09-23_10-15-10.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="3-如何判断一个对象是否是迭代器"><a href="#3-如何判断一个对象是否是迭代器" class="headerlink" title="3.如何判断一个对象是否是迭代器"></a>3.如何判断一个对象是否是迭代器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isinstance([],Iterator)  <span class="comment"># False</span></span><br><span class="line">isinstance(iter([]),Iterator)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><h4 id="迭代器应用：自定义列表"><a href="#迭代器应用：自定义列表" class="headerlink" title="迭代器应用：自定义列表"></a>迭代器应用：自定义列表</h4><p><a href="/img/images/pic/Snipaste_2018-09-23_14-44-19.png" data-fancybox="group" data-caption="Snipaste_2018-09-23_14-44-19" class="fancybox"><img alt="Snipaste_2018-09-23_14-44-19" title="Snipaste_2018-09-23_14-44-19" data-src="/img/images/pic/Snipaste_2018-09-23_14-44-19.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="comment"># 自定义列表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 定义构造方法  用于初始化实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个实例属性item 并初始化值为空</span></span><br><span class="line">        self.item = list()</span><br><span class="line">    <span class="comment"># 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addItem</span><span class="params">(self,data)</span>:</span></span><br><span class="line">        <span class="comment"># 把数据添加到实例属性中</span></span><br><span class="line">        self.item.append(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回迭代器对象</span></span><br><span class="line">        <span class="keyword">return</span> MyListIterator(self.item)</span><br><span class="line"><span class="comment"># 自定义迭代器类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListIterator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="comment"># 将传入的数据到当前类的实例属性</span></span><br><span class="line">        self.item = item</span><br><span class="line">    <span class="comment"># 初始化迭代器默认下标</span></span><br><span class="line">        self.current_index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 必须含有方法一： __iter__()    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="comment"># 必须含有方法二：__next__()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment"># 判断迭代器是否到了列表末尾</span></span><br><span class="line">        <span class="keyword">if</span> self.current_index &lt; len(self.item):</span><br><span class="line">            <span class="comment"># 获取列表元素值</span></span><br><span class="line">            data1 = self.item[self.current_index]</span><br><span class="line">            <span class="comment"># 让列表下标值 +1</span></span><br><span class="line">            self.current_index +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> data1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.addItem(<span class="string">'张三'</span>)</span><br><span class="line">    mylist.addItem(<span class="string">'李四'</span>)</span><br><span class="line">    mylist.addItem(<span class="string">'王五'</span>)</span><br><span class="line">    </span><br><span class="line">    result = isinstance(mylist, Iterable)</span><br><span class="line">    print(result)</span><br><span class="line">    </span><br><span class="line">    mylistInterator = iter(mylist)</span><br><span class="line">    print(next(mylistInterator))</span><br><span class="line">    print(next(mylistInterator))</span><br><span class="line">    print(next(mylistInterator))</span><br><span class="line">    <span class="comment"># print(next(mylistInterator))</span></span><br><span class="line">    <span class="comment"># 遍历自定义列表对象</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> mylist:</span><br><span class="line">        print(value)</span><br></pre></td></tr></table></figure></div><h5 id="for…in…循环的本质"><a href="#for…in…循环的本质" class="headerlink" title="for…in…循环的本质"></a>for…in…循环的本质</h5><blockquote><p>for item in Iterable循环的本质 是先通过iter() 获取可迭代对象Iterable的迭代器</p></blockquote><p><strong>原理</strong>:</p><ol><li>通过for循环获取迭代器</li><li>通过迭代器的next方法获取每一个数据</li><li>遇到StopIteration的异常后结束循环–处理异常</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.current_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.current_index &lt; self.num:</span><br><span class="line">            result = self.a</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.current_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">fib = Fibonacci(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fibIterator = iter(fib)</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"><span class="comment"># print(next(fibIterator))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 除了for循环可接收可迭代对象  list  和 tuple也可以</span></span><br><span class="line">mylist = list(Fibonacci(<span class="number">5</span>))</span><br><span class="line">print(mylist)</span><br><span class="line">mytuple = tuple(Fibonacci(<span class="number">5</span>))</span><br><span class="line">print(mytuple)</span><br></pre></td></tr></table></figure></div><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><blockquote><p>可以理解 生成器是迭代器的一种简洁的实现方式</p></blockquote><p><strong>创建生成器</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [x*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># [0,2,4,6,8]</span></span><br><span class="line">l = (x*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x76f6v4fdb0&gt;  生成器</span></span><br><span class="line"><span class="comment"># 可以使用next方法手动获取每一个数据</span></span><br><span class="line">next(l)</span><br><span class="line">next(l)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 也可以通过list或者tuple来获取迭代器 进而内部遍历实现获取每一个数据</span></span><br><span class="line">list(l)</span><br><span class="line">tuple(l)</span><br></pre></td></tr></table></figure></div><h5 id="创建生成器的方法2"><a href="#创建生成器的方法2" class="headerlink" title="创建生成器的方法2"></a>创建生成器的方法2</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    current_index = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> current_index &lt; n:</span><br><span class="line">        result = a</span><br><span class="line">        a,b = b,a</span><br><span class="line">        current_index += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'=======2========='</span>)</span><br><span class="line">        <span class="keyword">yield</span> result</span><br><span class="line">        print(<span class="string">'==========3======'</span>)</span><br><span class="line">fib = fibonacci(<span class="number">5</span>)</span><br><span class="line">value = next(fib)</span><br><span class="line">print(value)</span><br><span class="line">value = next(fib)</span><br><span class="line">print(value)</span><br><span class="line"><span class="comment"># 使用yield关键字的函数不再是函数，而是生成器</span></span><br><span class="line"><span class="comment"># yield关键字有两点作用：</span></span><br><span class="line"><span class="comment"># 1. 保存当前的运行状态 然后暂停执行 即将生成器函数挂起</span></span><br><span class="line"><span class="comment"># 2. 将yield关键字后面的表达式的值作为返回值返回 此时可以理解为起到了return的作用</span></span><br></pre></td></tr></table></figure></div><h5 id="生成器中使用return问题"><a href="#生成器中使用return问题" class="headerlink" title="生成器中使用return问题"></a>生成器中使用return问题</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1 = <span class="number">1</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        result = num1</span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line">f = fib(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(f))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        print(<span class="string">"错误信息"</span>, err)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">return 用于终止生成器  返回异常信息</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><p><strong>send唤醒</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    current_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_index &lt; n:</span><br><span class="line">        result = a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_index += <span class="number">1</span></span><br><span class="line">        params = <span class="keyword">yield</span> result</span><br><span class="line">        print(<span class="string">"params"</span>, params)</span><br><span class="line">        <span class="keyword">if</span> params == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'程序中断'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = fibonacci(<span class="number">5</span>)</span><br><span class="line">print(next(f))</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line">print(value)</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line">print(value)</span><br><span class="line">print(next(f))</span><br><span class="line">value = f.send(<span class="number">9</span>)</span><br><span class="line">print(value)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">send方法可以让生成器对象传入数据到内部 </span></span><br><span class="line"><span class="string">send方法具有和next 方法一样的唤醒生成器继续执行的功能</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><blockquote><p>称为 微线程  线程和进程是由程序触发系统接口 最后执行者是系统  而协程操作则是由程序猿控制的</p></blockquote><p><strong>协程的底层是借助生成器来实现的，但对于更复杂的耗时识别 需要经过高级封装</strong></p><p>协程存在的意义：线程通过cpu调度来实现线程切换，需要耗时，而协程则在一个线程内 实现多任务解阻塞 并且不受全局锁的影响</p><p>协程适用场景：当程序中存在大量的不需要cpu操作时，适用于协程</p><blockquote><p>线程间切换 不但是保存和恢复cpu上下文，还有处理和恢复线程cache数据，所以线程切换还是非常好性能的</p><p>协程 仅仅是切换cpu的上下文即可 单位时间内切换数百万次，系统都没问题</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'.....work1....'</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"....work2...."</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">w1 = work1()</span><br><span class="line">w2 = work2()</span><br></pre></td></tr></table></figure></div><h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><blockquote><p>greenlet是python的一个c扩展 旨在提供可自行调度的微线程即协程</p></blockquote><p><strong>安装</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install greenlet</span><br></pre></td></tr></table></figure></div><p><strong>greenlet</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"..test1.."</span>)</span><br><span class="line">        gr2.switch()  <span class="comment"># 切换到test2执行</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"..test2.."</span>)</span><br><span class="line">        gr1.switch()  <span class="comment"># 切换到test1执行</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"><span class="comment"># 切换到test1中运行</span></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure></div><h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><blockquote><p>可以看到 greenlet虽然可以实现多任务之间的切换 但需要手动设置切换来进行解阻塞，非常麻烦</p><p>更加强大的自动切换任务的模块 gevent</p></blockquote><p><strong>安装</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install gevent   <span class="comment"># 也可以在pycharm中配置</span></span><br></pre></td></tr></table></figure></div><p><strong>使用gevent</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent,time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"..test1.."</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"..test2.."</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 创建协程 并指派任务</span></span><br><span class="line">g1 = gevent.spwan(test1)</span><br><span class="line">g2 = gevent.spwan(test2)</span><br><span class="line"><span class="comment"># 等待协程结束之后 在结束主线程</span></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br></pre></td></tr></table></figure></div><blockquote><p>但是我们发现 程序并没有发现耗时操作 </p><p>需要使用 gevent.sleep(0.5)  替换time.sleep(0.5)</p></blockquote><blockquote><p>秉着对修改关闭 对扩展开放的原则  我们使用打补丁的方式 实现兼容</p></blockquote><p><strong>给程序打补丁</strong></p><blockquote><p>猴子补丁作用：</p><ol><li>运行时替换方法 属性</li><li>在不修改第三方代码的情况下增加原来不支持的功能</li><li>在运行时为内存中的对象增加patch而不是在磁盘的源代码中增加</li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加如下代码</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">mokey.patch_all()</span><br></pre></td></tr></table></figure></div><h5 id="查看当前执行任务的协程"><a href="#查看当前执行任务的协程" class="headerlink" title="查看当前执行任务的协程"></a>查看当前执行任务的协程</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gevent.getcurrent()</span><br></pre></td></tr></table></figure></div><hr><h4 id="进程，线程，协程对比"><a href="#进程，线程，协程对比" class="headerlink" title="进程，线程，协程对比"></a>进程，线程，协程对比</h4><p><strong>进程</strong>：是系统进行资源调度和分配的一个独立单位，每个进程有自己的独立内存空间，进程可以调用多核cpu实现多任务，进程间可以通过消息队列来通信，进程间切换，资源消耗较大，但比较稳定和安全</p><p><strong>线程</strong>：是cpu调度和分派的基本单位，基本不占用系统资源，线程之间可以共享内存，线程切换资源开销较少，没有真正意义上实现并行，而只是并发，同一时间内只能使用一个线程来执行，通过cpu时间片轮转机制（单核单线程cpu），或者多cpu之间轮询</p><p><strong>协程</strong>:是一种用户态的轻量级线程  只是在cpu内部进行一个上下文切换，几乎不占用系统资源，切换非常快</p><p><a href="/img/images/pic/Snipaste_2018-09-25_16-55-14.png" data-fancybox="group" data-caption="Snipaste_2018-09-25_16-55-14" class="fancybox"><img alt="Snipaste_2018-09-25_16-55-14" title="Snipaste_2018-09-25_16-55-14" data-src="/img/images/pic/Snipaste_2018-09-25_16-55-14.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进程是系统资源分配的独立单位</span><br><span class="line">线程是cpu调度和分派的基本单位</span><br><span class="line">多进程，多线程根据cpu核数不一样 可能是并行的，但是写成诗在一个线程中 所以是并发???</span><br></pre></td></tr></table></figure></div><h4 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h4><p><strong>下载多张图片</strong></p><p><a href="/img/images/pic/Snipaste_2018-09-25_20-10-56.png" data-fancybox="group" data-caption="Snipaste_2018-09-25_20-10-56" class="fancybox"><img alt="Snipaste_2018-09-25_20-10-56" title="Snipaste_2018-09-25_20-10-56" data-src="/img/images/pic/Snipaste_2018-09-25_20-10-56.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># 导入猴子补丁</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="comment"># 调用patch_all方法 识别耗时操作</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span><span class="params">(img_url, img_name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 抓取图片地址</span></span><br><span class="line">        response  = urllib.request.urlopen(img_url)</span><br><span class="line">        <span class="comment"># 打开图片文件</span></span><br><span class="line">        <span class="keyword">with</span> open(img_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                img_data = response.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> img_data:</span><br><span class="line">                    f.write(img_data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'文件%s下载失败 %s'</span>% (img_name, str(e))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'文件%s下载成功'</span>%img_name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">img_url1 = <span class="string">''</span></span><br><span class="line">    img_url2 = <span class="string">''</span></span><br><span class="line">    img_url3 = <span class="string">''</span> </span><br><span class="line">    </span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(download_img, img_url1,<span class="string">'1.jpg'</span>),</span><br><span class="line">        gevent.spawn(download_img, img_url2,<span class="string">'2.jpg'</span>),</span><br><span class="line">        gevent.spawn(download_img, img_url3,<span class="string">'3.jpg'</span>) </span><br><span class="line">    ])</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程通信，进程池以及迭代器</title>
      <link href="/2018/03/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-29-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2018/03/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-29-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="线程和进程的对比"><a href="#线程和进程的对比" class="headerlink" title="线程和进程的对比"></a>线程和进程的对比</h3><ul><li><p>功能：</p><ul><li>进程，能完成多任务，比如一台电脑上能够同时运行多个qq</li><li>线程，能够完成多任务，比如一个qq中的多个聊天窗口</li></ul><p><a href="/img/images/pic/QQ20180913-202154@2x.png" data-fancybox="group" data-caption="QQ20180913-202154@2x" class="fancybox"><img alt="QQ20180913-202154@2x" title="QQ20180913-202154@2x" data-src="/img/images/pic/QQ20180913-202154@2x.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>定义的不同</p><ul><li>进程是<strong>系统进行资源分配和调度</strong>的一个独立单位</li><li>线程是进程的一个实体，是<strong>cpu调度和分派的基本单位</strong>，它比进程更小，线程基本上不拥有系统资源，它可以与在同一进程中的其他线程共享进程所拥有的全部资源</li></ul></li><li><p>区别</p><ul><li>一个程序至少有一个进程，一个进程至少有一个线程</li><li>线程的划分尺度小于进程（资源比进程少），使得多线程程序的并发性高</li></ul><p><a href="/img/images/pic/QQ20180913-202713@2x.png" data-fancybox="group" data-caption="QQ20180913-202713@2x" class="fancybox"><img alt="QQ20180913-202713@2x" title="QQ20180913-202713@2x" data-src="/img/images/pic/QQ20180913-202713@2x.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>进程与 线程的选择取决于以下几点：</p></blockquote><blockquote><ol><li>频繁创建销毁的优先使用线程，进程创建和销毁的代价很大</li><li>线程切换速度快，所以需要大量计算时用线程，还有耗时操作使用线程可提高程序响应</li><li>多机分布用进程，多核分布用线程 对cpu的使用效率上线程更占优</li><li>并行操作使用线程， c/s 架构的服务器端并发线程响应用户请求</li><li>更稳定和安全 选择进程， 需要速度选择线程</li></ol></blockquote></li></ul><h3 id="消息队列–基本操作"><a href="#消息队列–基本操作" class="headerlink" title="消息队列–基本操作"></a>消息队列–基本操作</h3><blockquote><p>进程间通信，可以通过消息队列来实现</p></blockquote><h5 id="1-Queue介绍"><a href="#1-Queue介绍" class="headerlink" title="1.Queue介绍"></a>1.Queue介绍</h5><p><strong>创建并简单使用队列</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入多进程模块</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建消息队列</span></span><br><span class="line"><span class="comment"># 参数为最大接收的消息数量  返回消息队列对象  不指定参数 则默认最大 无上限</span></span><br><span class="line">queue = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向消息队列中放入内容</span></span><br><span class="line">queue.put(<span class="number">1</span>)  <span class="comment"># 可以放置任何数据类型</span></span><br><span class="line">queue.put(<span class="string">'hello'</span>)</span><br><span class="line">queue.put([<span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># queue.put(23)  # 当队列已满，无法继续放入新的值，如果再次放入，程序会进行等待状态（等待队列取出值后再放入）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># queue.put_nowait(24)  # # 当队列已满，无法继续放入新的值,如果再次放入，程序不会等待，直接报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印队列对象</span></span><br><span class="line">print(queue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line">print(value)</span><br><span class="line"><span class="comment"># 获取第2个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line">print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第3个消息的值</span></span><br><span class="line">value = queue.get()</span><br><span class="line">print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第4个消息的值</span></span><br><span class="line">value = queue.get()  <span class="comment"># 当队列已经空了，无法再取值，如果再取值，默认会进入等待状态（等待队列再放入元素，再取）</span></span><br><span class="line">print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># value = queue.get_nowait()  # 当队列已经空了，无法再取值，get_nowait() 表示不等待，直接报错</span></span><br><span class="line"><span class="comment"># print(value)</span></span><br><span class="line"></span><br><span class="line">print(queue)</span><br><span class="line">print(<span class="number">123</span>)</span><br></pre></td></tr></table></figure></div><h5 id="2消息队列中的常见判断"><a href="#2消息队列中的常见判断" class="headerlink" title="2消息队列中的常见判断"></a>2消息队列中的常见判断</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    q.put(<span class="number">3</span>)</span><br><span class="line">    q.put(<span class="number">9</span>)</span><br><span class="line">    <span class="comment"># q.put_nowait(5)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(q.qsize()) # 这个方法在mac系统上无效 会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 消息队列中的消息是否已满 如果满则返回True  否则返回False</span></span><br><span class="line">    <span class="keyword">if</span> q.full():</span><br><span class="line">        print(<span class="string">"已满"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'未满'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># q.get()</span></span><br><span class="line">    <span class="comment"># q.get()</span></span><br><span class="line">    <span class="comment"># q.get_nowait()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 坑 当不执行get方法的时候，判断empty是否为空 显示已空 此时需要让程序休眠一会儿</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> q.empty():</span><br><span class="line">        print(<span class="string">"已空"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"未空"</span>)</span><br></pre></td></tr></table></figure></div><h5 id="3-进程间通信思路"><a href="#3-进程间通信思路" class="headerlink" title="3.进程间通信思路"></a>3.进程间通信思路</h5><p><a href="/img/images/pic/QQ20180913-222859@2x.png" data-fancybox="group" data-caption="QQ20180913-222859@2x" class="fancybox"><img alt="QQ20180913-222859@2x" title="QQ20180913-222859@2x" data-src="/img/images/pic/QQ20180913-222859@2x.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_work</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> queue.full():</span><br><span class="line">            print(<span class="string">'队列已满'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        queue.put_nowait(i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_work</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.empty():</span><br><span class="line">            print(<span class="string">'队列已空'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        result = queue.get()</span><br><span class="line">        print(<span class="string">"正在读取"</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建一个消息队列</span></span><br><span class="line">    queue = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建两个进程</span></span><br><span class="line">    p1 = multiprocessing.Process(target=write_work, args=(queue, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    <span class="comment"># 先让p1的进程走完任务</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2 = multiprocessing.Process(target=read_work, args=(queue, ))</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure></div><h4 id="进程池的概述Pool"><a href="#进程池的概述Pool" class="headerlink" title="进程池的概述Pool"></a>进程池的概述Pool</h4><h5 id="1-进程池"><a href="#1-进程池" class="headerlink" title="1.进程池"></a>1.进程池</h5><blockquote><p>当需要创建的子进程较多时，手动创建进程工作量巨大，可以利用多进程的Pool方法创建进程池</p></blockquote><p><a href="/img/images/pic/QQ20180913-233944@2x.png" data-fancybox="group" data-caption="QQ20180913-233944@2x" class="fancybox"><img alt="QQ20180913-233944@2x" title="QQ20180913-233944@2x" data-src="/img/images/pic/QQ20180913-233944@2x.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>进程池可以设定一个最大进程数，当达到最大进程数之后，再创建程序执行该请求，则会进入等待，直到池中有进程结束，才能接受新的任务</p></blockquote><h5 id="2-进程池的实现方式"><a href="#2-进程池的实现方式" class="headerlink" title="2.进程池的实现方式"></a>2.进程池的实现方式</h5><ol><li><p>同步方式：pool.apply()</p><p><a href="/img/images/pic/QQ20180913-234537@2x.png" data-fancybox="group" data-caption="QQ20180913-234537@2x" class="fancybox"><img alt="QQ20180913-234537@2x" title="QQ20180913-234537@2x" data-src="/img/images/pic/QQ20180913-234537@2x.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>异步方式pool.apply_async(copy_work)</p><p><a href="/img/images/pic/QQ20180913-234553@2x.png" data-fancybox="group" data-caption="QQ20180913-234553@2x" class="fancybox"><img alt="QQ20180913-234553@2x" title="QQ20180913-234553@2x" data-src="/img/images/pic/QQ20180913-234553@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p>异步非阻塞方式为并行执行，阻塞方式必须进程依次执行</p></li></ol><h5 id="3-核心方法"><a href="#3-核心方法" class="headerlink" title="3.核心方法"></a>3.核心方法</h5><p>multiprocessing.Pool()</p><h5 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_work</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'copying...'</span>, multiprocessing.current_process().pid)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pool.apply(copy_work)</span></span><br><span class="line">        pool.apply_async(copy_work)</span><br><span class="line">    <span class="comment"># 关闭进程池 使其不再接收新的任务</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="comment"># 异步方式的情况下 让主进程等待子进程全部结束之后再结束</span></span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></div><h5 id="4-进程池中的Queue"><a href="#4-进程池中的Queue" class="headerlink" title="4.进程池中的Queue"></a>4.进程池中的Queue</h5><blockquote><p>再进程池中 创建消息队列 进行进程池中的进程间通信 </p><p>使用multiprocessing.Manager().Queue()</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> queue.full():</span><br><span class="line">            print(<span class="string">"消息队列已满"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        queue.put(i)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> queue.empty():</span><br><span class="line">            print(<span class="string">"消息队列已空"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        value = queue.get()</span><br><span class="line">        print(<span class="string">"正在取值"</span>, value)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)</span><br><span class="line">    queue = multiprocessing.Manager().Queue(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># pool.apply(write, args=(queue,))</span></span><br><span class="line">    <span class="comment"># pool.apply(read, args=(queue,))</span></span><br><span class="line">    <span class="comment"># pool.close()</span></span><br><span class="line"></span><br><span class="line">    result = pool.apply_async(write, args=(queue, ))</span><br><span class="line">    <span class="comment"># 进程池中的进程如果执行异步任务  需要一个任务执行之后 再执行另一个任务 此时获取当前异步执行任务对象 然后执行wait方法</span></span><br><span class="line">    result.wait()</span><br><span class="line">    pool.apply_async(read, args=(queue, ))</span><br><span class="line">    <span class="comment"># 将进程池关闭 不再接收新的任务</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="comment"># 异步执行任务的时候需要让主进程 等待子进程结束之后 再结束</span></span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><p><a href="/img/images/pic/QQ20180914-001233@2x.png" data-fancybox="group" data-caption="QQ20180914-001233@2x" class="fancybox"><img alt="QQ20180914-001233@2x" title="QQ20180914-001233@2x" data-src="/img/images/pic/QQ20180914-001233@2x.png" src="/img/loading.gif" class="lazyload"></a></p><h4 id="文件拷贝器"><a href="#文件拷贝器" class="headerlink" title="文件拷贝器"></a>文件拷贝器</h4><h5 id="1-案例介绍"><a href="#1-案例介绍" class="headerlink" title="1.案例介绍"></a>1.案例介绍</h5><p><a href="/img/images/pic/QQ20180914-080054@2x.png" data-fancybox="group" data-caption="QQ20180914-080054@2x" class="fancybox"><img alt="QQ20180914-080054@2x" title="QQ20180914-080054@2x" data-src="/img/images/pic/QQ20180914-080054@2x.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><blockquote><p>案例的目标：</p><p>源文件———&gt; 目标文件</p><p>./test———&gt; /Users/ZaG/Desktop/test</p><ol><li>定义好源文件和目标文件路径</li><li>拷贝多个文件 的工作函数</li><li>通过创建进程池 设定三个进程 实现异步拷贝</li><li>注意关闭进程池以及join方法的使用</li><li>这里没有进程池里面的进程间通信，也没有异步任务的先后执行排列问题</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载器，tcp，udp详解，线程和进程</title>
      <link href="/2018/03/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-22-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8%EF%BC%8Ctcp%EF%BC%8Cudp%E8%AF%A6%E8%A7%A3%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/03/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-22-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8%EF%BC%8Ctcp%EF%BC%8Cudp%E8%AF%A6%E8%A7%A3%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="案例：文件下载器"><a href="#案例：文件下载器" class="headerlink" title="案例：文件下载器"></a>案例：文件下载器</h4><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol><li><p>客户端</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实现思路：</span><br><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="number">2.</span>创建套接字</span><br><span class="line"><span class="number">3.</span>建立和服务器的连接</span><br><span class="line"><span class="number">4.</span>接收用户输入的文件名</span><br><span class="line"><span class="number">5.</span>发送文件名到服务器</span><br><span class="line"><span class="number">6.</span>创建文件，准备接收服务器返回的文件数据</span><br><span class="line"><span class="number">7.</span>保存文件数据</span><br><span class="line"><span class="number">8.</span>关闭套接字</span><br></pre></td></tr></table></figure></div></li><li><p>服务端</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">实现思路</span><br><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="number">2.</span>创建套接字</span><br><span class="line"><span class="number">3.</span>绑定地址和端口</span><br><span class="line"><span class="number">4.</span>开始监听，设置套接字为被动监听模式</span><br><span class="line"><span class="number">5.</span>等待客户端连接 （如果有客户连接 会创建新的套接字）</span><br><span class="line"><span class="number">6.</span>接收客户端发来的文件名</span><br><span class="line"><span class="number">7.</span>根据文件名进行读取文件数据</span><br><span class="line"><span class="number">8.</span>将读取的文件数据发送给客户端（循环）</span><br><span class="line"><span class="number">9.</span>关闭和客户端的连接</span><br><span class="line"><span class="number">10.</span>关闭服务器</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="案例：文件下载器-1"><a href="#案例：文件下载器-1" class="headerlink" title="案例：文件下载器"></a>案例：文件下载器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="comment"># 导入套接字</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字</span></span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 设置地址重用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">""</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务器侦听状态</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收多客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    new_tcp_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">    print(<span class="string">"【新客户端来了】"</span>, ip_port)</span><br><span class="line"></span><br><span class="line">    recv_data = new_tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_name = recv_data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        file_name = recv_data.decode(encoding=<span class="string">"gbk"</span>, errors=<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"发来的文件名是:"</span>, file_name)</span><br><span class="line">    <span class="comment"># 根据文件名 打开对应的文件</span></span><br><span class="line">    <span class="comment"># 使用try  except</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(file_name, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                con = f.read(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> con:</span><br><span class="line">                    new_tcp_client_socket.send(con)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"客户端已经断开"</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        new_tcp_client_socket.send(<span class="string">'err：文件找不到'</span>.encode())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_tcp_client_socket.send(<span class="string">'suc：文件下载完'</span>.encode())</span><br><span class="line"></span><br><span class="line">    new_tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器可以不用关闭</span></span><br><span class="line"><span class="comment"># tcp_server_socket.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============</span></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_fun</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = data.decode(encoding=<span class="string">"gbk"</span>, errors=<span class="string">"ignore"</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcp_client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">tcp_client_socket.connect((<span class="string">"192.168.162.163"</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">file_name = input(<span class="string">"请输入您要下载的文件名"</span>)</span><br><span class="line">tcp_client_socket.send(file_name.encode())</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">"/Users/ZaG/Desktop/test/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(file_path + file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        data = dec_fun(recv_data)</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">if</span> data[:<span class="number">3</span>] == <span class="string">"err"</span> <span class="keyword">or</span> data[:<span class="number">3</span>] == <span class="string">"suc"</span>:</span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> data:</span><br><span class="line">            f.write(data.encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure></div><h5 id="tcp3次握手"><a href="#tcp3次握手" class="headerlink" title="tcp3次握手"></a>tcp3次握手</h5><blockquote><p>标志位 SYN 连接请求 ACK 确认 FIN 关闭连接</p><p>序号： seq：报文序号   ack 确认号</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tcp三次握手 就是建立tcp连接的过程，在socket编程中，由客户端执行connect来触发</span><br><span class="line">第一次握手：</span><br><span class="line">客户端发送syn连接请求SYN=<span class="number">1</span>  随机序号seq=j  随机客户端进入syn_sent状态 等待server确认</span><br><span class="line">(SYN=<span class="number">1</span>,seq=j)</span><br><span class="line">第二次握手：</span><br><span class="line">服务端 接收到数据包之后， 在SYN=<span class="number">1</span>后添加确认ACK=<span class="number">1</span>，发送确认号为ack=j+<span class="number">1</span>  随机产生seq序号seq=k   进行传输</span><br><span class="line">(SYN=<span class="number">1</span>,ACk=<span class="number">1</span>,ack=j+<span class="number">1</span>,seq=k )</span><br><span class="line">第三次握手：</span><br><span class="line">客户端收到数据包之后， 检查ack等于j+<span class="number">1</span> ACK为<span class="number">1</span> </span><br><span class="line">    将ACK=<span class="number">1</span>确认 以及确认号ack=k+<span class="number">1</span></span><br><span class="line">    (ACK=<span class="number">1</span>,ack=k+<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><h5 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client --------------------server</span><br><span class="line">FIN=1，seq=u ---&gt; 关闭连接请求 和随机序号</span><br><span class="line">    确认ACK=<span class="number">1</span>，报文序号确认ack=u+<span class="number">1</span> 随机seq&lt;---ACK=<span class="number">1</span> seq=v ack=u+<span class="number">1</span></span><br><span class="line">    &lt;----- FIN=<span class="number">1</span>，ACK=<span class="number">1</span>， seq=w  ack=u+<span class="number">1</span> </span><br><span class="line">    等待2MSL时间）    收到确认 ACK=1，seq=u+1,ack=w+1-----&gt;</span><br><span class="line">    注意：等待网络延迟产生的被动方超时重传的ACK报文</span><br></pre></td></tr></table></figure></div><h4 id="wireshark抓包工具"><a href="#wireshark抓包工具" class="headerlink" title="wireshark抓包工具"></a>wireshark抓包工具</h4><h4 id="多任务介绍"><a href="#多任务介绍" class="headerlink" title="多任务介绍"></a>多任务介绍</h4><blockquote><p>多任务处理是指用户可以在同一时间内运行多个应用程序，每个应用程序被称作一个任务  window是支持多任务的操作系统</p></blockquote><p><strong>并发</strong></p><blockquote><p>指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现多个任务一起执行</p></blockquote><p><strong>并行</strong></p><blockquote><p>指的是任务数小于等于cpu核心数  任务真正的一起执行</p></blockquote><h5 id="使用threading模块"><a href="#使用threading模块" class="headerlink" title="使用threading模块"></a>使用threading模块</h5><p><strong>单线程执行</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'我错了'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>：</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        saySorry()</span><br></pre></td></tr></table></figure></div><p><strong>多线程执行</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"亲爱的，我错了"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t1 = threading.Thread(target=saySorry)</span><br><span class="line">        t1.start()</span><br><span class="line">    print(<span class="string">'我是主线程'</span>)</span><br><span class="line"><span class="comment"># 1.多线程并发操作 花费时间更少</span></span><br><span class="line"><span class="comment"># 2.当调用start() 才会真正的创建线程，并开始执行</span></span><br><span class="line"><span class="comment"># 3.每个线程都有一个唯一标识符</span></span><br><span class="line"><span class="comment"># 4.主线程 mainThread 主程序入口 </span></span><br><span class="line"><span class="comment"># 5.子线程 Thread-x 使用threading.Thread()创建</span></span><br><span class="line"><span class="comment"># 6.线程数量：主线程+子线程数</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'正在跳舞....%d'</span>%i)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'.....开始....%s'</span>%ctime())</span><br><span class="line">    </span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(<span class="string">'.....结束....%s'</span>%ctime())</span><br></pre></td></tr></table></figure></div><h5 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h5><p><code>threading.enumerate()</code></p><h5 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h5><p><code>threading.current_thread()</code></p><h5 id="线程参数以及顺序"><a href="#线程参数以及顺序" class="headerlink" title="线程参数以及顺序"></a>线程参数以及顺序</h5><blockquote><p>多线程的同一时间的执行顺序取决于cpu时间片轮转的调度算法，我们可以认为是随机的</p></blockquote><h5 id="线程传递参数"><a href="#线程传递参数" class="headerlink" title="线程传递参数"></a>线程传递参数</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1  使用args</span></span><br><span class="line">t1 = threading.Thread(target=sing, args=(<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>))</span><br><span class="line"><span class="comment"># 方法2  使用kwargs</span></span><br><span class="line">t1 = threading.Thread(target=sing,kwargs, kwargs=&#123;<span class="string">"a"</span>:<span class="number">10</span>, <span class="string">"b"</span>: <span class="number">100</span>, <span class="string">"c"</span>: <span class="number">1000</span>&#125;)</span><br><span class="line"><span class="comment"># 方法3 使用混合方法</span></span><br><span class="line">t1 = threading.Thread(target=sing, args=(<span class="number">10</span>,), kwargs=&#123;<span class="string">"c"</span>:<span class="number">1000</span>, <span class="string">"b"</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">"正在执行..."</span>, i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    t1 = threading.Thread(target=work1)</span><br><span class="line">    t1 = setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'Game Over'</span>)</span><br><span class="line">    </span><br><span class="line">    exit()  <span class="comment"># 退出无效 有别的子线程继续执行 </span></span><br><span class="line">    <span class="comment"># 想让主线程结束的时候 没有执行完成的子线程一起结束 这就是线程守护</span></span><br></pre></td></tr></table></figure></div><h5 id="设置线程守护"><a href="#设置线程守护" class="headerlink" title="设置线程守护"></a>设置线程守护</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为守护线程 （如果主线程结束了 也随之结束）</span></span><br><span class="line">线程.setDaemon(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><h5 id="自定义线程类"><a href="#自定义线程类" class="headerlink" title="自定义线程类"></a>自定义线程类</h5><blockquote><p>通过自定义封装的线程类 可以实现功能扩展 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 继承threading.Thread</span></span><br><span class="line"><span class="comment"># 2. 重写run方法</span></span><br><span class="line"><span class="comment"># 3. 通过实例线程对象 启动线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.num = num</span><br><span class="line">    <span class="comment"># 重写父类的run 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            print(<span class="string">"正在执行run方法:"</span>, self.num)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mythread = MyThread(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    mythread.start()</span><br></pre></td></tr></table></figure></div><blockquote><p>python中threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法，实现功能扩展，当线程获得启动执行时，start就会调用run方法</p></blockquote><h4 id="多线程–共享全局变量"><a href="#多线程–共享全局变量" class="headerlink" title="多线程–共享全局变量"></a>多线程–共享全局变量</h4><h5 id="1-多个线程方法中可以共用全局变量"><a href="#1-多个线程方法中可以共用全局变量" class="headerlink" title="1.多个线程方法中可以共用全局变量"></a>1.多个线程方法中可以共用全局变量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(nums)</span>:</span></span><br><span class="line">    nums.append(<span class="number">44</span>)</span><br><span class="line">    print(<span class="string">"----in work1---"</span>, nums)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(nums)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"---in work2---"</span>, nums)</span><br><span class="line">g_nums = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">t1 = Thread(target=work1, args=(g_nums,))</span><br><span class="line">t1.start()</span><br><span class="line">t2 = Thread(target=work2, args=(g_nums,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一个进程内的所有的线程共享全局变量 很方便在多个线程间共享数据</span></span><br><span class="line"><span class="comment"># 缺点是 线程是对全局变量随意更改，可以造成多线程之间对全局变量的混乱（即线程非安全）</span></span><br></pre></td></tr></table></figure></div><h5 id="多线程共享全局变量带来的问题"><a href="#多线程共享全局变量带来的问题" class="headerlink" title="多线程共享全局变量带来的问题"></a>多线程共享全局变量带来的问题</h5><blockquote><p>如果多个线程同时对同一全局变量操作，会出现资源竞争问题，从而数据结果会不正确</p></blockquote><h5 id="解决方法一-join"><a href="#解决方法一-join" class="headerlink" title="解决方法一 join()"></a>解决方法一 join()</h5><blockquote><p>join方法：一个线程在执行过程中 要调用另外一个线程，并且等到其完成以后才能接着执行</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = threading.Thread(target=test, args=(<span class="number">10000</span>, ))</span><br><span class="line">t1.start()</span><br><span class="line"><span class="comment"># t1执行完成之后在执行t2线程</span></span><br><span class="line">t1.join()</span><br></pre></td></tr></table></figure></div><p><strong>同步</strong>: 多任务， 多个任务之间执行的时候 要求有先后顺序，只有一个主线</p><p><strong>异步</strong>: 多个任务之间执行没有先后顺序，可以同时运行，执行的先后顺序不会有什么影响，存在的多条运行主线</p><p><a href="/img/images/pic/QQ20180909-165908@2x.png" data-fancybox="group" data-caption="QQ20180909-165908@2x" class="fancybox"><img alt="QQ20180909-165908@2x" title="QQ20180909-165908@2x" data-src="/img/images/pic/QQ20180909-165908@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p>A线程获得了g_num 的使用权 并且加上了锁机制，此时B C线程无法使用g_nums ， B  C线程 必须等到A线程不再使用g_nums 并且解锁后，才能使用g_nums</p><p><strong>互斥锁</strong></p><p>当多个线程几乎同时修改某一个共享数据 需要同步控制</p><p>最简单的线程同步控制 互斥锁</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：</p><p>好处：确保了某段关键代码只能由一个线程从头到尾完整的执行</p><p>坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大的下降了</p><p>由于可以存在多个锁，不同的线程持有多个锁，试图获取对象持有的锁时，可能会造成死锁</p></blockquote><h4 id="案例：多任务版udp聊天器"><a href="#案例：多任务版udp聊天器" class="headerlink" title="案例：多任务版udp聊天器"></a>案例：多任务版udp聊天器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_fun</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        data = data.decode(encoding=<span class="string">"gbk"</span>, errors=<span class="string">"ignore"</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_fun</span><span class="params">(server)</span>:</span></span><br><span class="line"></span><br><span class="line">    ip = input(<span class="string">"请输入您要发的ip地址："</span>) <span class="keyword">or</span> <span class="string">"192.168.162.61"</span></span><br><span class="line"></span><br><span class="line">    port = int(input(<span class="string">"请输入您要发的端口："</span>)) <span class="keyword">if</span> len(input(<span class="string">"请输入您要发的端口："</span>)) <span class="keyword">else</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    content = input(<span class="string">"请输入您要发的信息："</span>)</span><br><span class="line">    print(<span class="string">"你选择的是&#123;&#125;,端口:&#123;&#125;,内容为:&#123;&#125;"</span>.format(ip, port, content))</span><br><span class="line">    content = <span class="string">"\n"</span> + content</span><br><span class="line">    server.sendto(content.encode(),(ip, port))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_fun</span><span class="params">(server)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_data, ip_port = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            data = dec_fun(recv_data)</span><br><span class="line">            print(<span class="string">'【新客户端发信息来了】'</span>, ip_port, <span class="string">'消息是:'</span>, data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"客户端可能中断"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    udp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    udp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    udp_server_socket.bind((<span class="string">""</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=recv_fun, args=(udp_server_socket,))</span><br><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">20</span>)</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">6</span>, <span class="string">'1 发送消息'</span>, <span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">6</span>, <span class="string">'2 退出系统'</span>, <span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">        print(<span class="string">"*"</span> * <span class="number">20</span>)</span><br><span class="line">        nums = input(<span class="string">"请输入您的选择:"</span>)</span><br><span class="line">        <span class="keyword">if</span> nums == <span class="string">"1"</span>:</span><br><span class="line">            send_fun(udp_server_socket)</span><br><span class="line">        <span class="keyword">elif</span> nums == <span class="string">"2"</span>:</span><br><span class="line">            print(<span class="string">"已经退出系统"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"错误输入"</span>)</span><br></pre></td></tr></table></figure></div><h4 id="udp广播"><a href="#udp广播" class="headerlink" title="udp广播"></a>udp广播</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.sendto(<span class="string">"I'm ZaG"</span>.encode(),(<span class="string">"255.255.255.255"</span>,<span class="number">3009</span>))</span><br><span class="line"></span><br><span class="line">udp_boradcast_socket.close()</span><br></pre></td></tr></table></figure></div><h4 id="进程以及状态"><a href="#进程以及状态" class="headerlink" title="进程以及状态"></a>进程以及状态</h4><h5 id="1-进程概念"><a href="#1-进程概念" class="headerlink" title="1.进程概念"></a>1.进程概念</h5><blockquote><p>进程是资源分配的最小单位  程序隔离的边界</p></blockquote><p><strong>程序是固定不变的，而进程会根据运行需要，让操作系统动态分配各种资源</strong></p><p><a href="/img/QQ20180913-010318@2x.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/img/QQ20180913-010318@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p>cpu时间片轮转，不同时间切换执行不同进程，但是进程比较耗时，就引进轻量级进程，一个进程包含多个线程</p><h5 id="2-进程的状态"><a href="#2-进程的状态" class="headerlink" title="2.进程的状态"></a>2.进程的状态</h5><p>就绪态：运行的条件都已经满足，正在等cpu执行</p><p>执行态：cpu正在执行其功能</p><p>等待态：等待某些条件满足，例如一个程序sleep 此时处理等待态</p><h5 id="3-创建子进程"><a href="#3-创建子进程" class="headerlink" title="3.创建子进程"></a>3.创建子进程</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'work1---'</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=work)</span><br><span class="line">    p1.start()</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'这是主进程'</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></div><p><strong>实例对象的常用方法</strong></p><p>start(): 启动子进程</p><p>is_alive():判断进程子进程是否还在活着</p><p>join(timeout): 是否等待子进程执行结束，或等待多少秒</p><p>terminate(): 不管任务是否完成，立即终止子进程</p><h5 id="进程名称，-pid"><a href="#进程名称，-pid" class="headerlink" title="进程名称， pid"></a>进程名称， pid</h5><p><strong>进程名称获取</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing.current_process()</span><br></pre></td></tr></table></figure></div><p><strong>进程pid</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 使用multiprocessing.current_process().pid</span></span><br><span class="line">multiprocessing.current_process().pid</span><br><span class="line"><span class="comment"># 2 使用import os 模块的getpid()</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()</span><br></pre></td></tr></table></figure></div><p><strong>获取父id</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getppid() 获取父进程id</span><br></pre></td></tr></table></figure></div><p><strong>进程参数，全局变量问题</strong></p><p>和线程传递参数基本一致</p><p><strong>进程间不共享全局变量</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line">num =<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"work num= %d"</span>%num)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"work2 num=%s"</span>%num)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=work,name=<span class="string">"MyProcess"</span>)</span><br><span class="line">    p1.start()</span><br><span class="line">    </span><br><span class="line">    p2 = multiprocessing.Process(group=<span class="literal">None</span>, target=work,name=<span class="string">"MyProcess2"</span>)</span><br><span class="line">    p2.start()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 结果： work num =101  work2 num =100</span></span><br></pre></td></tr></table></figure></div><h5 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_process</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'子进程运行中'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p1 = multiprocessing.Process(group=<span class="literal">None</span>, target=sub_process, name=<span class="string">'p1'</span>)</span><br><span class="line">    <span class="comment"># 第一种方法</span></span><br><span class="line">    p1.daemon = <span class="literal">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"OVER"</span>)</span><br><span class="line">    <span class="comment"># 第二种方法</span></span><br><span class="line">    p1.terminate()</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见ftp，ssh搭建，网络基础知识，tcp，udp，socket编程</title>
      <link href="/2018/03/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-17-%E5%B8%B8%E8%A7%81ftp-ssh%E6%90%AD%E5%BB%BA-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-tcp-udp-socket%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/03/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-17-%E5%B8%B8%E8%A7%81ftp-ssh%E6%90%AD%E5%BB%BA-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-tcp-udp-socket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Linux-指令以及网络编程"><a href="#Linux-指令以及网络编程" class="headerlink" title="Linux 指令以及网络编程"></a>Linux 指令以及网络编程</h3><h4 id="1-ubuntu软件安装与卸载"><a href="#1-ubuntu软件安装与卸载" class="headerlink" title="1.ubuntu软件安装与卸载"></a>1.ubuntu软件安装与卸载</h4><ol><li><p>make install 源代码安装包  也称：tarball</p><p>优点：软件根据实际的机器硬件进行配置和编译，性能最好，最稳定</p><p>缺点：需要使用源代码编译 安装 比较麻烦</p><blockquote><ol><li>./configure  #这个步骤是建立makefile文件</li><li>makeclean  消除一下 上次编译过的目标文件之类的，不是必须 但保险起见做一下</li><li>make  # 根据makefile当中的默认工作进行编译行为，主要进行gcc 将源码编译成可执行目标文件，并放置在当前目录下</li><li>make install  一般是最后的安装步骤， make会依据makefile关于install的选项，将上个步骤所编译完成的数据安装到默认的目录中</li></ol></blockquote></li><li><p>dpkg安装deb包</p><p>优点：安装包直接运行安装，相对tarball简单些</p><p>缺点：存在包依赖问题， 安装时需要手动下载很多安装包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></div></li><li><p>apt-get方式</p><p>优点：只需一条指令 简单方便</p><p>缺点：必须有软件源（联网或者搭建软件源）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一般格式为：</span></span><br><span class="line">sudo apt-get install xxxx</span><br></pre></td></tr></table></figure></div></li></ol><p>####2.Ubuntu软件配置镜像源</p><blockquote><p>配置清华大学开源软件镜像源</p></blockquote><ol><li><p>在此网站<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a> 复制镜像源代码</p></li><li><p>备份Ubuntu默认的源地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></table></figure></div></li><li><p>更新服务器列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div></li><li><p>更新源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></div></li><li><p>测试并安装软件 ？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade:升级软件</span><br><span class="line">apt-get install software_name :安装软件</span><br><span class="line">apt-get --purge remove  software_name :卸载软件及其配置</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制解锁命令</span></span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br><span class="line">apt-get autoremove software_name:卸载软件及其依赖的安装包</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="常用服务器ftp，ssh"><a href="#常用服务器ftp，ssh" class="headerlink" title="常用服务器ftp，ssh"></a>常用服务器ftp，ssh</h4><h5 id="1-Linux常用服务器构建-ftp服务器"><a href="#1-Linux常用服务器构建-ftp服务器" class="headerlink" title="1.Linux常用服务器构建-ftp服务器"></a>1.Linux常用服务器构建-ftp服务器</h5><blockquote><p>ftp： File Transfer  Protocol 文件传输协议</p></blockquote><p>1.1 安装vsftpd服务器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd -y</span><br></pre></td></tr></table></figure></div><p>1.2 检查是否启用21端口以及ftp协议是否生效</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntl | more</span><br><span class="line">ps -ef | grep ftp</span><br></pre></td></tr></table></figure></div><p>1.3 配置vsftpd.conf文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/vsftpd.conf</span><br><span class="line">anonymous_enable=NO 不用修改</span><br><span class="line">local_enable=YES 不用修改</span><br><span class="line">write_enable=YES 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定上传下载目录</span></span><br><span class="line">local_root=/home/python/ftp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许登录ftp服务器的用户</span></span><br><span class="line">chroot_list_enable=YES 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> (default follows)</span></span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list 启用</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建vsftpd.chroot_list文件 加入用户名python</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在ftp文件夹中 建立share文件夹</span></span><br><span class="line">mkdir share</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减去ftp目录文件夹的拥有者u的权限w</span></span><br><span class="line">chmod 555 ftp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启ftp服务</span></span><br><span class="line">sudo /etc/init.d/vsftpd restart</span><br></pre></td></tr></table></figure></div><p>1.4 卸载vsftpd</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge vsftpd</span><br><span class="line"><span class="meta">#</span><span class="bash"> --purge 彻底删除软件和相关文件</span></span><br></pre></td></tr></table></figure></div><h5 id="2-Linux常用服务器构建-ssh-和scp"><a href="#2-Linux常用服务器构建-ssh-和scp" class="headerlink" title="2.Linux常用服务器构建- ssh 和scp"></a>2.Linux常用服务器构建- ssh 和scp</h5><blockquote><p>ssh:secure shell缩写 建立在应用层和传输层基础上的安全协议</p></blockquote><ol><li><p>安装ssh</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></div></li><li><p>远程登录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 如果访问出现错误 则查看是否存在~/.ssh/known_ssh 尝试删除</span></span><br></pre></td></tr></table></figure></div></li><li><p><strong>scp</strong></p><ol><li><p>本地向远程拷贝文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r ./test python@192.168.162.76:/home/python/test</span><br><span class="line">scp ./test/aa.py python@192.168.1622.88:/home/python/test/bb.py</span><br></pre></td></tr></table></figure></div></li><li><p>远程拷贝到本地 则相反</p></li></ol></li></ol><h4 id="编辑器vim"><a href="#编辑器vim" class="headerlink" title="编辑器vim"></a>编辑器vim</h4><h5 id="1-vi简介"><a href="#1-vi简介" class="headerlink" title="1.vi简介"></a>1.vi简介</h5><blockquote><p>Visual interface 简称 文件操作程序</p></blockquote><p><strong>三种操作模式</strong></p><ul><li>命令模式</li><li>输入模式</li><li>末行模式</li></ul><h4 id="Ubuntu下安装pycharm"><a href="#Ubuntu下安装pycharm" class="headerlink" title="Ubuntu下安装pycharm"></a>Ubuntu下安装pycharm</h4><h4 id="网络通信概述"><a href="#网络通信概述" class="headerlink" title="网络通信概述"></a>网络通信概述</h4><h5 id="1-网络概念"><a href="#1-网络概念" class="headerlink" title="1.网络概念"></a>1.网络概念</h5><blockquote><p>一些相互连接的 ，以共享资源为目的的计算机的集合 使用网络能够方便数据共享和传递</p></blockquote><h5 id="2-IP地址"><a href="#2-IP地址" class="headerlink" title="2.IP地址"></a>2.IP地址</h5><blockquote><p>ip地址是指互联网协议地址 网际协议地址Internet Protocol Address</p></blockquote><p>作用：用来标记一台电脑 在网络中的主机唯一标识</p><p>分类： A类（1.0.0.1–126.255.255.254） </p><pre><code>B类 （128.1.0.1--191.255.255.254）     C类 （192.0.1.1--223.255.255.254）    D类 用于多点广播E类  保留地址 用于科研与实验开发用</code></pre><p>私有ip：用于局域网的ip地址</p><p>10.0.0.0–10.255.255.255 A类</p><p>172.16.0.0–172.31.255.255 B类</p><p>192.168.0.0–192.168.255.255 C类</p><p><strong>IP地址：127.0.0.1–127.255.255.255 用于本地回环测试</strong></p><p>特殊域名：localhost</p><h5 id="ipv4-和-ipv6"><a href="#ipv4-和-ipv6" class="headerlink" title="ipv4 和 ipv6"></a>ipv4 和 ipv6</h5><p>点分十进制  2^32个ip</p><p>冒号分十六进制 2^128 个ip</p><h5 id="3-Linux下的两个常用命令"><a href="#3-Linux下的两个常用命令" class="headerlink" title="3.Linux下的两个常用命令"></a>3.Linux下的两个常用命令</h5><p>ping 和ifconfig</p><h5 id="4-端口"><a href="#4-端口" class="headerlink" title="4.端口"></a>4.端口</h5><blockquote><p>设备与外界通讯交流的出口，端口可分为虚拟端口和物理端口，其中虚拟端口是指计算机内部或交换机路由器中的端口 如80 21 23端口</p></blockquote><p>端口号0–65535  分为知名端口 和动态端口</p><p>FTP：23 </p><p>SSH：22</p><p>Telnet：23</p><p>smtp：25</p><p>dns:53</p><p>http:80</p><p>pop3:110</p><p>https:443</p><p>查看端口使用情况：netstat  -an</p><p>查看端口被哪个程序占用 lsof -i :21  加sudo</p><p>net stat -ntl 查看服务器socket接口</p><h4 id="网络传输方式"><a href="#网络传输方式" class="headerlink" title="网络传输方式"></a>网络传输方式</h4><p>1.面向无连接型</p><pre><code>udp 用户数据报协议不要求建立和断开连接 发送端可以任何时候自由发送数据</code></pre><p>2.面向有连接型</p><pre><code>tcp 传输控制协议 面向连接 可靠的 基于字节流的传输通信协议在发送数据前需要与目标主机建立一条连接通信线路</code></pre><h4 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h4><p>1.创建套接字</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入socket模块</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># udp</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.close() </span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></div><p>2.发送数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># udp</span></span><br><span class="line">s.sendto(<span class="string">"你好"</span>.encode(), (<span class="string">"发送的ip地址"</span>, 目标端口))</span><br></pre></td></tr></table></figure></div><p>3.接收数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#udp</span></span><br><span class="line">s.recvfrom(缓冲区大小)</span><br><span class="line">(recv_data, ip_port) = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 其中ip_port是一个元组</span></span><br></pre></td></tr></table></figure></div><p>4.发送端与接收端 端口绑定</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addr = (<span class="string">"192.168.162.122"</span>, <span class="number">12345</span>) <span class="comment"># IP地址不写 则代表本机任意网卡ip</span></span><br><span class="line">udp_socket.bind(addr)</span><br></pre></td></tr></table></figure></div><h4 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h4><p>str.encode() ==&gt; bytes</p><p>bytes.decode()==&gt;str</p><blockquote><p>两个方法 都支持 参数  encoding=”utf-8”/“gbk” errors = “strict”/“ignore”</p></blockquote><h4 id="udp聊天案例"><a href="#udp聊天案例" class="headerlink" title="udp聊天案例"></a>udp聊天案例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 聊天主要实现功能</span></span><br><span class="line"><span class="comment"># 1 发送信息</span></span><br><span class="line"><span class="comment"># 2 接收信息</span></span><br><span class="line"><span class="comment"># 3 退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    ipaddr = input(<span class="string">"请输入目标ip地址:"</span>) | <span class="string">"192.168.162.53"</span></span><br><span class="line">    port = int(input(<span class="string">"请输入目标端口:"</span>)) | <span class="number">8080</span></span><br><span class="line">    con = input(<span class="string">"请输入内容"</span>)</span><br><span class="line">    udp_socket.sendto(con.encode(),(ipaddr, port))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    recv_data,ip_port = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    re_text = recv_data.decode()</span><br><span class="line">    ip,port = ip_port</span><br><span class="line">    print(re_text)</span><br><span class="line">    print(ip, port)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    udp_socket.bind((<span class="string">"192.168.162.122"</span>, <span class="number">12345</span>))</span><br><span class="line">    <span class="comment"># 显示主界面 循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">6</span>,<span class="string">"1.发送信息"</span>,<span class="string">"*"</span>*<span class="number">6</span>)</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">6</span>,<span class="string">"2.接收信息"</span>,<span class="string">"*"</span>*<span class="number">6</span>)</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">6</span>,<span class="string">"3.退出系统"</span>,<span class="string">"*"</span>*<span class="number">6</span>)</span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 选择功能</span></span><br><span class="line">        num = int(input(<span class="string">"请选择功能:"</span>))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">"发送功能调用"</span>)</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">"接收功能调用"</span>)</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">"退出系统"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment"># 关闭socket</span></span><br><span class="line">     udp_socket.close()     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h4 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h4><blockquote><p>tcp协议 传输控制协议 是一种面向连接的 可靠的 基于字节流的传输通讯协议  </p></blockquote><p>创建连接 数据传送 终止连接 三个步骤</p><p>TCP特点：</p><p>1 面向连接</p><p>2 可靠传输</p><pre><code>tcp采用发送应答机制超时重传错误校验流量控制和阻塞管理</code></pre><p>TCP与UDP的不同点</p><pre><code>面向连接有序数据传输重发丢失的数据包舍弃重复的数据包无差错的数据传输阻塞/流量控制</code></pre><p>通信流程：</p><p>client客户端：socket对象—&gt; connect—&gt;send(recv)–&gt;close</p><p>server服务端:socket对象—&gt;bind—&gt;listen—&gt;accept——&gt;recv(send)–&gt;close</p><p>tcp客户端实现步骤：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入socket模块</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 2.创建socket套接字</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 3.建立tcp连接（和服务器端建立连接）</span></span><br><span class="line">tcp_client_socket.connect((<span class="string">"192.168.162.35"</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 4.开始发送数据（到服务器）</span></span><br><span class="line">tcp_client_socket.send(<span class="string">"字符串数据"</span>.encode())</span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">"接收到的数据是%s"</span>%recv_data.decode())</span><br><span class="line"><span class="comment"># 5.关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure></div><p>tcp服务端实现步骤</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 1. socket套接字创建</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 2.bind绑定ip和root</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">"192.168.162.65"</span>, <span class="number">8000</span>))</span><br><span class="line"><span class="comment"># 3.listen启用服务端侦听状态</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="comment"># 4.accept等待客户端接入 返回当前连接的套接字以及连如的ip和端口</span></span><br><span class="line">client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line"><span class="comment"># 5.recv/send 收发数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">"接收到的数据是%s"</span>%recv_data.decode())</span><br><span class="line">client_socket.send(<span class="string">"好的收到"</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接的客户端套接字</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure></div><h5 id="tcp增强版-多客户端-多信息"><a href="#tcp增强版-多客户端-多信息" class="headerlink" title="tcp增强版  多客户端 多信息"></a>tcp增强版  多客户端 多信息</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp 服务器 允许多客户端 多条信息 接收  但无法实现同时客户端接入</span></span><br><span class="line"><span class="comment"># 导入socket 套接字</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建sokcet套接字</span></span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 地址重用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">'192.168.162.163'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启侦听</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启循环 接收多台客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接收客户端连接 返回 客户端套接字对象 以及端口和ip</span></span><br><span class="line">    tcp_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"[新客户端来了]"</span>, ip_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 得到返回的结果为二进制数据</span></span><br><span class="line">        recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data_con = recv_data.decode()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                print(<span class="string">"错误输出:"</span>, err)</span><br><span class="line">                data_con = recv_data.decode(encoding=<span class="string">"gbk"</span>, errors=<span class="string">"ignore"</span>)</span><br><span class="line">            print(<span class="string">"信息内容为:"</span>, data_con)</span><br><span class="line">            tcp_client_socket.send(<span class="string">'好的收到'</span>.encode())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"数据读取完毕，客户端可能断开"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp_server_socket.close()</span></span><br></pre></td></tr></table></figure></div><h4 id="备注—SOCKET设置"><a href="#备注—SOCKET设置" class="headerlink" title="备注—SOCKET设置"></a>备注—SOCKET设置</h4><h5 id="1-创建socket套接字"><a href="#1-创建socket套接字" class="headerlink" title="1.创建socket套接字"></a>1.创建socket套接字</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span> ： domain</span><br><span class="line">AF_INET Ipv4 网络协议</span><br><span class="line">AF_INET6 Ipv6网络协议</span><br><span class="line">参数<span class="number">2</span>: 通信的协议类型</span><br><span class="line">SOCK_STREAM TCP协议</span><br><span class="line">OOB 在所有数据传送前必须使用connect来建立连接</span><br><span class="line">SOCK_DGRAM 使用不连续不可靠的数据包连接 UDP协议</span><br><span class="line">SOCK_SEQPACKET:提供连续可靠的数据包连接</span><br><span class="line">SOCK_RAW 提供原始网络协议存取</span><br><span class="line">SOCK_PACKET 与网络驱动程序直接通信</span><br><span class="line">参数<span class="number">3</span> protocol 协议编号 一般设置为<span class="number">0</span> 或者忽略</span><br></pre></td></tr></table></figure></div><h5 id="2-socket-setsockopt-level-optname-value"><a href="#2-socket-setsockopt-level-optname-value" class="headerlink" title="2.socket.setsockopt(level, optname, value)"></a>2.socket.setsockopt(level, optname, value)</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">optname:</span><br><span class="line">    SO_REUSEADDR 打开或关闭地址复用</span><br><span class="line">    SO_DONTROUTE 打开或者关闭路由查找功能</span><br><span class="line">    SO_BROADCAST 允许或者禁止发送广播数据</span><br><span class="line">    SO_SNDBUF 设置发送缓冲区的大小</span><br><span class="line">    SO_RCVBUF 设置接收缓冲区的大小</span><br><span class="line">    SO_RCVTIMEO 设置接收超时时间</span><br><span class="line">    SO_SNDTIMEO 设置发送超时时间</span><br></pre></td></tr></table></figure></div><h5 id="tcp可靠-udp不可靠的原因"><a href="#tcp可靠-udp不可靠的原因" class="headerlink" title="tcp可靠  udp不可靠的原因"></a>tcp可靠  udp不可靠的原因</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp 在socket内核中有 接收和发送缓冲区 tcp的全双工模式以及tcp的滑动的窗口便是依赖于这两个独立的buffer  防止缓冲区溢出，滑动窗口自动关闭，保证数据不丢失</span></span><br><span class="line"><span class="comment"># udp 只有一个接收缓冲区 没有发送缓冲区，原则上只要有数据 就会发送 不论对方数据接收缓冲区是否溢出 所以可能会造成数据丢失</span></span><br></pre></td></tr></table></figure></div><h5 id="tcp注意点"><a href="#tcp注意点" class="headerlink" title="tcp注意点"></a>tcp注意点</h5><ol><li>tcp服务器端 一般需要绑定端口和ip， tcp客户端主动连接，不需要 </li><li>tcp服务器中通过listen 启用侦听状态 变为被动接受连接</li><li>当tcp客户端连接入，会产生专为此客户端服务的套接字，标记这个客户端</li><li>关闭listen 之后 后续的客户端无法连接入  而之前的建立的客户端可以正常通信</li><li>关闭accpet返回的套接字意味着该客户端已经服务完毕</li><li>当客户端的套接字调用close后，服务器端recv解堵塞，返回长度为0的数据，因此通过此长度判断客户端是否已经下线</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见linux指令以及文件操作指令</title>
      <link href="/2018/03/06/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-6-%E5%B8%B8%E8%A7%81linux%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/03/06/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-6-%E5%B8%B8%E8%A7%81linux%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="day02-常见指令"><a href="#day02-常见指令" class="headerlink" title="day02-常见指令"></a>day02-常见指令</h3><p>#####1. cal日历</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cal<span class="comment"># 显示当月的日历</span></span><br><span class="line">cal <span class="number">-3</span>  <span class="comment"># 显示3个月的日历</span></span><br><span class="line">cal -y  <span class="comment"># 显示全年日历</span></span><br><span class="line">cal -j  <span class="comment"># 显示全年第几天</span></span><br></pre></td></tr></table></figure></div><h5 id="2-date"><a href="#2-date" class="headerlink" title="2.date"></a>2.date</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date 显示日期</span><br><span class="line">date <span class="string">"+%Y年%m月%d日 %H时%M分%S秒"</span></span><br><span class="line">date <span class="string">"+%F %T"</span>  <span class="comment"># 2018-09-03 09:01:16</span></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">date <span class="string">"+%Y-%m-%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure></div><h5 id="3-history-历史"><a href="#3-history-历史" class="headerlink" title="3.history 历史"></a>3.history 历史</h5><blockquote><p>显示指定数目的指令命令 读取历史命令中的目录到历史命令缓冲区和将历史命令缓冲区命令写入命令文件（家目录home下的隐藏文件 .bash_histroy中）</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history <span class="number">100</span>  <span class="comment"># 显示历史100条指令</span></span><br><span class="line"><span class="comment"># !指定编号</span></span><br><span class="line">！<span class="number">205</span></span><br></pre></td></tr></table></figure></div><h4 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h4><h5 id="1-cat查看或合并文件内容"><a href="#1-cat查看或合并文件内容" class="headerlink" title="1.cat查看或合并文件内容"></a>1.cat查看或合并文件内容</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="number">1.</span>txt  <span class="comment"># 在命令中查看内容</span></span><br><span class="line">cat -n <span class="number">1.</span>txt  <span class="comment"># 显示中添加行号</span></span><br><span class="line">cat -b <span class="number">1.</span>txt  <span class="comment"># 显示行号 但空行没有编号</span></span><br><span class="line">cat -s <span class="number">1.</span>txt  <span class="comment"># 合并多行空行 为一行空行</span></span><br><span class="line">cat -sb <span class="number">1.</span>txt  <span class="comment"># 显示行号，空行没有编号 并且多行空格合并为一个空行</span></span><br><span class="line"></span><br><span class="line">cat -sb /etc/services</span><br></pre></td></tr></table></figure></div><h5 id="2-more分屏查看文件内容"><a href="#2-more分屏查看文件内容" class="headerlink" title="2.more分屏查看文件内容"></a>2.more分屏查看文件内容</h5><blockquote><p>以全屏幕的方式 分页显示文本文件的内容</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">more <span class="number">2.</span>txt</span><br><span class="line">more /etc/services  <span class="comment"># 通过空格翻页 回车 行增加 ctrl+f 往前一页 ctrl+b  后退一页  q 退出</span></span><br><span class="line"><span class="comment"># 类似于 man ls 查看相关说明文档</span></span><br><span class="line">more -p <span class="number">1.</span>txt 清空之前的内容（清屏）</span><br><span class="line">more -s <span class="number">1.</span>txt 合并多行空行为一行空行</span><br><span class="line">more +<span class="number">5</span> /etc/services 从文件的第五行开始显示内容</span><br></pre></td></tr></table></figure></div><h3 id="常用命令-数据流，管道"><a href="#常用命令-数据流，管道" class="headerlink" title="常用命令-数据流，管道"></a>常用命令-数据流，管道</h3><blockquote><p>&gt; - 数据流重定向  |  - 管道命令</p></blockquote><h5 id="1-数据流及输出重定向命令-：-gt"><a href="#1-数据流及输出重定向命令-：-gt" class="headerlink" title="1.数据流及输出重定向命令 ： &gt;"></a>1.数据流及输出重定向命令 ： &gt;</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo "hello world" &gt; helloworld.txt</span><br><span class="line"></span><br><span class="line">ls -l &gt; ls.txt  # 输出重定向</span><br><span class="line"></span><br><span class="line">echo "hello" &gt;&gt; hello.txt  输出追加重定向</span><br></pre></td></tr></table></figure></div><h5 id="2-管道"><a href="#2-管道" class="headerlink" title="2. 管道 |"></a>2. 管道 |</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l / | more</span><br><span class="line"></span><br><span class="line">touch 10.txt | gedit 10.txt  # 左侧需要输出</span><br></pre></td></tr></table></figure></div><h4 id="常用命令-建立连接"><a href="#常用命令-建立连接" class="headerlink" title="常用命令 - 建立连接"></a>常用命令 - 建立连接</h4><h5 id="1-建立链接文件：-In"><a href="#1-建立链接文件：-In" class="headerlink" title="1.建立链接文件： In"></a>1.建立链接文件： In</h5><blockquote><p>类似于window下的快捷方式  分为软链接 和 硬链接</p></blockquote><pre><code>1.1 软链接：快捷方式 不占用磁盘空间 源文件删除则软链接失效</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln -s 源文件 链接文件</span></span><br><span class="line">ln -s 1.txt softlink1_1.txt  (l标识符l 为链接文件)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以创建多个软链接</span></span><br><span class="line">ln -s 1.txt softlink2_1.txt</span><br><span class="line">ln -s 1.txt softlink3_1.txt</span><br></pre></td></tr></table></figure></div><pre><code>1.2 硬链接：文件的一个名字或者多个名字</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln 源文件 链接文件</span></span><br><span class="line">ln 2.txt hardlink1_2.txt</span><br><span class="line">ln 2.txt hardlink2_2.txt</span><br></pre></td></tr></table></figure></div><blockquote><ol><li>软链接可以跨文件系统  硬链接不可以</li><li>软链接可以给一个不存在的文件做快捷方式 硬链接不可以</li><li>软链接可以给文件目录做快捷方式  硬链接不可以</li></ol></blockquote><h4 id="常用命令-文件搜索"><a href="#常用命令-文件搜索" class="headerlink" title="常用命令-文件搜索"></a>常用命令-文件搜索</h4><h5 id="1-文本搜索：grep"><a href="#1-文本搜索：grep" class="headerlink" title="1.文本搜索：grep"></a>1.文本搜索：grep</h5><blockquote><p>linux系统中grep命令时一种强大的文本搜索工具，grep允许对文本文件进行模式查找</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt</span><br><span class="line">grep "worker" test.txt  # worker wang  worker su</span><br><span class="line"></span><br><span class="line">grep "worker" test.txt -i  # 忽略大小写</span><br><span class="line"></span><br><span class="line">grep "worker" test.txt -in  # 加上行号</span><br><span class="line"></span><br><span class="line">grep "worker" test.txt -v  # 取反</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep可以使用正则表达式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ^w</span></span><br></pre></td></tr></table></figure></div><h5 id="2-查找文件：-find"><a href="#2-查找文件：-find" class="headerlink" title="2.查找文件： find"></a>2.查找文件： find</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name ls.txt</span><br><span class="line">find / -name '^a\s*(.txt)$'  # 根目录全局搜索</span><br><span class="line">find ./ -size +5M   # 目前搜索只能以M为单位  小于 -</span><br><span class="line">find ./ -size +10M -size -30M  # 按照大小范围搜索</span><br></pre></td></tr></table></figure></div><h4 id="常用命令-归档和压缩"><a href="#常用命令-归档和压缩" class="headerlink" title="常用命令 - 归档和压缩"></a>常用命令 - 归档和压缩</h4><h5 id="1-归档和压缩的概念"><a href="#1-归档和压缩的概念" class="headerlink" title="1.归档和压缩的概念"></a>1.归档和压缩的概念</h5><ul><li>tar - 归档指令</li><li>gzip - 压缩指令</li></ul><blockquote><p>归档： 将多个文件打包成一个文件 便于保存和传输</p><p>压缩：对文件进行体积压缩</p></blockquote><h5 id="2-归档管理-tar"><a href="#2-归档管理-tar" class="headerlink" title="2.归档管理 tar"></a>2.归档管理 tar</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c 生成档案文件 创建打包文件</span><br><span class="line">-w 列出归档解档的详细过程  显示进度</span><br><span class="line">-x 解开档案文件</span><br><span class="line">-f 指定档案文件名称</span><br><span class="line">-t 列出档案中包含的文件</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf 1-2.tar 1.txt 2.txt   # 归档</span><br><span class="line"></span><br><span class="line">tar -xvf 1-2.tar  # 解档</span><br></pre></td></tr></table></figure></div><h5 id="3-文件压缩解压：gzip"><a href="#3-文件压缩解压：gzip" class="headerlink" title="3.文件压缩解压：gzip"></a>3.文件压缩解压：gzip</h5><blockquote><p>tar与gzip结合使用实现打包压缩 最终扩展名为xxx.tar.gz文件     </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gzip 1-2.tar   # 对tar归档文件进行压缩 成为1-2.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gzip -d 1-2.tar.gz  # 解压</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 归档和压缩一起进行  提升效率</span></span><br><span class="line">tar -zcvf  1-2.tar.gz 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">tar -zxvf  1-2.tar.gz</span><br></pre></td></tr></table></figure></div><h4 id="常用命令-归档和压缩-2"><a href="#常用命令-归档和压缩-2" class="headerlink" title="常用命令- 归档和压缩(2)"></a>常用命令- 归档和压缩(2)</h4><blockquote><p>bzip2  </p><p>zip、 unzip</p></blockquote><h5 id="1-文件压缩解压-bzip2"><a href="#1-文件压缩解压-bzip2" class="headerlink" title="1.文件压缩解压 bzip2"></a>1.文件压缩解压 bzip2</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bzip2 1-2.tar   # 1-2.tar.bz2</span><br><span class="line"></span><br><span class="line">bzip2 -d 1-2.tar.bz2</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 联合使用</span></span><br><span class="line">tar -jcvf 1-2.tar.bz2 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">tar -jxvf 1-2.tar.bz2</span><br></pre></td></tr></table></figure></div><h5 id="2-文件压缩解压：zip-unzip"><a href="#2-文件压缩解压：zip-unzip" class="headerlink" title="2.文件压缩解压：zip / unzip"></a>2.文件压缩解压：zip / unzip</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip -r a.zip a   # 压缩a目录  a.zip</span><br><span class="line"></span><br><span class="line">unzip a.zip</span><br></pre></td></tr></table></figure></div><blockquote><p>gzip 常用 压缩体积小</p></blockquote><h4 id="常用命令-文件权限介绍"><a href="#常用命令-文件权限介绍" class="headerlink" title="常用命令-文件权限介绍"></a>常用命令-文件权限介绍</h4><blockquote><p>which - 查看命令位置</p></blockquote><h5 id="1-查看命令位置-which"><a href="#1-查看命令位置-which" class="headerlink" title="1.查看命令位置 which"></a>1.查看命令位置 which</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br><span class="line">which python3</span><br><span class="line"></span><br><span class="line">cd /bin</span><br></pre></td></tr></table></figure></div><h5 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2.文件权限"></a>2.文件权限</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rwx r-x r--</span><br><span class="line">u    g   o      all 所有用户</span><br><span class="line">文件所属用户的权限  文件所属组的权限  其他用户的权限</span><br></pre></td></tr></table></figure></div><p><strong>chmod</strong> - 修改文件权限  </p><ol><li><p>字母法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod u +x 1.txt   # 给当前用户增加一个可执行权限</span><br><span class="line">chmod o +w 1.txt   # 给其他用户增加一个可写权限</span><br><span class="line">chmod g=rwx 1.txt  # 给当前组 设定权限</span><br><span class="line">chmod a-x 1.txt   # 给所有的用户撤销可执行权限</span><br><span class="line"></span><br><span class="line">chmod a= 1.txt  # 给所有的用户全部撤销权限</span><br></pre></td></tr></table></figure></div></li><li><p>数字法：</p></li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- r  4</span><br><span class="line">- w  2</span><br><span class="line">- x  1</span><br><span class="line">- -  0</span><br><span class="line">chmod 744 目录 或者 文件   （如果将目录的权限传递给子目录和文件 后面加 -R）</span><br></pre></td></tr></table></figure></div><h4 id="常用命令-用户管理"><a href="#常用命令-用户管理" class="headerlink" title="常用命令 - 用户管理"></a>常用命令 - 用户管理</h4><h5 id="1-切换到管理员账号"><a href="#1-切换到管理员账号" class="headerlink" title="1.切换到管理员账号"></a>1.切换到管理员账号</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu下切换到root的简单命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $表示普通用户  <span class="comment"># root用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo 临时提升到管理员权限</span></span><br><span class="line"></span><br><span class="line">sudo -s  # 切换到管理员权限 需要输入当前用户权限</span><br><span class="line"></span><br><span class="line">su root  # 需要输入root的密码</span><br><span class="line">su teacher # 切换到指定用户</span><br></pre></td></tr></table></figure></div><h5 id="2-设置用户密码：password"><a href="#2-设置用户密码：password" class="headerlink" title="2.设置用户密码：password"></a>2.设置用户密码：password</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">passwd  更改当前的用户密码  有强度限制</span><br><span class="line"></span><br><span class="line">sudo -s  # 切换到管理员</span><br><span class="line">passwd teacher  设置用户密码 不考虑强度</span><br></pre></td></tr></table></figure></div><h5 id="3-退出用户登陆exit"><a href="#3-退出用户登陆exit" class="headerlink" title="3.退出用户登陆exit"></a>3.退出用户登陆exit</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">exit   # 退出当前用户  逐级往前一个用户账号</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">whoami  # 查看当前用户</span><br><span class="line"></span><br><span class="line">who  </span><br><span class="line">who -q</span><br><span class="line">who -u</span><br><span class="line"></span><br><span class="line">ssh teacher@192.168.162.61</span><br></pre></td></tr></table></figure></div><p>####常用命令-关机 ，重启</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h 13:00</span><br><span class="line">reboot </span><br><span class="line">shutdown -r now</span><br><span class="line">shutdown -h now</span><br><span class="line">shutdown -h +10</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统简介以及基础指令</title>
      <link href="/2018/03/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-1-linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/03/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-2018-3-1-linux%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h2><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h5 id="1-操作系统（Operating-System）"><a href="#1-操作系统（Operating-System）" class="headerlink" title="1.操作系统（Operating System）"></a>1.操作系统（Operating System）</h5><blockquote><p>是管理和控制计算机硬件与软件资源的计算机程序</p></blockquote><p><a href="/img/images/pic/QQ20180904-230814@2x.png" data-fancybox="group" data-caption="QQ20180904-230814@2x" class="fancybox"><img alt="QQ20180904-230814@2x" title="QQ20180904-230814@2x" data-src="/img/images/pic/QQ20180904-230814@2x.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>操作系统的不同应用领域</strong></p><ul><li><p>桌面os —windows  macos  linux</p></li><li><p>服务器os  windows  Linux  unix</p></li><li><p>嵌入式os  linux   wince</p><p><a href="/img/images/pic/QQ20180904-230353@2x.png" data-fancybox="group" data-caption="QQ20180904-230353@2x" class="fancybox"><img alt="QQ20180904-230353@2x" title="QQ20180904-230353@2x" data-src="/img/images/pic/QQ20180904-230353@2x.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>移动设备os   iOS  android</p></li></ul><h5 id="2-操作系统的作用"><a href="#2-操作系统的作用" class="headerlink" title="2.操作系统的作用"></a>2.操作系统的作用</h5><blockquote><ol><li>对下控制硬件运行，对上为应用程序提供支持</li><li>是现代计算机系统中最基本和最重要的系统软件</li><li>是配置在计算机硬件上的第一层软件 是对硬件系统的首次扩展</li></ol></blockquote><h5 id="3-Linux系统的发展史"><a href="#3-Linux系统的发展史" class="headerlink" title="3.Linux系统的发展史"></a>3.Linux系统的发展史</h5><p><strong>Unix</strong></p><blockquote><p>1970 年 美国贝尔实验室的ken Thompson 用B语言写了第一个unix操作系统</p></blockquote><blockquote><p>1972年 Dennis M.Ritchie 丹尼斯·里奇  开发出了C语言</p></blockquote><p><strong>Minix</strong></p><blockquote><p>塔能鲍姆 发明了小型UNIX 称为MINIX</p></blockquote><p><strong>Linux</strong></p><blockquote><p>1991年 林纳斯 开发了linux内核</p></blockquote><blockquote><p>内核（kernel）是系统的心脏 是运行程序和管理向磁盘和打印机等硬件设备的核心程序</p><p>内核版本分为 稳定版 和开发版</p></blockquote><p>内核源码网址：<a href="http://www.kernel.org" target="_blank" rel="noopener">http://www.kernel.org</a></p><p><strong>发行版本</strong>也被叫做GNU ，通常包括桌面环境 办公套件 媒体播放器数据库等应用</p><p>linux发行版 = linux内核 + 一套软件 + 使用手册</p><p>*<em>常见发行版本 *</em>:Ubuntu  Redhat  CentOS 等</p><p><a href="/img/images/pic/QQ20180904-230335@2x.png" data-fancybox="group" data-caption="QQ20180904-230335@2x" class="fancybox"><img alt="QQ20180904-230335@2x" title="QQ20180904-230335@2x" data-src="/img/images/pic/QQ20180904-230335@2x.png" src="/img/loading.gif" class="lazyload"></a></p><h4 id="Linux系统应用领域"><a href="#Linux系统应用领域" class="headerlink" title="Linux系统应用领域"></a>Linux系统应用领域</h4><ul><li><p>Linux 免费 稳定 高效特点 在服务器领域应用广泛</p></li><li><p>嵌入式领域：Linux运行稳定 对网络的良好支持 低成本 内核可以按需裁剪 最小达几百kB 适合嵌入式开发</p><blockquote><p>主要应用：机顶盒 数字电视 网络电话 程控交换机 手机等</p></blockquote></li><li><p>个人桌面领域：应用较少 操作复杂 一直被windows所压制</p><p>产生了Ubuntu Fedora等优秀桌面系统 </p></li></ul><h4 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h4><h5 id="1-单用户操作系统和多用户操作系统"><a href="#1-单用户操作系统和多用户操作系统" class="headerlink" title="1.单用户操作系统和多用户操作系统"></a>1.单用户操作系统和多用户操作系统</h5><ul><li><p>单用户操作系统   指的是一台计算机在同一时间只能由一个用户使用</p><p>windowXp之前的系统都是单用户的</p></li><li><p>多用户操作系统  指一台计算机在同一时间可以由多个用户使用</p><p>Unix 和Linux 设计初衷就是多用户操作系统</p></li></ul><h5 id="2-windows-和-Linux文件系统的区别"><a href="#2-windows-和-Linux文件系统的区别" class="headerlink" title="2. windows 和 Linux文件系统的区别"></a>2. windows 和 Linux文件系统的区别</h5><ul><li>windows 下 是一个个的驱动器盘符 每个驱动器都有自己的根目录结构，形成多个树并列</li><li>Linux下 没有驱动器 只有一个根目录/   所有的文件都在它下面</li></ul><p><strong>用户（主/家）目录</strong></p><p>位于 /home/user</p><blockquote><p>teacher@teacher - VirtualBox：~$ （～表示用户在自己的家目录）</p></blockquote><p><strong>常用目录</strong></p><ul><li>/:根目录</li><li>/bin， /usr/bin  可执行二进制文件的目录 如常用的命令ls  tar  mv  cat 等</li><li>/boot  放置linux系统启动时用到一些文件 如Linux的内核文件： /boot/vmlinuz   系统引导管理器: /boot/grub</li><li>/dev 系统设备文件  常用的是挂在光驱 mount/dev/cdrom /mnt</li><li>/etc: 系统配置文件存放的目录  重要配置文件有<ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d </li></ul></li><li>/home: 系统默认的用户家目录 新增用户存放在此</li><li>/lib, /usr/lib, /usr/local/lib: 系统使用的函数库的目录</li></ul><h4 id="Linux-终端命令格式"><a href="#Linux-终端命令格式" class="headerlink" title="Linux 终端命令格式"></a>Linux 终端命令格式</h4><blockquote><p>终端Termial通常是一个软件控制台  </p></blockquote><p>ctrl + alt + t  快捷键打开方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command [-options] [parameter]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span>: 命令名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [-options]: 可用来对命令进行控制 也可以省略</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [parameter]: 传给命令的参数  可以是零个  一个 或者多个</span></span><br></pre></td></tr></table></figure></div><p><strong>–help</strong></p><p><code>command --help</code></p><p>说明：显示 command命令的帮助信息</p><p><strong>man</strong></p><p><code>man command</code></p><p>说明:查阅command 命令的使用手册</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>下一屏</td></tr><tr><td>Enter键</td><td>一行一行查看</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索word字符串</td></tr></tbody></table><h4 id="常用命令-显示文件和目录"><a href="#常用命令-显示文件和目录" class="headerlink" title="常用命令-显示文件和目录"></a>常用命令-显示文件和目录</h4><ul><li>pwd -显示当前路径</li><li>tree - 树状列出目录内容</li><li>ls -  列表查看目录中的文件或文件夹<ul><li>-a 显示目录下的子目录或文件 包括隐藏文件</li><li>-h  配合-l 友好方式展示 (最直接是以文件大小K，M显示)</li><li>-l  以列表方式显示文件的详细信息</li></ul></li><li><a href="/img/images/pic/QQ20180904-225935@2x.png" data-fancybox="group" data-caption="QQ20180904-225935@2x" class="fancybox"><img alt="QQ20180904-225935@2x" title="QQ20180904-225935@2x" data-src="/img/images/pic/QQ20180904-225935@2x.png" src="/img/loading.gif" class="lazyload"></a></li></ul><h4 id="常用命令-切换工作目录"><a href="#常用命令-切换工作目录" class="headerlink" title="常用命令-切换工作目录"></a>常用命令-切换工作目录</h4><p><a href="/img/images/pic/QQ20180904-230603@2x.png" data-fancybox="group" data-caption="QQ20180904-230603@2x" class="fancybox"><img alt="QQ20180904-230603@2x" title="QQ20180904-230603@2x" data-src="/img/images/pic/QQ20180904-230603@2x.png" src="/img/loading.gif" class="lazyload"></a></p><h4 id="常用命令—创建文件和文件夹"><a href="#常用命令—创建文件和文件夹" class="headerlink" title="常用命令—创建文件和文件夹"></a>常用命令—创建文件和文件夹</h4><ul><li><p>mkdir 创建目录</p><ul><li><p>-p  递归创建目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nkdir a/b/c/d -p</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>touch 创建文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.txt</span><br></pre></td></tr></table></figure></div></li><li><p>gedit  编辑文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  打开单个文件 </span></span><br><span class="line">gedit 1.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开多个文件</span></span><br><span class="line">gedit 1.txt 2.txt</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="常用命令-删除文件和文件夹"><a href="#常用命令-删除文件和文件夹" class="headerlink" title="常用命令-删除文件和文件夹"></a>常用命令-删除文件和文件夹</h4><ul><li>删除文件 rm<ul><li>-i  以交互式方式执行 有提示</li><li>-f  强制删除 忽略不存在的文件 无需提示</li><li>-r  递归删除目录下的内容  删除文件夹时必须加此参数</li></ul></li></ul><h4 id="常用命令-拷贝copy"><a href="#常用命令-拷贝copy" class="headerlink" title="常用命令 - 拷贝copy"></a>常用命令 - 拷贝copy</h4><ul><li>拷贝： cp<ul><li>-f  已经存在的目标文件 不提示</li><li>-i  交互式复制 覆盖目标文件之前有提示</li><li>-r 拷贝目录到 到另一个地方 且目标文件必须是目录名</li><li>-v  显示拷贝进度</li></ul></li></ul><h4 id="常用命令—移动文件和文件夹"><a href="#常用命令—移动文件和文件夹" class="headerlink" title="常用命令—移动文件和文件夹"></a>常用命令—移动文件和文件夹</h4><ul><li>mv  移动 或重命名<ul><li>-f 禁止交互式操作 覆盖无提示</li><li>-i 确认交互方式</li><li>-v 显示移动进度</li></ul></li></ul><h4 id="常用命令-其他"><a href="#常用命令-其他" class="headerlink" title="常用命令-其他"></a>常用命令-其他</h4><ol><li>clear 清屏</li><li>tab 自动补全 （输入如果有歧义 则不显示  再次按下tab 则提示有哪些）</li><li>小技巧：<ol><li>放大缩小窗口字体</li><li>上下光标切换命</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第9节-异常处理/模块与包</title>
      <link href="/2017/02/06/python%E6%95%99%E7%A8%8B-2018-2-6-%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97/"/>
      <url>/2017/02/06/python%E6%95%99%E7%A8%8B-2018-2-6-%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h4 id="1-异常的概念"><a href="#1-异常的概念" class="headerlink" title="1. 异常的概念"></a>1. 异常的概念</h4><blockquote><p>异常就是在程序执行过程中，发生  并影响程序的正常执行 在python中无法正常处理的程序就发生一个异常  一个异常就是一个错误， 当脚本发生异常时候，我们要捕获处理它 否则程序将终止程序</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"123.txt"</span>, <span class="string">'r'</span>)  <span class="comment"># 当文件不存在的时候 会发生报错 </span></span><br><span class="line">con = f.read()</span><br><span class="line">print(con)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'后续程序'</span>)  <span class="comment"># 后续程序无法运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用try……except……捕获异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">"123.txt"</span>, <span class="string">'r'</span>)</span><br><span class="line">    con = f.read()</span><br><span class="line">    print(con)</span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 此处默认捕获各种类型的异常</span></span><br><span class="line">    print(<span class="string">"程序出现了异常"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">尝试运行try语句中的代码 如果代码出现异常 则捕获报错 而是交给except去捕获并处理异常  这是一个异常容错机制 类似于javascript中的try……catch语句</span></span><br><span class="line"><span class="string">"""</span>    </span><br><span class="line"><span class="comment"># 作用：有效避免了程序报错退出  增强了代码的稳定性</span></span><br></pre></td></tr></table></figure></div><h4 id="2-常见错误"><a href="#2-常见错误" class="headerlink" title="2.常见错误"></a>2.常见错误</h4><table><thead><tr><th>错误类型</th><th>解释</th></tr></thead><tbody><tr><td>NameError</td><td>未声明/初始化错误</td></tr><tr><td>Exception</td><td>常规错误基类</td></tr><tr><td>FileNotFountError</td><td>文件不存在</td></tr></tbody></table><h4 id="3-完整的异常容错机制"><a href="#3-完整的异常容错机制" class="headerlink" title="3.完整的异常容错机制"></a>3.完整的异常容错机制</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    尝试运行的程序</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现错误 则进入<span class="keyword">except</span>语句中 进行捕获处理</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常 则进入<span class="keyword">else</span>语句中执行相应的代码</span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line">无论是否出现异常 都会执行这里的代码</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">"123.txt"</span>, <span class="string">'r'</span>)</span><br><span class="line">    con = f.read()</span><br><span class="line">    print(con)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"有异常，异常时%s"</span>%err)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"如果没有错误 则执行这里的代码"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"最终执行这里了"</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       print(aa)</span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> Error: <span class="comment"># 所有错误的基类</span></span><br><span class="line">    print(<span class="string">"再次捕获错误%s"</span>%Error)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># try有嵌套的情况 会将异常进行传递</span></span><br></pre></td></tr></table></figure></div><h4 id="4-自定义异常的使用方法"><a href="#4-自定义异常的使用方法" class="headerlink" title="4.自定义异常的使用方法"></a>4.自定义异常的使用方法</h4><blockquote><p>rasie 使用该语句 可以自动触发异常（抛出异常）</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomException</span><span class="params">(Excetion)</span>:</span>  <span class="comment"># 自定义一个异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>：</span><br><span class="line">tel = input(<span class="string">"请输入手机号"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(tel) ! =<span class="number">11</span>  <span class="keyword">or</span> <span class="keyword">not</span> (tel.isdigit()):</span><br><span class="line">        rasie CustomException(<span class="string">"The prompt is not a tel number"</span>)</span><br><span class="line"><span class="keyword">except</span> CustomException <span class="keyword">as</span> error:</span><br><span class="line">    print(<span class="string">'异常: %s'</span>%error)</span><br></pre></td></tr></table></figure></div><h3 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h3><h5 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h5><p>python模块是一个python文件 任何以.py结尾的 都可以作为模块导入</p><p>模块内容可以是全局变量 函数  类  和可以执行的代码、</p><h5 id="引入模块的不同方式"><a href="#引入模块的不同方式" class="headerlink" title="引入模块的不同方式"></a>引入模块的不同方式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 文件名</span><br><span class="line"><span class="comment"># 任何.py文件都可以作为模块导入</span></span><br><span class="line"><span class="comment"># 导入模块的方式1 </span></span><br><span class="line"><span class="comment"># import module</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块的第二种方式是</span></span><br><span class="line"><span class="keyword">from</span> 文件名  <span class="keyword">import</span> 名字</span><br><span class="line"><span class="comment"># 局部导入 从模块中导入指定部分到当前的空间中</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> fun1</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from……import * 语句</span></span><br><span class="line"><span class="comment"># 把每一个模块所有的内容都导入到当前的空间</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br><span class="line">fun1()</span><br><span class="line">print(count)</span><br><span class="line">print(Dog())</span><br></pre></td></tr></table></figure></div><h5 id="导入模块时-all-的作用"><a href="#导入模块时-all-的作用" class="headerlink" title="导入模块时__all__的作用"></a>导入模块时__all__的作用</h5><blockquote><p>主要用来控制模块 from XX import * 导入的内容</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A 模块中</span></span><br><span class="line"><span class="keyword">from</span> B <span class="keyword">import</span> *</span><br><span class="line">print(count)</span><br><span class="line">dog1 = Dog()</span><br><span class="line">fun1()</span><br><span class="line"><span class="comment"># B 模块中</span></span><br><span class="line">__all__ = [<span class="string">'count'</span>, <span class="string">'Dog'</span>, <span class="string">'fun1'</span>]</span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><h5 id="name"><a href="#name" class="headerlink" title="_name_"></a>_<em>name_</em></h5><blockquote><p>_<em>name_</em> 就是标识模块的名字的一个系统变量</p></blockquote><p><strong>主动执行文件时， __<em>name_\</em> 是 __main__</strong></p><p><strong>作为模块被导入时  _<em>name_</em> 是文件名</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A模块中</span></span><br><span class="line"><span class="keyword">import</span> B <span class="keyword">as</span> b</span><br><span class="line">print(__name__) <span class="comment"># __main__</span></span><br><span class="line">print(b.__name__) <span class="comment"># B</span></span><br><span class="line"><span class="comment"># B模块中</span></span><br></pre></td></tr></table></figure></div><blockquote><p>import  sys   sys.path 获得python解释器查询模块的目录</p></blockquote><h5 id="理解python包的概念"><a href="#理解python包的概念" class="headerlink" title="理解python包的概念"></a>理解python包的概念</h5><blockquote><p>包:  在项目中的子文件夹  </p><p>作用: 对同类功能的模块进行目录的整合</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块的时候</span></span><br><span class="line"><span class="keyword">import</span> msg.send</span><br><span class="line"><span class="comment"># 包名.文件名.函数</span></span><br><span class="line">msg.send.msg_send_fun()</span><br><span class="line"><span class="comment"># 在包中的子文件夹中的文件 也得加上包名  即使是同级</span></span><br></pre></td></tr></table></figure></div><h5 id="了解-init-py-文件的作用"><a href="#了解-init-py-文件的作用" class="headerlink" title="了解__init__.py 文件的作用"></a>了解__init__.py 文件的作用</h5><blockquote><p>在python2 解释器中  如果创建包的时候 如果没有__init__.py文件就会报错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第8节-面向对象2</title>
      <link href="/2017/01/25/python%E6%95%99%E7%A8%8B-2018-1-25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/"/>
      <url>/2017/01/25/python%E6%95%99%E7%A8%8B-2018-1-25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="第二个魔法方法"><a href="#第二个魔法方法" class="headerlink" title="第二个魔法方法"></a>第二个魔法方法</h2><p><strong><strong>str</strong>(self)魔法方法</strong></p><blockquote><p>如果直接print打印对象 就会看到创建出来的对象在内存中的地址</p><p><strong>str</strong>使用print(对象)输出对象的时候，自动调用该方法 </p><p>该方法通常会返回一个返回值 类型为字符串</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> 返回值</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"描述信息"</span></span><br><span class="line">one = Dog()</span><br><span class="line">print(one)</span><br></pre></td></tr></table></figure></div><p><strong><strong>del</strong>(self)魔法方法</strong></p><p>_<strong>_de</strong>l__(self):</p><blockquote><p>当对象在销毁前 自动调用该方法 （析构方法）</p><p>析构方法作用：做一些额外的工作 比如 垃圾回收（释放变量） 关闭文件或文件夹</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"悟空"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s快死了,没有血量"</span>%self.name)</span><br><span class="line">one = Game()</span><br><span class="line"><span class="keyword">del</span> one  <span class="comment"># 删除该实例对象 触发del自动调用</span></span><br><span class="line"></span><br><span class="line">注意：函数内部的实例化 <span class="keyword">del</span>的生存周期就在函数执行期间  执行完毕 局部变量就会释放</span><br></pre></td></tr></table></figure></div><p><strong>总结：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span> 创建对象的时候自动调用</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__str__</span><span class="params">(self)</span> 输出一个对象<span class="title">print</span>（对象）</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__del__</span><span class="params">(self)</span> 对象被销毁  自动调用该方法</span></span><br></pre></td></tr></table></figure></div><h5 id="案例-搬家具"><a href="#案例-搬家具" class="headerlink" title="案例 搬家具"></a>案例 搬家具</h5><p>搬家具规则：</p><p>1.家具分不同的类型，并占用不同的面积</p><p>2.输出家具信息时，显示家具的类型和家具占用的面积 ——————————————————————————————————————————————————————</p><p>3.房子有自己的地址和占用的面积</p><p>4.房子可以添加家具，如果房子的剩余面积可以容纳家具，则提示家具添加成功；否则提示添加失败</p><p>5.输出房子信息时，可以显示房子的地址、占地面积、剩余面积</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self, type, area)</span>:</span></span><br><span class="line">        self.type = type</span><br><span class="line">        self.area = area</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"家具的类型%s 家具的占用面积%0.1f"</span>%(self.type, self.area)</span><br><span class="line">bed = Item(<span class="string">"双人床"</span>, <span class="number">4.9</span>)</span><br><span class="line">print(bed)</span><br><span class="line">sofa = Item(<span class="string">"沙发"</span>, <span class="number">6.7</span>)</span><br><span class="line">print(sofa)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, areas)</span>:</span></span><br><span class="line">        self.address = address</span><br><span class="line">        self.areas = areas</span><br><span class="line">        self.free_area = areas</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area - item.area &gt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"添加成功"</span>)</span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"添加失败"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"房屋的地址%s 房屋的面积%.1f, 房屋的剩余面积%.1f"</span>%(self.address, self.areas, self.free_area)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">bed = Item(<span class="string">"双人床"</span>, <span class="number">4.9</span>)</span><br><span class="line">sofa = Item(<span class="string">"沙发"</span>, <span class="number">10</span>)</span><br><span class="line">print(bed)</span><br><span class="line">print(sofa)</span><br><span class="line">home = Home(<span class="string">"顺义"</span>, <span class="number">60</span>) <span class="comment"># 房屋对象</span></span><br><span class="line">home.add_item(bed)</span><br><span class="line">home.add_item(sofa)</span><br></pre></td></tr></table></figure></div><h5 id="我的搬家具代码"><a href="#我的搬家具代码" class="headerlink" title="我的搬家具代码"></a>我的搬家具代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveFurniture</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 设置一些家具的数据 以及家的信息数据</span></span><br><span class="line">    self.furn = &#123;<span class="string">"沙发"</span>: <span class="number">5</span>, <span class="string">"床"</span>: <span class="number">10</span>, <span class="string">"椅子"</span>: <span class="number">2</span>, <span class="string">"桌子"</span>: <span class="number">4</span>, <span class="string">"柜子"</span>: <span class="number">6</span>&#125;</span><br><span class="line">    self.home = &#123;<span class="string">"address"</span>: <span class="string">"北京市顺义区"</span>, <span class="string">"area"</span>: <span class="number">0</span>, <span class="string">'rest_area'</span>: <span class="number">0</span>&#125; </span><br><span class="line">    <span class="comment"># 设置一个开关 判断是否找到对应的家具</span></span><br><span class="line">    self.bool = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, area, furniture)</span>:</span></span><br><span class="line">        self.home.area = self.home.rest_home = area</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> self.furn.items():</span><br><span class="line">        <span class="keyword">if</span> k == furniture:</span><br><span class="line">                <span class="keyword">if</span> self.home.rest_home - v &gt;= <span class="number">0</span>:</span><br><span class="line">                    self.home.rest_home -= v</span><br><span class="line">                    </span><br><span class="line">                    print(<span class="string">"添加成功"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"剩余面积不足，无法添加家具"</span>)</span><br><span class="line">                self.bool = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.bool:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"没有你对应的家具"</span></span><br><span class="line">        title = <span class="string">"添加的家具类型\t\t占用的面积\n"</span></span><br><span class="line">        furn_str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> self.furn.items():</span><br><span class="line">            furn_str += <span class="string">"%-16s\t\t%d"</span>%(k,v)</span><br><span class="line">        msg2 = <span class="string">'房子的地址为%s  房子的占地面积为 %d  房子的剩余面积为%d\n'</span>%(self.home.address, self.home.area, self.home.rest_area)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(<span class="string">"*"</span> * <span class="number">20</span> + <span class="string">"\n"</span>, title + str_msg, msg2)</span><br><span class="line">        </span><br><span class="line">S = int(input(<span class="string">"请输入家占地面积："</span>))      </span><br><span class="line">f = MoveFurniture(S, input(<span class="string">"请输入要添加的家具:"</span>))</span><br></pre></td></tr></table></figure></div><h5 id="烤地瓜案例"><a href="#烤地瓜案例" class="headerlink" title="烤地瓜案例"></a>烤地瓜案例</h5><p>烤地瓜规则：</p><p>1.地瓜有自己的状态，默认是生的，地瓜可以进行烧烤</p><p>2.地瓜有自己烧烤的总时间，由每次烧烤的时间累加得出</p><p>3.地瓜烧烤时，需要提供本次烧烤的时间</p><p>4.地瓜烧烤时，地瓜状态随着烧烤总时间的变化而改变：</p><pre><code>[0, 3) 生的、[3, 6) 半生不熟、[6, 8) 熟了、&gt;=8 烤糊了</code></pre><ol start="5"><li>输出地瓜信息时，可以显示地瓜的状态和烧烤的总时间</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="string">'生的'</span></span><br><span class="line">        self.total_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook_time</span><span class="params">(self, time)</span>:</span></span><br><span class="line">        self.total_time += time</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.total_time &gt;= <span class="number">0</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.state = <span class="string">'生的'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">3</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">6</span>:</span><br><span class="line">            self.state = <span class="string">'半生不熟'</span></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">6</span> <span class="keyword">and</span> self.total_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.state = <span class="string">'熟了'</span></span><br><span class="line">        <span class="keyword">elif</span> self.total_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.state = <span class="string">'烤糊了'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'地瓜状态%s 当前的烧烤总时间为%d'</span> % (self.state, self.total_time)</span><br><span class="line"></span><br><span class="line">sp1 = SweetPotato()</span><br><span class="line"></span><br><span class="line">sp1.cook_time(<span class="number">2</span>)</span><br><span class="line">print(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">3</span>)</span><br><span class="line">print(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">1</span>)</span><br><span class="line">print(sp1)</span><br><span class="line">sp1.cook_time(<span class="number">4</span>)</span><br><span class="line">print(sp1)</span><br></pre></td></tr></table></figure></div><h3 id="面向对象的三个特性"><a href="#面向对象的三个特性" class="headerlink" title="面向对象的三个特性"></a>面向对象的三个特性</h3><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><ol><li><p>将属性和方法封装成一个整体 然后通过实例化一个对象来处理</p></li><li><p>将功能代码进行打包 对外提供功能接口 无需关系内部实现</p></li></ol><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>单继承</p><p>子类继承父类的属性和方法</p><p><code>class 子类（父类）</code></p><blockquote><p>继承的作用：减少冗余代码 </p><p>为什么要继承？ 功能的升级和扩展 对原有的功能进行完善（重写）</p><p>功能的扩展 原来没有的功能进行添加</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃的方法"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"喝啤酒"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xtq</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"飞"</span>)</span><br><span class="line">xtq = Xtq()</span><br><span class="line">xtq.eat()</span><br><span class="line">xtq.drink()  <span class="comment"># 继承父类</span></span><br><span class="line">xtq.fly()   <span class="comment"># 自己的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"妈妈喜欢吃榴莲"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'爸爸喝酒'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Mother, Father)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 多继承中 如果父类中出现相同方法 则第一个继承的父类中方法优先级高</span></span><br></pre></td></tr></table></figure></div><h5 id="支持多层继承"><a href="#支持多层继承" class="headerlink" title="支持多层继承"></a>支持多层继承</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandpa</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'1万元'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">(Grandpa)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hourse</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"一套房子"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Father)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">one = Child()</span><br></pre></td></tr></table></figure></div><h5 id="查看类的继承链"><a href="#查看类的继承链" class="headerlink" title="查看类的继承链"></a>查看类的继承链</h5><p><code>格式 类名.__mro__</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个动物类 ，有给方法汪汪叫</span></span><br><span class="line"><span class="comment"># 定义一个子类 Dog，继承了动物类 ,添加一个方法可以吃骨头</span></span><br><span class="line"><span class="comment"># 定义一个子类Xtq，继承了Dog类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span>  <span class="comment"># object  基类   所有类的老祖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dark</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"叫"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃骨头"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xtq</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">xtq = Xtq()</span><br><span class="line">xtq.eat()  <span class="comment"># Dog父类</span></span><br><span class="line">xtq.dark()  <span class="comment"># Animal 父类</span></span><br><span class="line"><span class="comment"># 好看继承连  类名.__mro__</span></span><br><span class="line">print(Xtq.__mro__)</span><br><span class="line"><span class="comment"># (&lt;class'__main__.Xtq'&gt;,&lt;class'__main__.Dog'&gt;,&lt;class'__main__.Animal'&gt;,&lt;class'object'&gt;)</span></span><br></pre></td></tr></table></figure></div><h5 id="魔法方法-init-，都会被子类所继承"><a href="#魔法方法-init-，都会被子类所继承" class="headerlink" title="魔法方法__init__，都会被子类所继承"></a>魔法方法__init__，都会被子类所继承</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"学生姓名 %s 年龄:%d"</span>%(self.name, self.age)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">s1 = ItcastStudent()</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure></div><h5 id="父类方法的重写"><a href="#父类方法的重写" class="headerlink" title="父类方法的重写"></a>父类方法的重写</h5><blockquote><p>当父类和子类方法名都相同的情况下 默认是有子类的方法</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃肉"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃草"</span>)</span><br><span class="line">        </span><br><span class="line">tz = Rabbit()</span><br><span class="line">tz.eat()</span><br></pre></td></tr></table></figure></div><h5 id="调用被重写的父类方法"><a href="#调用被重写的父类方法" class="headerlink" title="调用被重写的父类方法"></a>调用被重写的父类方法</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"学生姓名 %s 年龄:%d"</span> % (self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'aa'</span>,<span class="number">33</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.aaa = <span class="string">'aaa'</span></span><br><span class="line">        <span class="comment"># Student.__init__(self,name,age)</span></span><br><span class="line">        <span class="comment"># super().__init__(name,age)</span></span><br><span class="line">        super(ItcastStudent,self).__init__(name,age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = ItcastStudent(<span class="string">'zag'</span>, <span class="number">27</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子类重写了父类方法，仍然想执行父类中的方法</span></span><br><span class="line"><span class="string">父类名.方法名（self）</span></span><br><span class="line"><span class="string">super(类名 ,self).方法名()  super函数会查询继承连中指定类的下一个类</span></span><br><span class="line"><span class="string">super().方法名()    当前类的下一个类的方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 注意 如果 同时调用子类和父类重写的方法  被子类重写的优先</span></span><br></pre></td></tr></table></figure></div><h4 id="案例：模拟软件安装"><a href="#案例：模拟软件安装" class="headerlink" title="案例：模拟软件安装"></a>案例：模拟软件安装</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, version, desc)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.version = version</span><br><span class="line">        self.desc = desc</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self, path=<span class="string">"C://window/program/user"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'安装的软件为%s 版本是%s 描述信息：'</span>%(self.name, self.version, self.desc))</span><br><span class="line">    print(<span class="string">'安装路径%s'</span>%path)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qq</span><span class="params">(App)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">qq = Qq(<span class="string">"qq电脑版"</span>, <span class="string">'v12.6.3'</span>, <span class="string">"聊天神器"</span>)</span><br><span class="line">qq.install()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pycharm</span><span class="params">(App)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self,path)</span>:</span></span><br><span class="line">        super().install(path)</span><br><span class="line">pycharm = Pycharm()</span><br><span class="line">pycharm.install()</span><br></pre></td></tr></table></figure></div><h3 id="多态的特性"><a href="#多态的特性" class="headerlink" title="多态的特性"></a>多态的特性</h3><blockquote><p>多态概念是应用于java和C#这一强类型语言中 而python崇尚<strong>鸭子类型</strong></p></blockquote><p>多态 不同的子类的对象调用相同的父类的方法 参数不同的执行效果可以增加外部的调用的灵活性</p><p><strong><em>多态是以继承和重写代码方法为前提</em></strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wolf</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'追击敌人'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"追击毒品"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_with</span><span class="params">(self,animal)</span>:</span></span><br><span class="line">        animal.work()</span><br><span class="line">p = People()</span><br><span class="line">p.work_with(Wolf())</span><br><span class="line">p.work_with(Dog())</span><br></pre></td></tr></table></figure></div><h3 id="实例属性和方法"><a href="#实例属性和方法" class="headerlink" title="实例属性和方法"></a>实例属性和方法</h3><p>self.属性名 = 属性值  实例属性  通常在类的初始化init方法中添加</p><p>def 方法名(self):  对象的方法在类中定义 通常创建一个对象 在内存中开辟一块空间</p><h3 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h3><ul><li>类属性就是类对象所拥有的属性  它被该类的所有的实例对象所共有</li><li>类属性可以使用类对象或者实例对象访问</li><li>类属性和类方法可以被所有的对象共享，内存中只存储一份</li><li>通常<strong>类名.方法名()</strong>来调用  <strong>类名.属性名</strong>获取</li><li>类方法可以操作类属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    类属性 = 值</span><br><span class="line"><span class="comment"># 访问类的属性</span></span><br><span class="line">类名.属性</span><br></pre></td></tr></table></figure></div><blockquote><p>注意： 如果类属性和实例属性重名 那么通过实例对象访问的时候 优先获取实例属性</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名<span class="params">(cls)</span></span></span><br><span class="line"><span class="function"># 调用类的方法</span></span><br><span class="line"><span class="function">类名.方法名<span class="params">()</span></span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  案例  统计访问网站的pv值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSitePv</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'欢迎进入 itcast 官网'</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'当前网站的pv为%d'</span>%cls.count)</span><br><span class="line">pv  = WebSitePv()</span><br><span class="line">WebSitePv.get_count()</span><br></pre></td></tr></table></figure></div><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><blockquote><p>不用传递任何参数的时候 就可以使用静态方法</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义静态方法格式</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名<span class="params">()</span></span></span><br><span class="line"><span class="function"># <span class="title">for</span> <span class="title">example</span></span></span><br><span class="line"><span class="function">@<span class="title">staticmethod</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">'dog is our good friend'</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">类名.方法名()</span><br></pre></td></tr></table></figure></div><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><blockquote><p>__属性   私有属性</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__age = <span class="number">10</span></span><br><span class="line">one = Dog()</span><br><span class="line">print(one.__age) <span class="comment"># 私有属性在类外不能直接被访问</span></span><br></pre></td></tr></table></figure></div><p><strong>私有属性的作用</strong></p><ul><li>为了避免属性被设置为脏数据  更好的保护属性安全 一般处理方式为添加一个方法</li></ul><p>在方法内部先判断数据的有效性 再赋值属性</p><ul><li>将属性定义为私有属性 避免对象在外部直接操作</li></ul><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><blockquote><p>__方法名  私有方法只能在内部使用</p></blockquote><p>私有属性和方法的设计目的是：</p><ul><li>保护数据或操作的安全性</li><li>向使用者隐藏核心的开发细节</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'个人隐私 切勿暴露'</span>）</span><br><span class="line">              </span><br><span class="line">one = Person()</span><br><span class="line">one.__show()  <span class="comment"># 无法调用</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第7节-面向对象1</title>
      <link href="/2017/01/22/python%E6%95%99%E7%A8%8B-2018-1-22-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/"/>
      <url>/2017/01/22/python%E6%95%99%E7%A8%8B-2018-1-22-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><hr><p>递归创建目录 data/msg</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">'data/msg'</span>)</span><br></pre></td></tr></table></figure></div><p>删除目录文件夹和里面的内容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">shutile.rmtree(data) <span class="comment"># 删除data文件夹以及里面的内容</span></span><br></pre></td></tr></table></figure></div><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h4 id="面向对象和面向过程区别"><a href="#面向对象和面向过程区别" class="headerlink" title="面向对象和面向过程区别"></a>面向对象和面向过程区别</h4><p>面向过程</p><ul><li>面向过程 是一种编程思想</li><li>面向过程是以过程（步骤）为中心的编程思想</li><li>过程就是平常所说的方法步骤，也是人类的一种习惯 把一个大的问题分解若干小问题，按照顺序依次解决</li></ul><blockquote><p>问题：代码易冗余 结构过于紧密 耦合度高 不利于团队开发</p></blockquote><p>面向对象</p><ul><li>面向对象也是一种编程思想</li><li>面向对象是以事务对象为中心的编程思想</li><li>每个步骤，都可以看成是一个对象 用对象完成任务</li><li>面向过程着重于<strong>做什么</strong> 面向对象着重于<strong>谁来做？</strong></li></ul><blockquote><p>面向对象编程其实就是对面向过程的代码进行的高度封装</p></blockquote><h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h4><p>人以类聚 物以群分</p><p>具有相似的内部状态和运动规律的实体的集合（或统称为抽象）</p><p>具有相同属性和行为事物的统称</p><ul><li><p>类就是类别、分类、归类、理论、概念、无形的东西(看不见、摸不着)。如：学生类、</p></li><li><p>类是由相同属性(特征)和方法(行为、动作)的对象构成的一个集合。</p></li><li><p>类还可以看成”图纸”、对象可以看成”楼房”；</p><p><a href="/img/images/pic/%E5%9B%BE%E7%BA%B8.png" data-fancybox="group" data-caption="图纸" class="fancybox"><img alt="图纸" title="图纸" data-src="/img/images/pic/%E5%9B%BE%E7%BA%B8.png" src="/img/loading.gif" class="lazyload"></a></p></li></ul><h4 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h4><ul><li>对象是现实中的每一个实体 都可以看成一个对象</li><li>对象也是由属性和方法构成</li><li>在计算机中 必须先有类  再有对象</li><li>每一个对象 都应该归属于哪个类  对象不能单独存在</li></ul><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><p>类是总结事物特征的 抽象概念 而对象是具体存在的某个实物</p><p><a href="/img/images/pic/%E6%A8%A1%E5%9E%8B.png" data-fancybox="group" data-caption="模型" class="fancybox"><img alt="模型" title="模型" data-src="/img/images/pic/%E6%A8%A1%E5%9E%8B.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>类就是创建对象的模版</strong></p><p><strong>先有类，才有对象</strong></p><p>类的三个部分</p><ol><li>类的名称 </li><li>类的属性</li><li>类的方法</li></ol><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    方法列表</span><br><span class="line">注意：类名 命名规则 按照 大驼峰 UserName</span><br></pre></td></tr></table></figure></div><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class"><span class="title">def</span> 方法名（<span class="title">self</span>）:</span></span><br><span class="line">        代码</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>python语法要求 方法必须定义在类中 如果某个行为只有一个对象拥有，也需要为该对象 单独设计一个类</strong></p></blockquote><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引用对象的变量名 = 类名()</span><br></pre></td></tr></table></figure></div><h4 id="调用对象的方法"><a href="#调用对象的方法" class="headerlink" title="调用对象的方法"></a>调用对象的方法</h4><p>格式<code>对象的变量名.方法名()</code></p><h4 id="self的意义"><a href="#self的意义" class="headerlink" title="self的意义"></a>self的意义</h4><p>关键字 self 主要用于对象方法中 表示<strong>调用该方法的对象</strong></p><p>某一个对象调用其方法时 python解释器会把这个对象作为第一个参数传递给方法，所以开发者只需要在定义方法时 预留第一个参数为self即可</p><h4 id="在类的内部定义对象的属性"><a href="#在类的内部定义对象的属性" class="headerlink" title="在类的内部定义对象的属性"></a>在类的内部定义对象的属性</h4><p>魔法方法 <strong><strong>init</strong></strong>()方法的使用 通常进行对象的初始化工作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'我的名字叫%s'</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我的年龄是%d"</span> % self.age)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_MaxScore</span><span class="params">(self)</span>:</span></span><br><span class="line">        num = max(self.score)</span><br><span class="line">        print(<span class="string">"我的成绩中最高分数是%d"</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line">print()</span><br><span class="line">aa = Student(<span class="string">'小明'</span>, <span class="number">24</span>, [<span class="number">88</span>, <span class="number">76</span>, <span class="number">95</span>])</span><br><span class="line">bb = Student(<span class="string">'小花'</span>, <span class="number">22</span>, [<span class="number">79</span>, <span class="number">94</span>, <span class="number">68</span>])</span><br><span class="line"></span><br><span class="line">aa.get_name()</span><br><span class="line">aa.get_age()</span><br><span class="line">aa.get_MaxScore()</span><br><span class="line">print()</span><br><span class="line">print()</span><br><span class="line">bb.get_name()</span><br><span class="line">bb.get_age()</span><br><span class="line">bb.get_MaxScore()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第6节-文件系统操作</title>
      <link href="/2017/01/16/python%E6%95%99%E7%A8%8B-2018-1-16-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/01/16/python%E6%95%99%E7%A8%8B-2018-1-16-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><blockquote><p>什么是文件：计算机文件是以计算机硬盘为载体存储在计算机上的信息集合 文件可以是文本，图片，视频等</p></blockquote><p><a href="/img/images/pic/cpu_mem.png" data-fancybox="group" data-caption="cpu_mem" class="fancybox"><img alt="cpu_mem" title="cpu_mem" data-src="/img/images/pic/cpu_mem.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="文件的作用"><a href="#文件的作用" class="headerlink" title="文件的作用"></a>文件的作用</h5><blockquote><p>可以永久保存下来 断电不丢失 程序执行完数据不会被强制释放</p></blockquote><p>如果想用word编写一份简历 应该有哪些流程？</p><ol><li>打开word软件 新建一个文本文档</li><li>写入个人简历信息</li><li>关闭word文档</li></ol><p>同样 操作文件的整体过程是很类似的</p><ol><li>打开文件 或者建立一个文件</li><li>读写数据</li><li>关闭文件</li></ol><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法： 变量 = open(文件名,访问模式)</span></span><br><span class="line"><span class="comment"># 文件名 打开的文件</span></span><br><span class="line"><span class="comment"># 访问模式 对文件进行 读取 还是 写入 还是追加</span></span><br><span class="line"><span class="comment"># python中 使用open函数</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th>访问模式</th><th align="center">解释</th></tr></thead><tbody><tr><td>r</td><td align="center">以只读方式打开文件，文件指针放在文件开头，这是默认模式</td></tr><tr><td>w</td><td align="center">以写入方式打开，如果文件已存在则将其覆盖，如果文件不存在，则创建新文件</td></tr><tr><td>a</td><td align="center">以追加的方式打开文件，如果文件存在，则指针放在文件末尾，新内容会追加到已有内容之后，如果文件不存在，创建新的文件写入</td></tr><tr><td>r+</td><td align="center">打开一个文件用于读写，文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td align="center">打开一个文件用于读写，该文件存在则会覆盖原来内容，如果不存在，则会创建一个新的文件</td></tr><tr><td>a+</td><td align="center">以追加的模式进行读写，如果存在该文件，指针放在文件的末尾，文件打开时是追加模式，如果文件不存在，创建新文件用于读写</td></tr><tr><td>rb+</td><td align="center">以二进制格式打开一个文件用于读写，文件指针放在开头</td></tr><tr><td>wb+</td><td align="center">以二进制格式打开一个文件用于读写，如果该文件已经存在则将其覆盖，如果文件不存在，则创建新文件</td></tr><tr><td>ab+</td><td align="center">以二进制格式打开一个文件 用于追加 如果该文件已经存在 文件指针放在结尾，如果文件不存在，创建新文件用于写入</td></tr></tbody></table><h5 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h5><blockquote><p>格式 close()</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件 文件名 test.txt</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'hello python'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><h5 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h5><p>f.read()</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件 r 读取数据 read</span></span><br><span class="line">f = open(<span class="string">'123.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="comment"># 读取文件 f.read() 将文件所有的内容一次性读取 如果内容非常多，内存就会出现峰值</span></span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># f.read(num) num设置读取的字节 如果没有传入num 则全部读取</span></span><br></pre></td></tr></table></figure></div><p>f.readline() 每次读取一行 </p><p>f.readlines() 读取每一行然后以列表的形式返回</p><p>f.writelines() 以列表的形式 将每一行文本 写入文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lists = [</span><br><span class="line">    <span class="string">'一望二三里'</span>,</span><br><span class="line">    <span class="string">'烟村四五家'</span>,</span><br><span class="line">    <span class="string">'亭台六七座'</span>,</span><br><span class="line">    <span class="string">'八九十枝花'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'tangshi.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lists = [i + <span class="string">"\n"</span> <span class="keyword">for</span> i <span class="keyword">in</span> lists]</span><br><span class="line">    f.writelines(lists)</span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'tangshi.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># con = f.readlines()</span></span><br><span class="line">    <span class="comment"># print(con)</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        con = f.readline(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> len(con) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(con)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></div><p>应用1 制作文件备份</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 123.提醒他 123副本.txt</span></span><br><span class="line">file = <span class="string">'123.txt'</span></span><br><span class="line">oldf = open(file, <span class="string">'r'</span>)</span><br><span class="line">content = oldf.read()</span><br><span class="line"><span class="comment"># 创建一个新的文件 并写入内容</span></span><br><span class="line">newf = open(<span class="string">'123副本.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">newf.write(content)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">oldf.close()</span><br><span class="line">newf.close()</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"tests.txt"</span>, <span class="string">'r'</span>)</span><br><span class="line">con = f.read(<span class="number">3</span>)</span><br><span class="line">print(con)</span><br><span class="line">p1 = f.tell() <span class="comment"># 查看当前文件的指针光标的位置</span></span><br><span class="line">print(p1)</span><br><span class="line">con2 = f.read(<span class="number">5</span>)</span><br><span class="line">print(con)</span><br></pre></td></tr></table></figure></div><h5 id="定位到某一个位置"><a href="#定位到某一个位置" class="headerlink" title="定位到某一个位置"></a>定位到某一个位置</h5><p>seek(offset,from) 有2个参数</p><p>from方向：</p><ol start="0"><li>表示文件的开头</li><li>表示当前的位置</li><li>表示文件的末尾</li></ol><blockquote><p>只有二进制格式的方式 才可以从1和2的位置往前定位 此时offset为负数</p></blockquote><hr><h2 id="文件的相关操作-os模块"><a href="#文件的相关操作-os模块" class="headerlink" title="文件的相关操作 (os模块)"></a>文件的相关操作 (os模块)</h2><h5 id="os模块完成对文件的重命名"><a href="#os模块完成对文件的重命名" class="headerlink" title="os模块完成对文件的重命名"></a>os模块完成对文件的重命名</h5><ol><li><p>文件的重命名操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(<span class="string">'aa.txt'</span>, <span class="string">'bb.txt'</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>删除一个文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(文件名)</span><br></pre></td></tr></table></figure></div></li><li><p>创建文件夹</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">'张三'</span>)</span><br><span class="line"><span class="comment"># 如果文件夹存在 则会报错 文件夹不能重复</span></span><br></pre></td></tr></table></figure></div></li><li><p>获取当前的路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure></div></li><li><p>获取目录列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir()</span><br></pre></td></tr></table></figure></div></li><li><p>更改当前路径</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>删除一个文件夹</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">"张三"</span>)</span><br><span class="line"><span class="comment"># 文件夹不存在 则会报错 非空文件夹不能删除</span></span><br></pre></td></tr></table></figure></div></li></ol><p>扩展：判断文件是否存在</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">bool = os.path.exist(<span class="string">'文件'</span>) 如果存在 是<span class="literal">True</span>  否则  <span class="literal">False</span></span><br></pre></td></tr></table></figure></div><p><strong>eval()函数</strong></p><blockquote><p>eval()官方文档中给出的功能解释是 将字符串string对象转化为有效的表达式参与运算并返回结果</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'[3,4,5,6]'</span></span><br><span class="line"></span><br><span class="line">lists = eval(str)</span><br><span class="line"></span><br><span class="line">print(lists)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str2 = <span class="string">'&#123;"name":"tom", "age":36&#125;'</span></span><br><span class="line"></span><br><span class="line">print(eval(str2))</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第5节-函数及应用</title>
      <link href="/2017/01/15/python%E6%95%99%E7%A8%8B-2018-1-15-%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2017/01/15/python%E6%95%99%E7%A8%8B-2018-1-15-%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="一-函数的快速体验"><a href="#一-函数的快速体验" class="headerlink" title="一.函数的快速体验"></a>一.函数的快速体验</h4><ol><li>打印星星案例 封装成一个函数 </li><li>函数的调用</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 星星案例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">      j = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">          print(<span class="string">"*"</span>, end=<span class="string">""</span>)</span><br><span class="line">          j += <span class="number">1</span></span><br><span class="line">      print()</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></div><h4 id="二-函数的基本使用"><a href="#二-函数的基本使用" class="headerlink" title="二.函数的基本使用"></a>二.函数的基本使用</h4><blockquote><p>函数就是将一段独立功能代码块 封装起来 形成一个独立实体</p></blockquote><h5 id="函数的优点"><a href="#函数的优点" class="headerlink" title="函数的优点"></a>函数的优点</h5><pre><code>***提高工作效率，减少代码的冗余 提高重用性***</code></pre><h5 id="函数的基本定义格式"><a href="#函数的基本定义格式" class="headerlink" title="函数的基本定义格式"></a>函数的基本定义格式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">    函数体（函数封装的代码）</span><br><span class="line">    ……</span><br><span class="line"><span class="comment"># def  是define缩写</span></span><br><span class="line"><span class="comment"># 案例 洗衣服洗衣的过程 定义成一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">washing</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"进水"</span>)</span><br><span class="line">    print(<span class="string">"洗衣服"</span>)</span><br><span class="line">    print(<span class="string">"放水"</span>)</span><br><span class="line"> washing() <span class="comment"># 调用函数  定义函数不会主动执行</span></span><br></pre></td></tr></table></figure></div><h5 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">washing</span><span class="params">()</span>:</span>  <span class="comment"># 第一步</span></span><br><span class="line">   <span class="comment"># 第三步 进入函数体内部</span></span><br><span class="line">print(<span class="string">"注水"</span>)</span><br><span class="line">    print(<span class="string">"洗衣服"</span>)</span><br><span class="line">    print(<span class="string">"放水"</span>)</span><br><span class="line">    print(<span class="string">"脱水"</span>)</span><br><span class="line">washing() <span class="comment"># 第二步</span></span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">30</span>) <span class="comment"># 第四步</span></span><br></pre></td></tr></table></figure></div><h5 id="给函数添加注释"><a href="#给函数添加注释" class="headerlink" title="给函数添加注释"></a>给函数添加注释</h5><p><code>给函数添加注释 &quot;&quot;&quot;添加注释的内容&quot;&quot;&quot;</code></p><p><a href="/img/images/pic/comment.png" data-fancybox="group" data-caption="comment" class="fancybox"><img alt="comment" title="comment" data-src="/img/images/pic/comment.png" src="/img/loading.gif" class="lazyload"></a></p><h4 id="三-带有参数的函数定义的格式"><a href="#三-带有参数的函数定义的格式" class="headerlink" title="三.带有参数的函数定义的格式"></a>三.带有参数的函数定义的格式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(形参1， 形参2……)  # 形参相当于局部变量</span><br><span class="line">函数的代码</span><br></pre></td></tr></table></figure></div><p>能够理解什么是实参和什么是形参</p><ul><li>形参的作用：接收实参传递的数据，把数据传递给函数的内部</li><li>实参： 调用函数是使用的数据是实参 直接值</li><li>形参：实参的占位，中转站 接收实参传递过来的数据</li></ul><p><a href="/img/images/pic/param.png" data-fancybox="group" data-caption="param" class="fancybox"><img alt="param" title="param" data-src="/img/images/pic/param.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="形参的作用域"><a href="#形参的作用域" class="headerlink" title="形参的作用域"></a>形参的作用域</h5><pre><code>在函数的内部使用，在函数的外部不能使用该形参将真实的数据传递给函数的内部，为真实的数据占位作用范围，就是函数内部形参的作用域是在函数的内部</code></pre><h5 id="函数默认参数的使用"><a href="#函数默认参数的使用" class="headerlink" title="函数默认参数的使用"></a>函数默认参数的使用</h5><ul><li><p>使用实参的值  不使用默认的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span><span class="params">(a=<span class="number">5</span>, b=<span class="number">12</span>)</span>:</span></span><br><span class="line">    print(a + b) <span class="comment"># 15</span></span><br><span class="line">sum_fun(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><p>​</p></li><li><p>形参 前面有默认值 后面也有默认值  否则报错</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span><span class="params">(a=<span class="number">3</span>, b)</span>:</span></span><br><span class="line">    print(a + b)</span><br><span class="line">sum_fun(<span class="number">12</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><p>​</p></li></ul><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><ul><li><strong>给实参指定对应的形参</strong></li><li>关键字参数是给实参加</li><li>默认的参数是给形参加</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(name, sex, job)</span>:</span></span><br><span class="line">    print(<span class="string">"姓名是%s 性别是%s 年龄是: %d"</span> %(name, sex, age))</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">info(age=<span class="number">12</span>,name=<span class="string">"张三丰"</span>, sex=<span class="string">"男"</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p>注意： <em>通常情况下，设置了一个关键字参数，给所有的实参都设置关键字参数</em></p></blockquote><h5 id="函数的可变的（不定长参数）的使用"><a href="#函数的可变的（不定长参数）的使用" class="headerlink" title="函数的可变的（不定长参数）的使用"></a>函数的可变的（不定长参数）的使用</h5><ul><li><p>元组型的可变参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)  <span class="comment"># (3,4)  (6,7,8,9)</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        sum += i</span><br><span class="line">sum_fun(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">sum_fun(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>字典型的可变参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(aa, *args, **kwargs)</span>:</span></span><br><span class="line">    print(aa)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"><span class="comment"># 前面有普通的任意数量的实参，后面是任意数量 关键字参数</span></span><br><span class="line">fun(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,a=<span class="number">10</span>,b=<span class="number">30</span>,c=<span class="number">60</span>)</span><br><span class="line">fun(<span class="number">8</span>,<span class="number">9</span>,d=<span class="number">2</span>,f=<span class="number">98</span>)</span><br></pre></td></tr></table></figure></div><p>​</p></li></ul><h4 id="四-获取函数的返回值"><a href="#四-获取函数的返回值" class="headerlink" title="四.获取函数的返回值"></a>四.获取函数的返回值</h4><blockquote><p>函数的返回值 通过一个变量来接收</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    money = a + b + c</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line">salary = fun(<span class="number">16000</span>, <span class="number">1800</span>, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">if</span> &gt;= <span class="number">15000</span>:</span><br><span class="line">    salary *= <span class="number">0.9</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(salary)</span><br></pre></td></tr></table></figure></div><h5 id="函数中可以返回多个值"><a href="#函数中可以返回多个值" class="headerlink" title="函数中可以返回多个值"></a>函数中可以返回多个值</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span> sum,sub</span><br><span class="line">n1,n2 = fun(<span class="number">4</span>,<span class="number">2</span>) <span class="comment"># 返回返回值为元组形式的多个值 并进行解包</span></span><br></pre></td></tr></table></figure></div><ul><li>总结<ul><li>函数中返回值可以有多个</li><li>函数返回值 需要在函数调用的时候 通过变量接收</li><li>函数中遇到返回值 返回对应的数据 函数终止执行</li><li>函数中如果没有返回值 则直接返回None</li></ul></li></ul><h5 id="函数的四种类型"><a href="#函数的四种类型" class="headerlink" title="函数的四种类型"></a>函数的四种类型</h5><ol><li>无参数 无返回值</li><li>无参数 有返回值</li><li>有参数 无返回值</li><li>有参数 有返回值</li></ol><h5 id="函数嵌套调用"><a href="#函数嵌套调用" class="headerlink" title="函数嵌套调用"></a>函数嵌套调用</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个打印不同样式的函数 并且实现打印任意行 实现函数嵌套</span></span><br><span class="line"><span class="comment"># 一个打印不同样式的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span><span class="params">(style, n)</span>:</span></span><br><span class="line">print(style * n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">much_line</span><span class="params">(style, n)</span>:</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">print_line(style, n)</span><br><span class="line">much_line(<span class="string">"*"</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><h4 id="六-全部变量和局部变量的特点"><a href="#六-全部变量和局部变量的特点" class="headerlink" title="六.全部变量和局部变量的特点"></a>六.全部变量和局部变量的特点</h4><blockquote><p>全部变量 是定义在函数外部 作用于整个文件的变量</p></blockquote><blockquote><p>局部变量 是定义在函数内部 作用于函数内部的变量</p></blockquote><p><strong>在函数的内部可以直接使用全部变量 但无法修改全部变量的值 如果需要修改 则使用global进行声明</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRun</span><span class="params">(y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> y % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> y % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> y % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> isRun(<span class="number">2018</span>)</span><br></pre></td></tr></table></figure></div><h4 id="七-匿名函数"><a href="#七-匿名函数" class="headerlink" title="七.匿名函数"></a>七.匿名函数</h4><blockquote><p>def 函数名()  普通的函数</p></blockquote><blockquote><p>匿名函数：以表达式的形式来定义函数 只能做些简单的处理</p></blockquote><blockquote><p>用lambda 关键字创建的函数  可以省略用def 声明的函数的标准步骤</p></blockquote><p>匿名函数的定义格式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda 形参1， 形参2， 形参数3……：返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(sum(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line">print(f(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">f = (<span class="keyword">lambda</span> a,b:a+b)(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure></div><h4 id="八-递归函数"><a href="#八-递归函数" class="headerlink" title="八.递归函数"></a>八.递归函数</h4><blockquote><p>递归函数 了解三个要素  1.函数调用自身的编程技巧 2递归无限需要给一个出口 3以及递归的计算公式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1 阶乘递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * recursion(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2 斐波那契数列 递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure></div><h5 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表中输入1-100之间的所有的数</span></span><br><span class="line">lists = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 练习  包含10个666</span></span><br><span class="line">lists = [<span class="number">666</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 练习 列表中包含1-10种偶数的平方</span></span><br><span class="line">list1 = [n**<span class="number">2</span> <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 如果 字符串长度大于5 放入列表 过滤</span></span><br><span class="line">name_list = [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br><span class="line">lists = [n <span class="keyword">for</span> n <span class="keyword">in</span> name_list <span class="keyword">if</span> len(n)&gt;<span class="number">5</span>]</span><br></pre></td></tr></table></figure></div><h5 id="引用（了解）"><a href="#引用（了解）" class="headerlink" title="引用（了解）"></a>引用（了解）</h5><p>python中可以使用id函数查看引用的是否为同一个内存空间 如果返回值相同 说明引用相同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">10</span> * <span class="number">10</span></span><br><span class="line">print(a == b) <span class="comment"># 比较两个变量的值是否相等 相等</span></span><br><span class="line">print(id(a)) <span class="comment"># 查看a变量的内存地址</span></span><br><span class="line">print(id(b)) <span class="comment"># 查看b变量的内存地址  两者相同  </span></span><br><span class="line"><span class="comment"># ====================</span></span><br><span class="line"><span class="comment"># python 3.6.2 不一样    版本   python 3.7  id 的地址是一样的  大缓存池</span></span><br><span class="line"><span class="comment"># 小于等于 256  缓存池</span></span><br><span class="line">a = <span class="number">1000</span></span><br><span class="line">print(id(a))</span><br><span class="line">b = <span class="number">10</span>*<span class="number">100</span></span><br><span class="line">print(id(a))</span><br><span class="line"><span class="comment"># ======================</span></span><br><span class="line"><span class="comment"># python 有缓存机制  ,小于  20个  可以进行缓存</span></span><br><span class="line">strs= <span class="string">"hello"</span></span><br><span class="line">print(id(strs))</span><br><span class="line">strs=<span class="string">"hell"</span>+<span class="string">"o"</span></span><br><span class="line">print(id(strs))</span><br><span class="line"><span class="comment"># 大于20位</span></span><br><span class="line">strs= <span class="string">"hellopythonhelloitcast"</span></span><br><span class="line">print(id(strs))</span><br><span class="line">strs=<span class="string">"hellopython"</span>+<span class="string">"helloitcast"</span></span><br><span class="line">print(id(strs))</span><br><span class="line"></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"><span class="comment"># 通过is 语法来判断 两者是否值和地址都相等  如果是 则返回True 否则False</span></span><br><span class="line"><span class="keyword">if</span> dict1 <span class="keyword">is</span> dict2:</span><br><span class="line">    print(<span class="string">'yes'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br></pre></td></tr></table></figure></div><h5 id="可变类型和不可变类型"><a href="#可变类型和不可变类型" class="headerlink" title="可变类型和不可变类型"></a>可变类型和不可变类型</h5><blockquote><p>可变类型： 可以在存储空间中修改内容  数值类型 int bool  float  字符串 str  tuple</p></blockquote><blockquote><p>不可变类型 该数据不可以在存储空间中修改内容   list   dict</p></blockquote><hr><h3 id="九-Python模块"><a href="#九-Python模块" class="headerlink" title="九.Python模块"></a>九.Python模块</h3><p><strong>python模块（module）是一个python文件，任何以.py结尾的，都可以作为模块导入</strong></p><p>模块的内容可以是<strong>全局变量，函数</strong></p><p>～～模块是python程序架构的一个核心概念～～</p><ul><li><p><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</p></li><li><p>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></p></li><li><p>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</p></li><li><p><a href="/img/images/pic/module.png" data-fancybox="group" data-caption="module" class="fancybox"><img alt="module" title="module" data-src="/img/images/pic/module.png" src="/img/loading.gif" class="lazyload"></a></p></li></ul><hr><h3 id="名片管理系统"><a href="#名片管理系统" class="headerlink" title="名片管理系统"></a>名片管理系统</h3><ol><li><p>新建名片</p></li><li><p>显示名片</p></li><li><p>查询名片</p></li></ol><hr><h3 id="函数的高级应用"><a href="#函数的高级应用" class="headerlink" title="函数的高级应用"></a>函数的高级应用</h3><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用生成器产生连续偶数序列并输出三次 测试并运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_even</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        print(<span class="string">"第%d步"</span>%i)</span><br><span class="line">        <span class="keyword">yield</span> i*<span class="number">2</span></span><br><span class="line">g = generator_even()</span><br><span class="line">print(g.__next__())  <span class="comment"># 此处连续执行三次 结果可见 并非每次从头开始</span></span><br><span class="line">print(g.__next__())  <span class="comment"># 而是从上次执行yield语句处继续执行</span></span><br><span class="line">print(g.__next__())</span><br></pre></td></tr></table></figure></div><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用装饰器为前述add函数添加输出原始数据功能并进行返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        print(<span class="string">"参数1为%d,参数2为%d"</span>%(x,y))</span><br><span class="line">        <span class="keyword">return</span> f(x,y)</span><br><span class="line">    <span class="keyword">return</span> new_f</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(add(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 运行结果是 参数1为2  参数2为3</span></span><br><span class="line"><span class="comment">#   5</span></span><br></pre></td></tr></table></figure></div><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">d = outer(<span class="number">5</span>)</span><br><span class="line">print(d(<span class="number">20</span>)) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第4节-字符串</title>
      <link href="/2017/01/11/python%E6%95%99%E7%A8%8B-2018-1-11-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2017/01/11/python%E6%95%99%E7%A8%8B-2018-1-11-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="Python中字符串定义的格式"><a href="#Python中字符串定义的格式" class="headerlink" title="Python中字符串定义的格式"></a>Python中字符串定义的格式</h4><ul><li>在python中用单引号括起来的字符串</li><li>在python中双引号括起来的字符串</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"hello meimei"</span></span><br><span class="line">str2 = <span class="string">'hello 帅哥'</span></span><br><span class="line">str3 = <span class="string">"""python"""</span></span><br></pre></td></tr></table></figure></div><h4 id="通过下标获取字符串中的某个值"><a href="#通过下标获取字符串中的某个值" class="headerlink" title="通过下标获取字符串中的某个值"></a>通过下标获取字符串中的某个值</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"hello"</span></span><br><span class="line">print(str1[<span class="number">2</span>]) <span class="comment"># l</span></span><br><span class="line"><span class="comment"># 可以使用for循环遍历出字符串中的字符</span></span><br><span class="line"><span class="keyword">for</span> every <span class="keyword">in</span> str1:</span><br><span class="line">    print(every)</span><br></pre></td></tr></table></figure></div><h4 id="字符串的常规操作"><a href="#字符串的常规操作" class="headerlink" title="字符串的常规操作"></a>字符串的常规操作</h4><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><table><thead><tr><th>string.isdecimal()</th><th>如果 string ,都是数字 返回 True</th></tr></thead><tbody><tr><td>*<em>String.isalpha() *</em></td><td>*<em>如果 string ,都是字母汉字 , 返回 True  *</em></td></tr></tbody></table><p>练习</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"hello meimei"</span></span><br><span class="line">result = str.isalpha()  <span class="comment"># 判断字符串中是否都是字母 False 有空格 非字母</span></span><br><span class="line">str1 = <span class="string">'12345a'</span></span><br><span class="line">result = str.isdecimal() <span class="comment"># 判断是不是都是数字 False</span></span><br></pre></td></tr></table></figure></div><h5 id="字符串的输出"><a href="#字符串的输出" class="headerlink" title="字符串的输出"></a>字符串的输出</h5><p>demo</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"itheima"</span></span><br><span class="line">job = <span class="string">"fe"</span></span><br><span class="line">address = <span class="string">"北京市"</span></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line">print(<span class="string">'姓名: %s \n工作: %s \n地址: %s'</span>%(name, job, address))</span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------</span></span><br><span class="line"><span class="comment"># 姓名: itheima </span></span><br><span class="line"><span class="comment"># 工作: fe </span></span><br><span class="line"><span class="comment"># 地址: 北京市</span></span><br><span class="line"><span class="comment"># ------------------------------</span></span><br></pre></td></tr></table></figure></div><h4 id="字符串中的下标和切片概念"><a href="#字符串中的下标和切片概念" class="headerlink" title="字符串中的下标和切片概念"></a>字符串中的下标和切片概念</h4><blockquote><p>列表与元组的下标索引概念好理解 那么字符串的下标可以理解为字符的数组中去索引字符</p></blockquote><p>如果有字符串:<code>name = &#39;abcdef&#39;</code>，在内存中的实际存储如下:</p><p><a href="/img/images/pic/str.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="/img/images/pic/str.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><blockquote><p>概念 是指对操作的对象截取其中一部分的操作  列表 元组 以及字符串都支持切片</p></blockquote><p><strong>切片的语法:  [起始：结束：步长]</strong></p><p><strong><em>～注意：选取的区间从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)，步长表示选取间隔。～</em></strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdef"</span></span><br><span class="line">name[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># "abc"</span></span><br><span class="line">name[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># "de"</span></span><br><span class="line">name[:<span class="number">2</span>] <span class="comment"># "ab"</span></span><br><span class="line">name[<span class="number">3</span>:] <span class="comment"># "def"</span></span><br><span class="line">name[:] <span class="comment"># "abcdef"</span></span><br><span class="line">name[<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#"bcde"</span></span><br><span class="line">name[::<span class="number">2</span>] <span class="comment"># "ace"</span></span><br><span class="line">name[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] <span class="comment"># "bd"</span></span><br><span class="line">name[::<span class="number">-2</span>] <span class="comment"># "fdb"</span></span><br><span class="line">name[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-2</span>] <span class="comment"># "fd"</span></span><br></pre></td></tr></table></figure></div><p>面试题 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速反转字符串</span></span><br><span class="line">s = <span class="string">'Hello World!'</span></span><br><span class="line">s = s[::<span class="number">-1</span>]</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></div><h3 id="字符串的常见操作"><a href="#字符串的常见操作" class="headerlink" title="字符串的常见操作"></a>字符串的常见操作</h3><h4 id="lt-1-gt-find"><a href="#lt-1-gt-find" class="headerlink" title="&lt;1&gt;find"></a>&lt;1&gt;find</h4><blockquote><p>mystr = ‘hello world itcast and itcastcpp’</p><p>检测str是否包含在mystr中  存在则返回对应的索引 否则返回-1</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="comment"># mystr.find(str, start=0, end=len(mystr))</span></span><br><span class="line">mystr.find(<span class="string">"ld"</span>, <span class="number">3</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-2-gt-index"><a href="#lt-2-gt-index" class="headerlink" title="&lt;2&gt;index"></a>&lt;2&gt;index</h4><blockquote><p>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</p></blockquote><h4 id="lt-3-gt-count"><a href="#lt-3-gt-count" class="headerlink" title="&lt;3&gt;count"></a>&lt;3&gt;count</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断字符串中字符出现的次数</span></span><br><span class="line">mystr.count(str, start=<span class="number">0</span>, end=len(mystr))</span><br></pre></td></tr></table></figure></div><h4 id="lt-4-gt-replace"><a href="#lt-4-gt-replace" class="headerlink" title="&lt;4&gt;replace"></a>&lt;4&gt;replace</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将str1替换为str2字符 替换次数</span></span><br><span class="line">mystr.replace(str1, str2,  mystr.count(str1))</span><br><span class="line"><span class="comment"># test  </span></span><br><span class="line">str1 = <span class="string">"hello ha world ha"</span></span><br><span class="line">str1.replace(<span class="string">'ha'</span>, <span class="string">'Ha'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># "hello Ha world ha"</span></span><br></pre></td></tr></table></figure></div><h4 id="lt-5-gt-split"><a href="#lt-5-gt-split" class="headerlink" title="&lt;5&gt;split"></a>&lt;5&gt;split</h4><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.split(str=" ", 2)    </span></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">str1 = <span class="string">"hello ha world ha"</span></span><br><span class="line">str1.split(<span class="string">" "</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-6-gt-capitalize"><a href="#lt-6-gt-capitalize" class="headerlink" title="&lt;6&gt;capitalize"></a>&lt;6&gt;capitalize</h4><p>把字符串中第一个字符大写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 &#x3D; &quot;hello world itcast&quot;</span><br><span class="line">str1.capitalize()</span><br></pre></td></tr></table></figure></div><h4 id="lt-7-gt-title"><a href="#lt-7-gt-title" class="headerlink" title="&lt;7&gt;title"></a>&lt;7&gt;title</h4><p>把字符串中的每一个单词的首字母大写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 &#x3D; &quot;hello world itcast&quot;</span><br><span class="line">str1.title()</span><br></pre></td></tr></table></figure></div><h4 id="lt-8-gt-startswith"><a href="#lt-8-gt-startswith" class="headerlink" title="&lt;8&gt;startswith"></a>&lt;8&gt;startswith</h4><p>检查字符串是否是以某字符开头 是返回 True  否 返回False</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"hello world itcast"</span></span><br><span class="line">mystr.startswith(<span class="string">"ell"</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-9-gt-endswith"><a href="#lt-9-gt-endswith" class="headerlink" title="&lt;9&gt;endswith"></a>&lt;9&gt;endswith</h4><p>检查字符串是否以某字符结束，如果是返回True,否则返回 False.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.endswith(obj)</span></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">str1 = <span class="string">"hello world itcast"</span></span><br><span class="line">str1.endswith(<span class="string">'st'</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-10-gt-lower"><a href="#lt-10-gt-lower" class="headerlink" title="&lt;10&gt;lower"></a>&lt;10&gt;lower</h4><p>转换 mystr 中所有大写字符为小写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.lower()  </span></span><br><span class="line">str1 = <span class="string">"HEllo world ITcast"</span></span><br><span class="line">new_str = str1.lower()</span><br></pre></td></tr></table></figure></div><h4 id="lt-11-gt-upper"><a href="#lt-11-gt-upper" class="headerlink" title="&lt;11&gt;upper()"></a>&lt;11&gt;upper()</h4><p>转换 mystr 中的小写字母为大写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.upper()  </span></span><br><span class="line">str1 = <span class="string">"HEllo world ITcast"</span></span><br><span class="line">str1.upper()</span><br></pre></td></tr></table></figure></div><h4 id="lt-12-gt-ljust"><a href="#lt-12-gt-ljust" class="headerlink" title="&lt;12&gt;ljust"></a>&lt;12&gt;ljust</h4><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.ljust(width)</span></span><br><span class="line">str1 = <span class="string">"hello"</span></span><br><span class="line">str1.ljust(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-13-gt-rjust"><a href="#lt-13-gt-rjust" class="headerlink" title="&lt;13&gt;rjust"></a>&lt;13&gt;rjust</h4><p>返回一个原字符串右对齐，并使用空格填充至长度width的新字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.rjust(width)</span></span><br><span class="line">mystr = <span class="string">"hello"</span></span><br><span class="line">mystr.rjust(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-14-gt-center"><a href="#lt-14-gt-center" class="headerlink" title="&lt;14&gt;center"></a>&lt;14&gt;center</h4><p>返回一个原字符串居中。并使用空格填充至长度width的新字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.center(width)</span></span><br><span class="line">mystr = <span class="string">"hello world itcast and itcast"</span></span><br><span class="line">mystr.center(<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div><h4 id="lt-15-gt-lstrip"><a href="#lt-15-gt-lstrip" class="headerlink" title="&lt;15&gt;lstrip"></a>&lt;15&gt;lstrip</h4><p>删除mystr左边的空白字符</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr &#x3D; &quot;   hello world&quot;</span><br><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure></div><h4 id="lt-16-gt-rstrip"><a href="#lt-16-gt-rstrip" class="headerlink" title="&lt;16&gt;rstrip"></a>&lt;16&gt;rstrip</h4><p>删除mystr字符串末尾的空白字符</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr &#x3D; &quot;   hello world  &quot;</span><br><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure></div><h4 id="lt-17-gt-strip"><a href="#lt-17-gt-strip" class="headerlink" title="&lt;17&gt;strip"></a>&lt;17&gt;strip</h4><p>删除mystr字符串两端的空白字符</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; &quot;\n\t itcast \t\n&quot;</span><br><span class="line">a.strip()</span><br><span class="line"># &#39;itcast&#39;</span><br></pre></td></tr></table></figure></div><h4 id="lt-18-gt-rfind"><a href="#lt-18-gt-rfind" class="headerlink" title="&lt;18&gt;rfind"></a>&lt;18&gt;rfind</h4><p>类似于find()函数， 不过是从右边开始查找字符</p><p><code>mystr.rfind(str, start=0, end=len(mystr) )</code></p><h4 id="lt-19-gt-rindex"><a href="#lt-19-gt-rindex" class="headerlink" title="&lt;19&gt;rindex"></a>&lt;19&gt;rindex</h4><p>类似于index(),  不过是从右边开始</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.rindex( str, start&#x3D;0, end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure></div><h4 id="lt-20-gt-partition"><a href="#lt-20-gt-partition" class="headerlink" title="&lt;20&gt;partition"></a>&lt;20&gt;partition</h4><p>把mystr以str分割成三部分， str前，str和str后</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mystr.partition(str)</span></span><br><span class="line">mystr = <span class="string">"helloitcastworld"</span></span><br><span class="line">new_str = mystr.partition(<span class="string">'itca'</span>)</span><br><span class="line">print(new_str)</span><br></pre></td></tr></table></figure></div><h4 id="lt-21-gt-rpartition"><a href="#lt-21-gt-rpartition" class="headerlink" title="&lt;21&gt;rpartition"></a>&lt;21&gt;rpartition</h4><p>类似于partition()函数，不过是从右边开始</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr &#x3D; &quot;helloitcastworld&quot;</span><br><span class="line">mystr.rpartition(&quot;t&quot;)</span><br></pre></td></tr></table></figure></div><h4 id="lt-22-gt-splitlines"><a href="#lt-22-gt-splitlines" class="headerlink" title="&lt;22&gt;splitlines"></a>&lt;22&gt;splitlines</h4><p>按照行分隔，返回一个包含各行作为元素的列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr &#x3D; &quot;helloitcast\nworld&quot;</span><br><span class="line">mystr.splitlines()</span><br></pre></td></tr></table></figure></div><h4 id="lt-23-gt-isalpha"><a href="#lt-23-gt-isalpha" class="headerlink" title="&lt;23&gt;isalpha"></a>&lt;23&gt;isalpha</h4><p>如果mystr 所有字符都是字母则返回True，否则返回False</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mystr &#x3D; &#39;abc&#39;</span><br><span class="line">mystr.isalpha() # True</span><br><span class="line">mystr &#x3D; &#39;123&#39;</span><br><span class="line">mystr.isalpha() # False</span><br></pre></td></tr></table></figure></div><h4 id="lt-24-gt-isdigit"><a href="#lt-24-gt-isdigit" class="headerlink" title="&lt;24&gt;isdigit"></a>&lt;24&gt;isdigit</h4><p>如果mystr只包含数字 则返回True  否则返回False</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr.isdigit()</span><br></pre></td></tr></table></figure></div><h4 id="lt-25-gt-isalnum"><a href="#lt-25-gt-isalnum" class="headerlink" title="&lt;25&gt;isalnum"></a>&lt;25&gt;isalnum</h4><p>如果mystr所有字符都是字母或者数字则返回True 否则返回False</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">'123'</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">'abc'</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">'abc123'</span> <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">'abc 123'</span> <span class="comment"># False</span></span><br><span class="line">mystr.isalnum()</span><br></pre></td></tr></table></figure></div><h4 id="lt-26-gt-isspace"><a href="#lt-26-gt-isspace" class="headerlink" title="&lt;26&gt;isspace"></a>&lt;26&gt;isspace</h4><p>如果mystr中只包含空格 则返回True  否则返回False</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">'  '</span></span><br><span class="line">mystr.isspace() <span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><h4 id="lt-27-gt-join"><a href="#lt-27-gt-join" class="headerlink" title="&lt;27&gt;join"></a>&lt;27&gt;join</h4><p>mystr中每一个元素后面插入str  构造出一个新的字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"12345"</span></span><br><span class="line">str.join(<span class="string">"haha"</span>)  <span class="comment"># h12345a12345h12345a</span></span><br><span class="line">str2 = <span class="string">"-"</span></span><br><span class="line">li = [<span class="string">'my'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'tom'</span>]</span><br><span class="line">str.join(li) <span class="comment"># my-name-is-tom</span></span><br></pre></td></tr></table></figure></div><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个字符串aStr，返回使用空格或者'\t'分割后的倒数第二个子串</span></span><br><span class="line">testStr = <span class="string">'haha nihao a \t heihei \t wpshi nide \t hao \npengyou'</span></span><br><span class="line">lists = testStr.split()</span><br><span class="line">chioce = lists[len(lists)<span class="number">-2</span>]</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第3节-列表元素及字典</title>
      <link href="/2017/01/10/python%E6%95%99%E7%A8%8B-2018-1-10-%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E4%BB%A5%E5%8F%8A%E5%AD%97%E5%85%B8/"/>
      <url>/2017/01/10/python%E6%95%99%E7%A8%8B-2018-1-10-%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E4%BB%A5%E5%8F%8A%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="1-列表的基本格式"><a href="#1-列表的基本格式" class="headerlink" title="1.列表的基本格式"></a>1.列表的基本格式</h4><ul><li>list是python中使用最频繁的数据类型</li><li>专门用来存储一串数据，存储的数据称之为元素</li><li>通常放相同类型 可以放不同类型</li><li>列表的索引（下表）从0开始的 正整数 有序的 </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [元素1， 元素2, 元素3, 元素4, 元素5]</span></span><br><span class="line">lists = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">print(type(lists))  <span class="comment"># list列表</span></span><br><span class="line">list1 = [<span class="string">"功夫"</span>, <span class="string">"老狗"</span>, <span class="string">"冰冰"</span>]</span><br><span class="line">print(list1) <span class="comment"># list 列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引下标 从0开始</span></span><br></pre></td></tr></table></figure></div><h4 id="2-获取列表中的某个元素"><a href="#2-获取列表中的某个元素" class="headerlink" title="2.获取列表中的某个元素"></a>2.获取列表中的某个元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists &#x3D; [3, 4, 5, 6, 7, 8]</span><br><span class="line"># 列表[下标] 查询列表中的元素</span><br><span class="line">print(lists[0])</span><br><span class="line">print(lists[2])</span><br><span class="line"># 取值的时候，如果超出索引的范围， 程序就会报错</span><br></pre></td></tr></table></figure></div><h4 id="3-列表的常见操作"><a href="#3-列表的常见操作" class="headerlink" title="3.列表的常见操作"></a>3.列表的常见操作</h4><ol><li><p>增加 列表.<strong>append(数据)</strong>  在末尾追尾数据，并且每次只能添加一个</p><p>​         列表.<strong>extend([4, 5, 6, 7, 8])</strong> 添加多个元素 可以迭代</p><p>​         列表.<strong>insert(索引， 数据)</strong>  在指定位置插入数据 </p></li><li><p>删除  <strong>del列表[索引]</strong>   删除指定索引的数据</p><pre><code>    **列表.remove(数据)**  删除第一个出现的指定数据**列表.pop()**  删除列表中的最后一个元素  有返回值  删除的元素**列表.pop(索引)** 删除指定索引数据**列表.clear()** 清空列表</code></pre></li><li><p>修改  <strong>列表[索引] = 数据</strong>    修改指定索引的数据  如果数据不存在 就报错</p></li><li><p>查询  <strong>列表.index(x)</strong>: 返回列表中值的索引， 若不存在则出错</p><pre><code>**列表.count(x)**:  返回x在列表中出现的次数**len(列表)**  列表的长度**if 数据 in 列表** 检查列表中是否包含某元素</code></pre></li><li><p>排序  <strong>列表.sort()</strong>   升序排列</p><pre><code>**列表.sort(reverse=True)** 降序排列</code></pre></li><li><p>反转   <strong>list.reverse()</strong>: 将列表中元素的顺序反转  </p></li><li><p>复制   <strong>list.copy()</strong>  返回列表的浅复制  等价于 a[:]</p></li></ol><h4 id="4-使用for循环遍历列表"><a href="#4-使用for循环遍历列表" class="headerlink" title="4. 使用for循环遍历列表"></a>4. 使用for循环遍历列表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 可以把列表中的元素都遍历出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></div><h4 id="5-列表的嵌套"><a href="#5-列表的嵌套" class="headerlink" title="5.列表的嵌套"></a>5.列表的嵌套</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">city = [</span><br><span class="line">  [<span class="string">"昌平区"</span>, <span class="string">"海淀区"</span>],</span><br><span class="line">  [<span class="string">"浦东区"</span>, <span class="string">"金山区"</span>, <span class="string">"宝安区"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例： 一个学校 有三个办公室 现在有8位老师等待工位的分配</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices = [[], [], []]</span><br><span class="line">teachers = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>]</span><br><span class="line"><span class="keyword">for</span> names <span class="keyword">in</span> teacher:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(names)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> bgs <span class="keyword">in</span> offices:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'%d办公室里面有%d'</span>%(count,len(bgs)))</span><br></pre></td></tr></table></figure></div><h2 id="三-元组"><a href="#三-元组" class="headerlink" title="三. 元组"></a>三. 元组</h2><h4 id="1-元组的基本格式"><a href="#1-元组的基本格式" class="headerlink" title="1.元组的基本格式"></a>1.元组的基本格式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (元素， 元素， 元素)</span></span><br><span class="line"><span class="comment"># 定义一个元组</span></span><br><span class="line">tuple = (<span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(tuple[<span class="number">0</span>]) <span class="comment"># 取出元组中的值</span></span><br><span class="line">tuple[<span class="number">0</span>] = <span class="number">50</span> </span><br><span class="line"><span class="comment"># 注意: 元组中只有一个值的时候 需要在元素后面添加逗号</span></span><br></pre></td></tr></table></figure></div><h4 id="2-元组和列表的区别"><a href="#2-元组和列表的区别" class="headerlink" title="2.元组和列表的区别"></a>2.元组和列表的区别</h4><blockquote><p>元组不能修改里面的数据</p></blockquote><h4 id="3-遍历元组"><a href="#3-遍历元组" class="headerlink" title="3.遍历元组"></a>3.遍历元组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuples = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuples:</span><br><span class="line">sum += i</span><br><span class="line">print(<span class="string">'和是%d'</span>%sum)</span><br></pre></td></tr></table></figure></div><h4 id="4-判断元组中是否存在某一个元素"><a href="#4-判断元组中是否存在某一个元素" class="headerlink" title="4.判断元组中是否存在某一个元素"></a>4.判断元组中是否存在某一个元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个元组</span></span><br><span class="line">yz = (<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># if ... in 语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">55</span> <span class="keyword">in</span> yz:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不存在'</span>)</span><br></pre></td></tr></table></figure></div><h4 id="5-元组的操作"><a href="#5-元组的操作" class="headerlink" title="5 元组的操作"></a>5 元组的操作</h4><blockquote><p>与列表操作类似</p></blockquote><h4 id="6-元组的拆包"><a href="#6-元组的拆包" class="headerlink" title="6.元组的拆包"></a>6.元组的拆包</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a,b,c,d = tuple  </span><br><span class="line">print(a,b,c,d)</span><br></pre></td></tr></table></figure></div><h4 id="7-元组的应用场景"><a href="#7-元组的应用场景" class="headerlink" title="7. 元组的应用场景"></a>7. 元组的应用场景</h4><blockquote><p>格式化字符串 后面的（）本质上就是一个元组</p></blockquote><hr><h3 id="关于列表和元组的补充"><a href="#关于列表和元组的补充" class="headerlink" title="关于列表和元组的补充"></a>关于列表和元组的补充</h3><h5 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h5><blockquote><p>也称为列表推导式 或列表内涵 是python强有力的语法之一</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建平方数的方法</span></span><br><span class="line">square = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">square.append(x ** <span class="number">2</span>)</span><br><span class="line">print(square)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表解析</span></span><br><span class="line">square = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [&lt;表达式&gt; for x1 in &lt;序列1&gt; [...for xN in &lt;序列2&gt; if &lt;条件表达式&gt;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习 取pi值 除去2 和4位小数保留 在1--5之间</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">result = [round(pi, n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> n %<span class="number">2</span> != <span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><h4 id="利用列表解析生成九九乘法表"><a href="#利用列表解析生成九九乘法表" class="headerlink" title="利用列表解析生成九九乘法表"></a>利用列表解析生成九九乘法表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [(x, y, x*y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x &gt;= y]</span><br></pre></td></tr></table></figure></div><hr><h2 id="四-字典"><a href="#四-字典" class="headerlink" title="四. 字典"></a>四. 字典</h2><p>字典的定义格式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;key:value, key:value&#125;</span><br><span class="line"><span class="comment"># 字典使用键值对存储数据  键值对 分为键名key 和 键值 value</span></span><br><span class="line"><span class="comment"># 值可以是任何类型  键名只能是字符串  数字  元组</span></span><br></pre></td></tr></table></figure></div><p>字典和列表的区别</p><blockquote><p>列表是有序集合  下标是从0开始的正整数</p><p>字典是无序集合  通过键名来访问数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 可以通过字典dict的构造器来创建字典 此时参数是列表或者元组</span></span><br><span class="line">dict([(<span class="string">"name"</span>,<span class="string">"tom"</span>),(<span class="string">"age"</span>,<span class="number">33</span>),(<span class="string">"job"</span>,<span class="string">"programmer"</span>)])</span><br><span class="line"><span class="comment"># 2. 也可以通过关键字形式创建列表</span></span><br><span class="line">dict(name = <span class="string">"allen"</span>, age = <span class="string">'40'</span>) <span class="comment"># 但键只能是字符串 且不用加引号</span></span><br></pre></td></tr></table></figure></div><p>访问字典中的数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dicts[key] = value</span></span><br><span class="line">dict1 = &#123;<span class="string">"name"</span>:<span class="string">"tom"</span>, <span class="string">"age"</span>:<span class="number">23</span>, <span class="string">"job"</span>: <span class="string">"programmer"</span>&#125;</span><br><span class="line">print(dict1[<span class="string">"name"</span>])</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">"age"</span>] = <span class="number">45</span></span><br><span class="line"><span class="comment"># 判断是否某数据存在于此字典中 用if in 或者 in语句</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"job"</span> <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#...</span></span><br></pre></td></tr></table></figure></div><p>介绍一些字典中的几个常规操作方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.删除方法</span><br><span class="line"># 字典.pop(键名)  删除指定的键值对  返回被删除的值</span><br><span class="line"># 字典.clear() 清空字典</span><br><span class="line"># 字典没有remove方法</span><br><span class="line">2.修改方法</span><br><span class="line">字典[键] &#x3D; 数据</span><br><span class="line">3.查询</span><br><span class="line">字典[键]</span><br><span class="line">字典.keys()</span><br><span class="line">字典.values()</span><br><span class="line">字典.items()</span><br><span class="line">4.拷贝方法</span><br><span class="line">字典.copy()</span><br><span class="line">5.len() 测量字典中 键值对的个数</span><br></pre></td></tr></table></figure></div><h3 id="扩展-集合"><a href="#扩展-集合" class="headerlink" title="扩展-集合"></a>扩展-集合</h3><blockquote><p>定义： 集合是无序的 里面的元素是唯一的 集合一般用于列表或者元组中的元素去重</p></blockquote><h5 id="定义一个空集合"><a href="#定义一个空集合" class="headerlink" title="定义一个空集合"></a>定义一个空集合</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1 = set()</span><br></pre></td></tr></table></figure></div><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set1.add(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">set1.update(<span class="string">'abcd'</span>)</span><br></pre></td></tr></table></figure></div><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove</span></span><br><span class="line">set1 = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="comment"># 使用remove删除集合中的元素 如果有则直接删除 如果没有则程序报错</span></span><br><span class="line">set1.remove(<span class="number">22</span>)</span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line">set1.pop() <span class="comment"># 随机删除集合中的元素 如果集合中没有元素 则程序报错</span></span><br><span class="line"><span class="comment"># discard</span></span><br><span class="line">set1.discard(<span class="number">5</span>) <span class="comment"># 删除指定元素 如果元素不存在 则不会报错</span></span><br></pre></td></tr></table></figure></div><h4 id="交集与并集-amp-and"><a href="#交集与并集-amp-and" class="headerlink" title="交集与并集(&amp; and |)"></a>交集与并集(&amp; and |)</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">new_set = set1 &amp; set2</span><br><span class="line">print(new_set)</span><br><span class="line"><span class="comment"># &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">new_set = set1 | set2</span><br><span class="line">print(new_set)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></div><hr><h4 id="python中使用set对列表进行去重的练习"><a href="#python中使用set对列表进行去重的练习" class="headerlink" title="python中使用set对列表进行去重的练习"></a>python中使用set对列表进行去重的练习</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原始方法，但是会打乱顺序</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">myset = set(mylist) <span class="comment">#myset是另外一个列表，里面的内容是mylist里面的无重复 项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收件人去重，并保持原来的收件人顺序</span></span><br><span class="line"></span><br><span class="line">mailto = [<span class="string">'cc'</span>, <span class="string">'bbbb'</span>, <span class="string">'afa'</span>, <span class="string">'sss'</span>, <span class="string">'bbbb'</span>, <span class="string">'cc'</span>, <span class="string">'shafa'</span>]</span><br><span class="line"></span><br><span class="line">addr_to = list(set(mailto))</span><br><span class="line"></span><br><span class="line">addr_to.sort(key = mailto.index)</span><br></pre></td></tr></table></figure></div><h3 id="python中的内置函数"><a href="#python中的内置函数" class="headerlink" title="python中的内置函数"></a>python中的内置函数</h3><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>len(item)</td><td>计算容器中元素个数</td></tr><tr><td>2</td><td>max(item)</td><td>返回容器中元素最大值</td></tr><tr><td>3</td><td>min(item)</td><td>返回容器中元素最小值</td></tr><tr><td>4</td><td>del(item)</td><td>删除变量</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第2节-运算符以及流程控制语句</title>
      <link href="/2017/01/05/python%E6%95%99%E7%A8%8B-2018-1-5-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5/"/>
      <url>/2017/01/05/python%E6%95%99%E7%A8%8B-2018-1-5-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="Input函数的使用"><a href="#Input函数的使用" class="headerlink" title="Input函数的使用"></a>Input函数的使用</h5><blockquote><p>在python中可以使用input函数来从键盘等待用户输入 注意从中获取的任何数据都是字符串类型</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习：</span></span><br><span class="line"><span class="comment"># 输入，姓名names  年龄age  地址address   邮箱email </span></span><br><span class="line">names = input(<span class="string">"姓名"</span>)</span><br><span class="line">age = input(<span class="string">"年龄"</span>)</span><br><span class="line">address = input(<span class="string">"地址"</span>)</span><br><span class="line">e_mail = input(<span class="string">"邮箱"</span>)</span><br><span class="line"><span class="comment"># 输出  姓名是XXX   年龄是XXX  地址XXX  邮箱XXX</span></span><br><span class="line">print(<span class="string">"姓名是%s 年龄是%d 地址%s 邮箱是%s"</span> % (names, age, address, e_mail))</span><br></pre></td></tr></table></figure></div><h5 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h5><ul><li>int() 转整型</li><li>float() 转浮点型</li><li>str() 转换为字符串</li><li>list() 转换为列表 接收一个元组 并返回一个列表</li><li>tuple()转换为元组 接收一个列表 返回一个包含相同元素的元组</li></ul><h5 id="其他的运算符"><a href="#其他的运算符" class="headerlink" title="其他的运算符"></a>其他的运算符</h5><p>比较运算符</p><blockquote><p>返回的结果只有True False  是布尔型 bool</p></blockquote><table><thead><tr><th>运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td>==</td><td align="center">相等</td></tr><tr><td>!=</td><td align="center">不想等</td></tr><tr><td>&gt;</td><td align="center">大于</td></tr><tr><td>&lt;</td><td align="center">小于</td></tr><tr><td>&gt;=</td><td align="center">大于或者等于</td></tr><tr><td>&lt;=</td><td align="center">小于或者等于</td></tr></tbody></table><p>逻辑运算符</p><p><code>and   or   not</code></p><blockquote><p>扩展</p></blockquote><p><strong><em>优先级： 运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符</em></strong></p><hr><p>补充的扩展</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">下面的值在作为布尔表达式时，会被解释器看作False：</span><br><span class="line">    1、None；</span><br><span class="line">    2、False；</span><br><span class="line">    3、任何为0的数字类型，如：0，0.0，0j；</span><br><span class="line">    4、任何空序列，如：&#39;&#39;，()，[]；</span><br><span class="line">    5、任何空字典，例如：&#123;&#125;;</span><br><span class="line">    6、用户定义的类实例，如果类定义了__bool__()或者__len__()方法，并且该方法返回0或者布尔值False。</span><br><span class="line">其它所有值被解释器看作True。</span><br><span class="line">可以用bool来转换其它值为布尔值：</span><br><span class="line">&gt;&gt;&gt; bool(&#39;&#39;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#39;this is a test&#39;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(42)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></div><hr><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h4 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 要判断的条件:</span><br><span class="line">条件成立，执行该代码段</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="comment"># 输入你的年龄  判断 如果大于 18 允许处对象</span></span><br><span class="line">age = int(input(<span class="string">"请输入年龄:"</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你可以出对象了"</span>)</span><br></pre></td></tr></table></figure></div><h4 id="if…else语句的格式："><a href="#if…else语句的格式：" class="headerlink" title="if…else语句的格式："></a>if…else语句的格式：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    满足条件执行该代码段<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件执行该代码段<span class="number">2</span></span><br></pre></td></tr></table></figure></div><h4 id="if……elif……else编程判断语句（多分支）"><a href="#if……elif……else编程判断语句（多分支）" class="headerlink" title="if……elif……else编程判断语句（多分支）"></a>if……elif……else编程判断语句（多分支）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    如果判断条件<span class="number">1</span>满足，执行代码段<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    如果判断条件<span class="number">2</span> 满足，执行代码段<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    如果判断条件<span class="number">3</span>满足， 则执行代码段<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    上面的条件都不满足执行该语句</span><br></pre></td></tr></table></figure></div><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    满足条件<span class="number">1</span>执行该语句</span><br><span class="line">    <span class="keyword">if</span> 判断条件<span class="number">2</span></span><br><span class="line">    条件<span class="number">2</span>满足 执行该代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件<span class="number">1</span>执行该代码</span><br></pre></td></tr></table></figure></div><h4 id="获取一个随机数"><a href="#获取一个随机数" class="headerlink" title="获取一个随机数"></a>获取一个随机数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块导入</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">0</span>, <span class="number">10</span>) <span class="comment"># 0 到 10 之间的随机数 int</span></span><br></pre></td></tr></table></figure></div><h4 id="案例：猜拳游戏"><a href="#案例：猜拳游戏" class="headerlink" title="案例：猜拳游戏"></a>案例：猜拳游戏</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">ranNum = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">player = int(input(<span class="string">"请输入剪刀（0） 石头（1） 布（2）"</span>))</span><br><span class="line"><span class="keyword">if</span> ranNum == <span class="number">0</span> <span class="keyword">and</span> player == <span class="number">1</span> <span class="keyword">or</span> ranNum == <span class="number">1</span> <span class="keyword">and</span> player == <span class="number">2</span> <span class="keyword">or</span> ranNum == <span class="number">2</span> <span class="keyword">and</span> player == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"player win"</span>)</span><br><span class="line"><span class="keyword">elif</span> player == ranNum:</span><br><span class="line">    print(<span class="string">"draw"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'computer win'</span>)</span><br></pre></td></tr></table></figure></div><hr><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环的基本格式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 变量的初始化</span><br><span class="line">while 条件2：</span><br><span class="line">条件满足时候： 执行该代码</span><br><span class="line">条件满足时候：执行该代码</span><br><span class="line">3 代码的更新</span><br></pre></td></tr></table></figure></div><p>while循环的应用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 案例1 ： while循环输出1-100所有的数</span><br><span class="line"></span><br><span class="line"># 案例2:  while循环输出1-100累加和</span><br><span class="line"></span><br><span class="line"># 案例3：能够用循环实现1~100之间偶数的累积和（包含1和100）</span><br></pre></td></tr></table></figure></div><p>while循环嵌套的基本格式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while 条件1:</span><br><span class="line">条件1 满足时 执行该代码</span><br><span class="line">条件1 满足时 执行该代码</span><br><span class="line">while 条件2:</span><br><span class="line">条件2满足时 执行该代码</span><br></pre></td></tr></table></figure></div><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p><a href="/img/images/pic/dd.png" data-fancybox="group" data-caption="dd" class="fancybox"><img alt="dd" title="dd" data-src="/img/images/pic/dd.png" src="/img/loading.gif" class="lazyload"></a></p><p>练习：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while打印三角形</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= i:</span><br><span class="line">print(<span class="string">"⭐️"</span>, end=<span class="string">""</span>)</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"> <span class="comment"># 打印九九乘法表</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= i:</span><br><span class="line">print(<span class="string">"%d*%d=%-2d "</span>%(j, i, i*j), end=<span class="string">""</span>)</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure></div><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 数据</span><br><span class="line">代码</span><br></pre></td></tr></table></figure></div><h5 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h5><p>range(start, stop) 函数可创建一个整数int列表 一般用在for循环中</p><ul><li>start 开始 默认为0  比如 range(5) 等价 range(0,5)</li><li>stop 结束 但不包括stop  例如 range(0,5) 是[0,1,2,3,4]</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">101</span>):</span><br><span class="line">    print(i, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></div><h4 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h4><blockquote><p>break 推出整个循环  continue推出当前循环  它们只能退出一层循环</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础第1节-简介起步</title>
      <link href="/2017/01/02/python%E6%95%99%E7%A8%8B-2018-1-2-python%E7%AE%80%E6%B4%81%E4%BB%A5%E5%8F%8A%E8%B5%B7%E6%AD%A5/"/>
      <url>/2017/01/02/python%E6%95%99%E7%A8%8B-2018-1-2-python%E7%AE%80%E6%B4%81%E4%BB%A5%E5%8F%8A%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Python课程总体梳理"><a href="#Python课程总体梳理" class="headerlink" title="Python课程总体梳理"></a>Python课程总体梳理</h2><h4 id="课程前期计算机知识介绍："><a href="#课程前期计算机知识介绍：" class="headerlink" title="课程前期计算机知识介绍："></a>课程前期计算机知识介绍：</h4><p>​    <strong>1.计算机：</strong></p><p>​            现代用于高速计算的电子机器 可以进行数值计算 逻辑判断 还有记忆存储功能 且能够按照程序的运行 自动高速处理数据</p><p>​      如图所示：        </p><p><a href="/img/images/pic/computer.png" data-fancybox="group" data-caption="computer" class="fancybox"><img alt="computer" title="computer" data-src="/img/images/pic/computer.png" src="/img/loading.gif" class="lazyload"></a></p><p><strong>2. 操作系统的作用：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 给用户间接操作硬件的方式,：图形窗口方式、终端命令方式。</span><br><span class="line">2. 给开发者提供的间接操作硬件的方式：系统调用 </span><br><span class="line">3. 简单的说 管理好硬件设备 为用户和开发者 提供一个简单的接口 方便使用</span><br></pre></td></tr></table></figure></div><p>如图所示：</p><p>![computer](/img/images/pic/图片 1.png)</p><p><strong>3 驱动程序</strong></p><p>​        作用：驱动程序提供了硬件到操作系统的一个接口以及协调二者之间的关系. 扮演者硬件和操作系统之间的一个桥梁的作用</p><p><strong>4 程序执行流程</strong></p><p>​    游戏打开==》 加载到内存中==〉cpu解释执行指令===》显卡驱动（数字信号转化为模拟信号）==〉显卡工作==》显示器显示</p><hr><p><strong>二. 编程语言和解释器</strong></p><p>编程语言：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.形式是符号和文字的组合</span><br><span class="line"></span><br><span class="line">2.目的是为了控制计算机硬件</span><br><span class="line"></span><br><span class="line">3.python是解释型语言，需要解释器将编码进行解释成对应的机器码 从而实现对计算机的指令控制，目前最主流的是c语言开发的cpython解释器</span><br><span class="line"></span><br><span class="line">4.python的作者是龟叔  1991年正式诞生</span><br><span class="line"></span><br><span class="line">5.python目前有两个版本 2.7.15和3.6.5  python2 截止到2020年停止更新</span><br></pre></td></tr></table></figure></div><p>python语言的特点：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.易学</span><br><span class="line">2.开源</span><br><span class="line">3.可移植性</span><br><span class="line">4.丰富的库文件</span><br></pre></td></tr></table></figure></div><p>python的应用领域</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. web应用开发</span><br><span class="line">2. 网络爬虫</span><br><span class="line">3. 桌面软件</span><br><span class="line">4. 操作系统管理</span><br><span class="line">5. Google NASA  Facebook等</span><br></pre></td></tr></table></figure></div><hr><h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><h4 id="python开发环境的搭建"><a href="#python开发环境的搭建" class="headerlink" title="python开发环境的搭建"></a>python开发环境的搭建</h4><blockquote><p>python开发需要两个准备： 1 python开发程序 2 python运行程序</p></blockquote><h5 id="window下的环境搭建"><a href="#window下的环境搭建" class="headerlink" title="window下的环境搭建"></a>window下的环境搭建</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 打开python.org官网 下载对应的python版本</span><br><span class="line">2. 安装完毕之后配置环境变量： 在电脑高级设置 环境变量中path 加入python安装路径</span><br></pre></td></tr></table></figure></div><h5 id="Mac-下的环境安装"><a href="#Mac-下的环境安装" class="headerlink" title="Mac 下的环境安装"></a>Mac 下的环境安装</h5><p><code>Mac下自动即成python 2.7的解释器,如果想安装3.5则下载对应的软件安装即可</code></p><p><em>Python 的几种开发方案：</em></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. python解释器 + 普通文本编辑器</span><br><span class="line">   1. notepad++ </span><br><span class="line">   2. sublime</span><br><span class="line">   3. editplus</span><br><span class="line">2. python解释器 + 交互式终端</span><br><span class="line">3. python解释器 + IDE工具（pycharm推荐）</span><br></pre></td></tr></table></figure></div><h5 id="bug的几种常见错误"><a href="#bug的几种常见错误" class="headerlink" title="bug的几种常见错误"></a>bug的几种常见错误</h5><ul><li>单词错误</li><li>缩进错误</li></ul><h5 id="注释的作用以及类型"><a href="#注释的作用以及类型" class="headerlink" title="注释的作用以及类型"></a>注释的作用以及类型</h5><blockquote><p>作用：在程序中对代码进行标注和说明，增强程序的可读性</p></blockquote><blockquote><p>类型：单行注释 #  多行注释 ```   ```   注释# 后面留一个空格再添加相应的注释</p></blockquote><blockquote><p><strong><em>Python 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</em></strong></p><p><strong><em>其中第 8 篇文档专门针对Python 的代码格式 给出了建议，也就是俗称的 PEP 8</em></strong></p></blockquote><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">谷歌对应的中文文档</a></p><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变量是在内存中用来临时存储数据的标识符</p></blockquote><h5 id="变量的定义："><a href="#变量的定义：" class="headerlink" title="变量的定义："></a>变量的定义：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = <span class="string">"张三"</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="comment"># 注意变量声明不需要关键字</span></span><br></pre></td></tr></table></figure></div><h5 id="标识符的规则"><a href="#标识符的规则" class="headerlink" title="标识符的规则"></a>标识符的规则</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.标识符由字母数字和下划线来组成 且不能以数字开头</span><br><span class="line">2.python中的标识符是区分大小写的</span><br><span class="line">3.变量名要遵循驼峰命名法 要见名知意  或者 单词用下划线连接</span><br><span class="line">4.不能和关键字和已有的名字冲突</span><br></pre></td></tr></table></figure></div><h5 id="python程序中的关键字"><a href="#python程序中的关键字" class="headerlink" title="python程序中的关键字"></a>python程序中的关键字</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line"><span class="comment"># 通过以上命令来查看</span></span><br></pre></td></tr></table></figure></div><p><a href="/img/images/pic/dos.png" data-fancybox="group" data-caption="computer" class="fancybox"><img alt="computer" title="computer" data-src="/img/images/pic/dos.png" src="/img/loading.gif" class="lazyload"></a></p><h5 id="python中的六种标准数据类型"><a href="#python中的六种标准数据类型" class="headerlink" title="python中的六种标准数据类型"></a>python中的六种标准数据类型</h5><ul><li>Number（数字 数字中包含 整型int  浮点型float  复数complex  布尔 bool）</li><li>String （字符串）</li><li>List （列表）</li><li>Tuple（元组）</li><li>Set （集合）</li><li>Dictionary （字典）</li></ul><blockquote><p>其中 不可变的数据类型 Number String Tuple  可变的是List Set  Dict</p></blockquote><h5 id="python中判断变量的数据类型"><a href="#python中判断变量的数据类型" class="headerlink" title="python中判断变量的数据类型"></a>python中判断变量的数据类型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通常使用 type()来判断</span></span><br><span class="line">a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line">print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 还可以用<span class="title">isinstance</span>判断</span></span><br><span class="line">a = 111</span><br><span class="line">print(isinstance(a, int)) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二者区别在于 isinstance 认为子类是一种父类类型 而 type认为子类不是一种父类类型</span></span><br></pre></td></tr></table></figure></div><h5 id="不同类型之间的运算规则"><a href="#不同类型之间的运算规则" class="headerlink" title="不同类型之间的运算规则"></a>不同类型之间的运算规则</h5><p>算术运算符</p><table><thead><tr><th><strong>运算符****</strong></th><th><strong>描述****</strong></th><th><strong>实例****</strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>a + b</td></tr><tr><td>-</td><td>减</td><td>a - b</td></tr><tr><td>*</td><td>乘</td><td>a * b</td></tr><tr><td>/</td><td>除</td><td>a / b</td></tr><tr><td>//</td><td>取整除</td><td>返回除法的整数部分（商） 9 // 2 输出结果 4</td></tr><tr><td>%</td><td>取余数</td><td>返回除法的余数 9 % 2 = 1</td></tr><tr><td>**</td><td>幂</td><td>又称次方、乘方，2 ** 3 = 8</td></tr></tbody></table><p>复合赋值运算符</p><table><thead><tr><th><strong>运算符****</strong></th><th><strong>描述****</strong></th><th><strong>实例****</strong></th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a  + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c +=  a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -=  a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c <em>=  a *</em>等效于** c = c *a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /=  a 等效于 c = c / a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //=  a 等效于 c = c // a</td></tr><tr><td>%=</td><td>取 <strong>模</strong> (余数)赋值运算符</td><td>c %=  a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c *<em>=  a 等效于 c = c *</em> a</td></tr></tbody></table><blockquote><p>注意：1. 数字之间可以进行任何运算 2. 数字和字符串之间可以进行乘法运算 3. 字符串之间可以进行加法运算</p></blockquote><h5 id="计算机中的输入和输出"><a href="#计算机中的输入和输出" class="headerlink" title="计算机中的输入和输出"></a>计算机中的输入和输出</h5><ol><li>标准输入和输出</li><li>文件输入和输出</li><li>网络输入和输出</li><li>python编程中将计算机复杂的输入和输出封装起来 形成简单的方法来供开发者调用 input ，print</li></ol><hr><h2 id="print函数的使用"><a href="#print函数的使用" class="headerlink" title="print函数的使用"></a>print函数的使用</h2><p>1.普通输出变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_num = <span class="number">100</span></span><br><span class="line">my_str = <span class="string">"hello"</span></span><br><span class="line">print(my_num, my_str)</span><br></pre></td></tr></table></figure></div><p>2.格式化输出变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 先定义输出格式</span></span><br><span class="line"><span class="comment"># 2 在格式中填充数据</span></span><br><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="comment"># 1. 定义字符串变量 name，输出 我的名字叫 小明，请多多关照！</span></span><br><span class="line">name = <span class="string">"小明"</span></span><br><span class="line">print(<span class="string">"我的名字叫%s"</span> % name)</span><br><span class="line"><span class="comment"># 2. 定义整数变量 student_no，输出我的学号是 000001</span></span><br><span class="line">student_no = <span class="number">1</span></span><br><span class="line">print(<span class="string">"我的学号是%06d"</span> %student_no)</span><br><span class="line"><span class="comment"># 3. 定义小数 price、weight、money，输出苹果单价 9.00 元／斤，购买了 5.00 斤，需要支付 45.00 元</span></span><br><span class="line">price, weight= <span class="number">9.00</span>, <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">money = price * weight</span><br><span class="line">print(<span class="string">"苹果单价%.2f元/斤，购买了%.2f斤,需要支付%.2f元"</span> %(price, weight, money))</span><br></pre></td></tr></table></figure></div><table><thead><tr><th><strong>常用格式化字符****</strong></th><th><strong>含义****</strong></th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全</td></tr><tr><td>%f</td><td>浮点数，%.2f 表示小数点后只显示两位</td></tr><tr><td>%%</td><td>输出 %</td></tr></tbody></table><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%c</td><td>字符</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写字母0x）</td></tr><tr><td>%X</td><td>十六进制整数（大写字母0X）</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%e</td><td>科学计数法（小写’e’）</td></tr><tr><td>%E</td><td>科学计数法（大写“E”）</td></tr><tr><td>%g</td><td>％f和％e 的简写</td></tr><tr><td>%G</td><td>％f和％E的简写</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最佳的 JavaScript 前端框架、库和工具</title>
      <link href="/2015/12/28/2015-12-28-jsTools/"/>
      <url>/2015/12/28/2015-12-28-jsTools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> 2015-12-28 </p><p>好像几乎每隔一周就有一个新的 JavaScript 库在网络社区引起风暴！网络社区越来越充满活力，多样化且在多个方面快速发展。调查每一个主流的 JavaScript 框架和库是不可能完成的壮举。因此，我将分享一些前端开发中最著名和最有影响力的框架和库。让我们看看最佳的 JavaScript web 前端框架，库和工具以及何时使用它们。</p><p>另外：</p><p>如果我没有包括你最喜欢的 JavaScript 框架，请不要生气。<br>永远记住持续更新你的框架和库。最新版本的框架和库通常具有最好的跨浏览器和跨设备的支持。你可以使用工具， 比如scanner 来帮助判断一个旧版本是否兼容这一大批设备。</p><p>好了，让我们进入列表！</p><h3 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h3><p>Angular 是流行的企业级框架，许多开发人员都在使用它来构建和维护复杂的 web 应用程序。Angular 的人气非常高，包括 Domino’s Pizza, Ryanair, iTunes Connect, PayPal Checkout, 谷歌等企业都在使用它。Angular 是一个由谷歌支持的开源框架。Angular 自称是 HTML 的一个扩展，用来构建复杂的 web 应用程序。另外如果你熟悉 TypeScript， Angular 2就是用它构建的。</p><p>这个作者的更多文章</p><p>构建一个基于 Node.js 的聊天室 Web App：远程调试<br>构建一个基于 Node.js 的聊天室 Web App：通过 WebSockets 连接</p><p>Angular 是一个 MVC 类型的框架。它提供了模型和视图之间的双向数据绑定。该数据绑定允许每当数据改变时，两边自动更新。  它使你能够构建可复用的视图组件。它提供了一个服务框架，使得后端-前端服务通信更容易。最后，它只是普通的 JavaScript。</p><p>何时使用 AngularJS？当你正在构建一个复杂的 web 前端应用程序，同时需要一个模块化的框架来处理一切时。</p><p>GitHub: <a href="https://github.com/angular/angular.js" target="_blank" rel="noopener">https://github.com/angular/angular.js</a><br>当前版本： 1.4.7/1.2.29<br>网址： angularjs.org</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React 是今年最受欢迎的 JavaScript 项目！每个人都似乎在谈论 ReactJS。去年我参加的每一个会议，至少有好几个议题是关于 React 和同家族的其他库（Flux, Redux）的。React 是开源软件，主要由 Facebook 开发，其他大型科技公司也有贡献。React 自称是一个用于构建用户界面的 JavaScript 库。</p><p>React 主要是 MVC 中的 V。它的重点完全在 MVC 的 V 部分，忽视应用程序架构的其余部分。它提供了一个组件层，使得创建 UI 元素，组合元素变得更容易。它使用虚拟 DOM，因此优化了渲染，且允许从 node.js 渲染 React。此外，它实现了单向响应的数据流，因此比其他框架更容易理解和使用。</p><p>作为 MVC 中的 V，很多项目将 React 结合 Angular 或 Ember 这样的框架使用。</p><p>何时使用 React？当你想要一个强大的视图层，但不需要在应用程序的其余部分使用一个复杂的框架，或者你在 Angular、Backbone 或 Ember 应用上需要一个视图层时。当你正试图建立一个同构 web 框架时。</p><p>GitHub: <a href="https://github.com/facebook/react" target="_blank" rel="noopener">https://github.com/facebook/react</a><br>当前版本: v0.14.0<br>网址: Facebook.github.io/react/</p><h3 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h3><p>Backbone 是一个著名的简易框架，适合单个 JavaScript 文件。Backbone 已经存在有一段时间了，是以 CoffeeScript 和 Underscore 闻名的 Jeremy Ashkenas 所开发的。对于一些为小型 web 应用寻找一个结构简单的框架，而不想引入如 Angular 或 Ember 这些大型框架的团队，Backbone 特别受欢迎。</p><p>Backbone 提供一个完整的 MVC 框架以及路由。模型允许键-值绑定和数据变化的事件处理。模型（和集合）可以连接到RESTful API。视图具有声明式事件处理，路由在处理 URL 和状态管理上做的很出色。它包含你创建一个单页面应用程序所需要的一切，且没有提供太多东西，没有不必要的复杂度。</p><p>何时使用 Backbone？Backbone 是我创建简单 web 应用程序的首选框架。</p><p>GitHub: <a href="https://github.com/jashkenas/backbone/" target="_blank" rel="noopener">https://github.com/jashkenas/backbone/</a></p><p>当前版本: 1.2.3<br>网站: backbonejs.org</p><h3 id="Ember"><a href="#Ember" class="headerlink" title="Ember"></a>Ember</h3><p>Ember 是一个固执的 web 应用程序框架，关注程序员的工作效率。Ember 比较流行，它的核心团队包括像曾是 Ruby on Rails 和 jQuery 核心团队成员的 Yehuda Katz 的聪明人。Ember 自称是“一个用于创建大规模 web 应用程序的框架”，且不浪费你的时间。它很固执，为你提供了很多选择。</p><p>Ember 也是一个 MVC 框架。它包括一个模板和视图引擎，当数据变化时自动更新，就像 Angular，Backbone 和 React 一样。它包含 web组件 的思想，让你使用自己标签扩展 HTML（就像 Angular 一样）。它也有一个知道如何与你的 RESTful API 一起工作的路由和模型引擎。</p><p>何时使用 Ember？当你只需要一个可以运行的框架时。当你因为预算紧张或工期很短而不需要灵活性时，请使用 Ember。</p><p>GitHub: <a href="https://github.com/emberjs/ember.js" target="_blank" rel="noopener">https://github.com/emberjs/ember.js</a><br>当前版本: 2.1.0<br>网站: emberjs.com</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery 是一个无需介绍的库。它凭一己之力让跨浏览器网站使用成为现实，同时把 web 带到今天的位置。Web 标准已经被大多数浏览器制造商采纳并真正地尊重，jQuery 是其中的原因之一。jQuery 基金会的使命是“通过开源软件的开发和支持，以及开发社区的合作，改善开放的 web，让每一个人都可以访问它。”</p><p>jQuery 是世界上最常用的 JavaScript 库，所有应用程序都应该使用它，除非你不在意程序员的工作效率。它使得 DOM 遍历、事件处理、动画、AJAX 在所有浏览器上变得更简单、更容易。</p><p>何时使用 jQuery？一直使用，除非你想使用一个像 Zepto 的轻量级版本。</p><p>GitHub: <a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">https://github.com/jquery/jquery</a><br>当前版本: v1.11.3 or v2.1.4<br>网站: jquery.com</p><h3 id="Underscore-amp-lodash"><a href="#Underscore-amp-lodash" class="headerlink" title="Underscore &amp;lodash"></a>Underscore &amp;lodash</h3><p>有时候 JavaScript 内置的功能导致程序员的效率并不高。总是缺少一个工具函数或一个可以简化代码的函数。Underscore（和 lodash）是一个 JavaScript 库，它提供了一整套工具函数，不需要对内置 JavaScript 对象打补丁。两个库均提供超过 100 个功能助手和其他专用功能，包括 map，filter，invoke，reduce，template, throttle, bind, extend, pick, clone 等更多的函数。</p><p>何时使用 Underscore？当你需要一个单独的 JavaScript 文件，来立即提升程序员的工作效率时。</p><p>Underscore GitHub: <a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">https://github.com/jashkenas/underscore</a><br>Underscore 当前版本: 1.8.3<br>Underscore 网站: underscorejs.org</p><p>何时使用 lodash？当你需要模块化和性能稍强版本的 Underscore，同时更容易地支持 AMD 和社区插件时。</p><p>LodashGitHub: <a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">https://github.com/lodash/lodash</a></p><p>Lodash 当前版本: v3.10.1</p><p>Lodash 网站: lodash.com</p><h3 id="D3-js"><a href="#D3-js" class="headerlink" title="D3.js"></a>D3.js</h3><p>数据可视化和图表是一种常见的 web 应用程序需求。D3.js 是任何数据操作和可视化的事实标准。它是 GitHub上最受欢迎的项目之一，被数以百计的组织使用。大量的图形，图表和可视化库在 D3 上构建。</p><p>D3 允许你操作任何来源的数据文档，转换成 DOM 或/和 SVG 或/和 CSS。D3 关注现代 web 标准，确保你不受任何专有格式的约束，比如 Flash 和 Silverlight。</p><p>何时使用 D3.js？在你需要任何形式的可视化的时候。</p><p>GitHub: <a href="https://github.com/mbostock/d3" target="_blank" rel="noopener">https://github.com/mbostock/d3</a><br>当前版本: 3.5.6<br>网站: d3js.org</p><h3 id="Babylon-js"><a href="#Babylon-js" class="headerlink" title="Babylon.js"></a>Babylon.js</h3><p>想要构建完全符合现代 web 标准且跨浏览器的视频游戏吗？看看 Babylon.js，它是基于 WebGL 和 JavaScript 的 3d 游戏引擎。你可以创建令人难以置信的包含物理、音频和粒子系统等等的高质量游戏。</p><p>何时使用 Babylon.js？无论何时，只要你想做一个视频游戏或任何类型的复杂三维场景，都能用上。</p><p>GitHub: <a href="https://github.com/BabylonJS/Babylon.js" target="_blank" rel="noopener">https://github.com/BabylonJS/Babylon.js</a><br>当前版本: 2.2<br>网站: babylonjs.com</p><h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><p>想要构建一个 3D 可视化场景，但不需要一个完整的游戏引擎？three.js 提供了一个轻量级的 3d 库，允许渲染 3d 为 HTML5 画布、SVG 和 WebGL。它是相当简单的库，在 three.js 的展示里有数百个优美的例子。</p><p>何时使用Three.js？当你需要一个能输出为 Canvas 的简单的 3D 可视化场景时。</p><p>GitHub: <a href="https://github.com/mrdoob/three.js/" target="_blank" rel="noopener">https://github.com/mrdoob/three.js/</a><br>当前版本: r73<br>网站: threejs.org</p><h3 id="Mocha-amp-Chai"><a href="#Mocha-amp-Chai" class="headerlink" title="Mocha&amp; Chai"></a>Mocha&amp; Chai</h3><p>JavaScript 在很长一段时间内是非常烦人的。测试任何代码通常都被认为是恼人的，但它却是每个开发人员都应该做的事情。每个开发人员似乎总是蔑视和忽略它，而不测试他们的代码。这个恼人的东西有一个解决办法，那就是 Mocha 和 Chai。两个库的名字都来自美味的热饮料，它们都能帮你测试代码，但方式不同。</p><p>Mocha 是一个 JavaScript 测试框架，使得你在 node 模块和浏览器 app 中测试异步代码变得更容易。Mocha 测试可以串联运行，可以为正确的测试用例添加异常跟踪的能力。</p><p>Chai 是一个行为驱动开发/测试驱动开发的断言库，可以搭配 Mocha 使用。它可以把你需要测试的东西用可读的风格简单地表达出来。</p><p>何时使用 Mocha &amp; Chai？总是！请测试你的代码，让世界变得更美好。</p><p>Mocha 当前版本: 2.3.3<br>Mocha 网址: mochajs.org<br>Chai GitHub: <a href="https://github.com/chaijs/chai" target="_blank" rel="noopener">https://github.com/chaijs/chai</a><br>Chai 当前版本: v3.4.1<br>Chai 网址: chaijs.com</p><h3 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h3><p>既然已经把 Mocha 和 Chai 包含在这个列表中了，如果不包含用来运行这些测试或设置持续集成测试的测试运行器，那将是不完整的。Karma 是一款旨在帮助你在不同的浏览器上自动运行测试的工具。它可以帮助你在所有浏览器上运行 Mocha 和 Chai 测试。</p><p>不是每个浏览器都运行在所有平台，但幸运的是可以使用一些免费工具来测试其他浏览器，看看 Browser Screenshots。如果你正在 OS X 上运行代码，想测试 Edge 或 IE，可以 免费 使用这个工具。</p><p>何时使用 Karma？当你的应用程序有一个完善的测试套件，并希望确保测试在所有浏览器上通过时。</p><p>GitHub: <a href="https://github.com/karma-runner/karma" target="_blank" rel="noopener">https://github.com/karma-runner/karma</a><br>当前版本: v0.13<br>网址: karma-runner.github.io</p><h3 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h3><p>运行完整的浏览器来测试你的代码比较耗内存和 CPU。PhantomJS 允许你运行一个轻量的 WebKit —— Safari 和Chrome（现在是 Blink）后台的渲染引擎。它允许你通过 JavaScript API 运行测试，捕捉截图，监控网络和自动浏览页面。</p><p>何时使用 PhantomJS ?当你需要进行更多的测试，操作页面和监视网络请求时。</p><p>GitHub: <a href="https://github.com/ariya/phantomjs" target="_blank" rel="noopener">https://github.com/ariya/phantomjs</a><br>当前版本: v2.0<br>网址: phantomjs.org</p><h3 id="Grunt-amp-Gulp"><a href="#Grunt-amp-Gulp" class="headerlink" title="Grunt &amp; Gulp"></a>Grunt &amp; Gulp</h3><p>为生产环境构建网站，通常涉及到提高性能的任务，比如 JavaScript 和 CSS 的压缩， CoffeeScript/TypeScript 的编译，单元测试，语法检查。也许你已经有一个为网站发布到生产环境的工具链，如果没有，你可以使用任务运行器，比如 Grunt 或Gulp。两者都有大量关于网站的任何转换的插件，为发布到生产环境做好准备。</p><p>何时使用 Grunt？当你喜欢写配置文件同时不介意你的任务运行器生成中间文件时。</p><p>Grunt GitHub: <a href="https://github.com/gruntjs/grunt" target="_blank" rel="noopener">https://github.com/gruntjs/grunt</a><br>Grunt 当前版本: v0.4.5<br>Grunt 网址: gruntjs.com</p><p>何时使用 Gulp？当你喜欢在配置上写代码和利用 node.js 的流功能来加快任务执行时。</p><p>Gulp GitHub: <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">https://github.com/gulpjs/gulp</a><br>Gulp 当前版本: v3.9.0<br>Gulp 网址: gulpjs.com</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>JavaScript 语言正在迅速发展。ECMAScript2015 于去年夏天发布，它的许多新特性在最新的浏览器上实现了。如果你想看看 ECMAScript 2015 的兼容性，你可以看看来自 @kangax 的这个 表。你会注意到，最新版本的 Edge，Firefox 和 Chrome 已经几乎完全兼容了。</p><p>我们并不是生活在一个完美的世界。作为开发人员，我们需要继续支持旧的浏览器，它们没有最新最好的 JavaScript 特性。我们要推进 web 和改善我们的代码库。Babel 是一个 JavaScript 编译器，用于把最新的 JavaScript 标准编译成可在 IE9 等老浏览器上运行的兼容ES5的 JavaScript。它有一些插件，使得 React 开发更容易，甚至可以使用一些不属于该规范的特性（例如ES7）。</p><p>何时使用 Babel？当你想使用新的 JavaScript 语言特性，同时还要支持老版本浏览器时。</p><p>GitHub: <a href="https://github.com/babel/babel" target="_blank" rel="noopener">https://github.com/babel/babel</a><br>当前版本: 6.1.2<br>网址: babeljs.io</p><h3 id="更多-Web-开发实践"><a href="#更多-Web-开发实践" class="headerlink" title="更多 Web 开发实践"></a>更多 Web 开发实践</h3><p>本文来自微软技术布道师 Web 开发系列，里面有实用的 JavaScript 学习，开源项目和互操作性的最佳实践（包括与 微软Edge 浏览器和新的 EdgeHTML渲染引擎）。</p><p>我们鼓励你跨浏览器和设备进行测试，包括微软的Edge——Windows 10的默认浏览器——在 dev.modern.IE 上有免费工具:</p><p>扫描你的网站中过时的库，布局问题和可访问性<br>下载 Mac, Linux 和 Windows 下的免费虚拟机<br>跨浏览器检查 Web 平台状态，包括微软 Edge 的路线图<br>在你的设备上远程测试微软 Edge</p><p>来自我们工程师和布道者的更深入学习：</p><p>GitHub 上的编码实验室： 跨浏览器测试和最佳实践<br>2015 微软 Edge Web 峰会 (来自我们的工程师团队和JS社区)<br>很棒，我可以在 Mac 和 Linux 上测试 Edge 和 IE 了！ (来自Rey Bango)<br>推进 JavaScript 同时不破坏 Web (来自Christian Heilmann)<br>Edge 渲染引擎让 Web 工作 (来自Jacob Rossi)<br>基于 WebGL 的 3D 渲染 (来自David Catuhe)<br>托管 web app 和 web 平台的革新 (来自Kevin Hill和Kiril Seksenov)</p><h3 id="我们的社区开源项目："><a href="#我们的社区开源项目：" class="headerlink" title="我们的社区开源项目："></a>我们的社区开源项目：</h3><p>vorlon.JS (跨设备远程 JavaScript 测试)<br>manifoldJS (部署跨平台托管 web app)<br>babylonJS (让 3D 图形制作更简单)</p><p>更多免费工具和后端web开发内容：</p><p>Linux, MacOS 和 Windows 下的 Visual Studio Code<br>使用 node.JS 编码并在 Azure 上免费试用</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抛弃jQuery，拥抱原生JavaScript</title>
      <link href="/2015/12/20/2015-12-22-jQuery%E4%B8%8E%E5%8E%9F%E7%94%9Fjs/"/>
      <url>/2015/12/20/2015-12-22-jQuery%E4%B8%8E%E5%8E%9F%E7%94%9Fjs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。因此我们项目组在双十一后抽了一周时间，把所有代码中的 jQuery 移除。下面总结一下：</p><h3 id="Why-not-jQuery"><a href="#Why-not-jQuery" class="headerlink" title="Why not jQuery"></a>Why not jQuery</h3><ol><li>模式变革</li></ol><p>jQuery 代表着传统的以 DOM 为中心的开发模式，但现在复杂页面开发流行的是以 React 为代表的以数据/状态为中心的开发模式<br>应用复杂后，直接操作 DOM 意味着手动维护状态，当状态复杂后，变得不可控。React 以状态为中心，自动帮我们渲染出 DOM，同时通过高效的 DOM Diff 算法，也能保证性能。我们在 React 应用实践中也发现，大部分当你想直接操作 DOM 的时候，就意味着你可能做错了。</p><ol start="2"><li>不支持同构渲染</li></ol><p>重构就是前后端运行同一份代码，后端也可以渲染出页面，这对 SEO 要求高的场景非常合适。由于 React 等流行框架天然支持，已经具有可行性。当我们在尝试把现有应用改成同构时，因为代码要运行在服务器端，但服务器端没有 DOM，所以引用 jQuery 就会报错。这也是要移除 jQuery 的迫切原因。同时不但要移除 jQuery，在很多场合也要避免直接操作 DOM。</p><ol start="3"><li>原生 API 足够好用</li></ol><p>由于浏览器的历史原因，曾经的前端开发为了兼容不同浏览器怪癖，需要增加很多成本。jQuery 由于提供了非常易用的 API，屏蔽了浏览器差异，极大地提高了开发效率。这也导致很多前端只懂 jQuery。其实这几年浏览器更新很快，也借鉴了很多 jQuery 的 API，如 querySelector，querySelectorAll 和 jQuery 选择器同样好用，而且性能更优。</p><ol start="4"><li>性能</li></ol><p>前端开发一般不需要考虑性能问题，但你想在性能上追求极致的话，一定要知道 jQuery 性能很差。原生 API 选择器相比 jQuery 丰富很多，如 document.getElementsByClassName 性能是 $(classSelector) 的 50 多倍！</p><p><a href="!--%EF%BF%BC1--" data-fancybox="group" data-caption="638" class="fancybox"><img alt="638" title="638" data-src="!--%EF%BF%BC1--" src="/img/loading.gif" class="lazyload"></a><br>测试链接：<a href="http://jsperf.com/jquery-vs-native-api" target="_blank" rel="noopener">http://jsperf.com/jquery-vs-native-api</a></p><ol start="5"><li>时机成熟</li></ol><p>差的浏览器（IE）已经淘汰的差不多了。<br>If We Didn’t Spend So Much on IE Support, We Could Be Taking Vacations on Mars<br>Christian Alfoni<br>我们的主打产品现在有千万用户，因为我们一直引导用户升级浏览器，上个月统计 IE 9 以下用户只占不到 3%。但为了这 3% 的用户我们前端开发却增加了很多工作量，也限制了我们升级我们的架构，因此放弃支持他们利大于弊。当然这要根据产品来定，比如这是百度统计的国内浏览器占有率，IE8 竟然还有 22%。有些产品可以为了保证用户体验，在旧的浏览器上投入很大成本，甚至做到了极致。其实我觉得产品更应该做的是引导用户升级浏览器。微软也宣布 2016年1月12号停止支持 IE 11 以下浏览器，继续使用旧浏览器就会有安全风险，我们更应该主动引导，只要产品有足够吸引力，大部分用户升级并不困难。</p><p><a href="!--%EF%BF%BC2--" data-fancybox="group" data-caption="639" class="fancybox"><img alt="639" title="639" data-src="!--%EF%BF%BC2--" src="/img/loading.gif" class="lazyload"></a> </p><pre><code>### 数据来源 百度统计下面是国际上 IE 占有率，IE8 已经跌出前 10，IE 11 比较多，还好支持他们并不难。</code></pre><p><a href="!--%EF%BF%BC3--" data-fancybox="group" data-caption="640" class="fancybox"><img alt="640" title="640" data-src="!--%EF%BF%BC3--" src="/img/loading.gif" class="lazyload"></a><br>数据来源 W3 Counter</p><h3 id="如何移除-jQuery"><a href="#如何移除-jQuery" class="headerlink" title="如何移除 jQuery"></a>如何移除 jQuery</h3><ol><li><p>替换代码<br>移除 jQuery 可以很顺利，我们把整个过程详细整理了，并开源。<br>打开 <a href="https://github.com/oneuijs/You-Dont-Need-jQuery" target="_blank" rel="noopener">https://github.com/oneuijs/You-Dont-Need-jQuery</a> 对 API 查找替换即可。<br>同时我们简单封装了一些方法：<br>oui-dom-utils 来做选择器和样式相关<br>oui-dom-events 来做 Event，支持命名空间和事件代理<br>刚去了 jQuery 又引了新的库，这不是玩我吗？？其实以上两个库很简单，只是常用方法的简单封装，建议你看一下代码。你当然可以不用。<br>以上的库都用于我们的生产环境，我们会长期维护，保证更新。</p></li><li><p>旧浏览器自动跳转<br>代码替换后，当用户用旧浏览器打开时，你还要做一个跳转，把用户定位到提示页面，提示用户下载升级浏览器。IE9 以下浏览器都支持条件判断语句，可以在  标签结束前添加如下代码做自动跳转</p></li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">&lt;!–[<span class="keyword">if</span> lte IE <span class="number">9</span>]&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">if</span> (!<span class="regexp">/update\.htm/</span>.test(location.href)) <span class="built_in">window</span>.location = ‘<span class="comment">//abc.com/update.htm';</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;![endif]–&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文并不是强迫你一定要移除 jQuery，jQuery 为支持旧浏览器节省了很多成本。但条件成熟的情况下，移除 jQuery，参照 You Don’t Need jQuery 拥抱原生 JavaScript 能同样保证开发效率，也可以给产品带来更好的性能，同时也能提高开发者水平。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐！手把手教你用 Git</title>
      <link href="/2015/11/27/2015-11-27-git%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>/2015/11/27/2015-11-27-git%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一：Git是什么？"><a href="#一：Git是什么？" class="headerlink" title="一：Git是什么？"></a>一：Git是什么？</h2><p>Git是目前世界上最先进的分布式版本控制系统。</p><h2 id="二：SVN与Git的最主要的区别？"><a href="#二：SVN与Git的最主要的区别？" class="headerlink" title="二：SVN与Git的最主要的区别？"></a>二：SVN与Git的最主要的区别？</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h2 id="三：在windows上如何安装Git？"><a href="#三：在windows上如何安装Git？" class="headerlink" title="三：在windows上如何安装Git？"></a>三：在windows上如何安装Git？</h2><p>msysgit是 windows版的Git,如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/0.jpg" data-fancybox="group" data-caption="0" class="fancybox"><img alt="0" title="0" data-src="http://zagcool.github.io/img/pics/gitCourse/0.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/1.jpg" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="http://zagcool.github.io/img/pics/gitCourse/1.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/2.jpg" data-fancybox="group" data-caption="2" class="fancybox"><img alt="2" title="2" data-src="http://zagcool.github.io/img/pics/gitCourse/2.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>安装完成后，还需要最后一步设置，在命令行输入如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/3.jpg" data-fancybox="group" data-caption="3" class="fancybox"><img alt="3" title="3" data-src="http://zagcool.github.io/img/pics/gitCourse/3.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p>注意：git config  –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><h2 id="四：如何操作？"><a href="#四：如何操作？" class="headerlink" title="四：如何操作？"></a>四：如何操作？</h2><h4 id="一：创建版本库。"><a href="#一：创建版本库。" class="headerlink" title="一：创建版本库。"></a>一：创建版本库。</h4><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><p>所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/4.jpg" data-fancybox="group" data-caption="4" class="fancybox"><img alt="4" title="4" data-src="http://zagcool.github.io/img/pics/gitCourse/4.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>pwd 命令是用于显示当前的目录。</p><ol><li>通过命令 git init 把这个目录变成git可以管理的仓库，如下：</li></ol><p><a href="http://zagcool.github.io/img/pics/gitCourse/5.jpg" data-fancybox="group" data-caption="5" class="fancybox"><img alt="5" title="5" data-src="http://zagcool.github.io/img/pics/gitCourse/5.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/6.jpg" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" title="6" data-src="http://zagcool.github.io/img/pics/gitCourse/6.jpg" src="/img/loading.gif" class="lazyload"></a><br></p><ol start="2"><li>把文件添加到版本库中。</li></ol><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p><p>下面先看下demo如下演示：<br>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p><p><strong>第一步</strong>：使用命令 git add readme.txt添加到暂存区里面去。如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/7.jpg" data-fancybox="group" data-caption="7" class="fancybox"><img alt="7" title="7" data-src="http://zagcool.github.io/img/pics/gitCourse/7.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>如果和上面一样，没有任何提示，说明已经添加成功了。</p><p><strong>第二步</strong>：用命令 git commit告诉Git，把文件提交到仓库。</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/8.jpg" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" title="8" data-src="http://zagcool.github.io/img/pics/gitCourse/8.jpg" src="/img/loading.gif" class="lazyload"></a>   </p><p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/9.jpg" data-fancybox="group" data-caption="9" class="fancybox"><img alt="9" title="9" data-src="http://zagcool.github.io/img/pics/gitCourse/9.jpg" src="/img/loading.gif" class="lazyload"></a>  </p><p> 说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/10.jpg" data-fancybox="group" data-caption="10" class="fancybox"><img alt="10" title="10" data-src="http://zagcool.github.io/img/pics/gitCourse/10.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。<br>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：</p><p>git diff readme.txt 如下：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/jia11.jpg" data-fancybox="group" data-caption="jia11" class="fancybox"><img alt="jia11" title="jia11" data-src="http://zagcool.github.io/img/pics/gitCourse/jia11.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p><p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add  第二步是：git commit)。<br>如下：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/11.jpg" data-fancybox="group" data-caption="11" class="fancybox"><img alt="11" title="11" data-src="http://zagcool.github.io/img/pics/gitCourse/11.jpg" src="/img/loading.gif" class="lazyload"></a></p><h4 id="二：版本回退："><a href="#二：版本回退：" class="headerlink" title="二：版本回退："></a>二：版本回退：</h4><p>如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行<br>内容为33333333333333.继续执行命令如下：</p><p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p><p><a href="http://zagcool.github.io/img/pics/gitCourse/12.jpg" data-fancybox="group" data-caption="12" class="fancybox"><img alt="12" title="12" data-src="http://zagcool.github.io/img/pics/gitCourse/12.jpg" src="/img/loading.gif" class="lazyload"></a>  </p><p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/13.jpg" data-fancybox="group" data-caption="13" class="fancybox"><img alt="13" title="13" data-src="http://zagcool.github.io/img/pics/gitCourse/13.jpg" src="/img/loading.gif" class="lazyload"></a>  </p><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset  –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset  –hard HEAD~100 即可。未回退之前的readme.txt内容如下：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/14.jpg" data-fancybox="group" data-caption="14" class="fancybox"><img alt="14" title="14" data-src="http://zagcool.github.io/img/pics/gitCourse/14.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>如果想回退到上一个版本的命令如下操作：<br></p><p><a href="http://zagcool.github.io/img/pics/gitCourse/16.jpg" data-fancybox="group" data-caption="16" class="fancybox"><img alt="16" title="16" data-src="http://zagcool.github.io/img/pics/gitCourse/16.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/17.jpg" data-fancybox="group" data-caption="17" class="fancybox"><img alt="17" title="17" data-src="http://zagcool.github.io/img/pics/gitCourse/17.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/18.jpg" data-fancybox="group" data-caption="18" class="fancybox"><img alt="18" title="18" data-src="http://zagcool.github.io/img/pics/gitCourse/18.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<br>git reset  –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog  演示如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/19.jpg" data-fancybox="group" data-caption="19" class="fancybox"><img alt="19" title="19" data-src="http://zagcool.github.io/img/pics/gitCourse/19.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令<br>git reset  –hard 6fcfc89来恢复了。演示如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/20.jpg" data-fancybox="group" data-caption="20" class="fancybox"><img alt="20" title="20" data-src="http://zagcool.github.io/img/pics/gitCourse/20.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>可以看到 目前已经是最新的版本了。</p><h4 id="三：理解工作区与暂存区的区别？"><a href="#三：理解工作区与暂存区的区别？" class="headerlink" title="三：理解工作区与暂存区的区别？"></a>三：理解工作区与暂存区的区别？</h4><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p><p>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p>我们前面说过使用Git提交文件到版本库有两步：<br>  第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。<br>  第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。<br>我们继续使用demo来演示下：</p><p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/21.jpg" data-fancybox="group" data-caption="21" class="fancybox"><img alt="21" title="21" data-src="http://zagcool.github.io/img/pics/gitCourse/21.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/22.jpg" data-fancybox="group" data-caption="22" class="fancybox"><img alt="22" title="22" data-src="http://zagcool.github.io/img/pics/gitCourse/22.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>接着我们可以使用git commit一次性提交到分支上，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/23.jpg" data-fancybox="group" data-caption="23" class="fancybox"><img alt="23" title="23" data-src="http://zagcool.github.io/img/pics/gitCourse/23.jpg" src="/img/loading.gif" class="lazyload"></a></p><h4 id="四：Git撤销修改和删除文件操作。"><a href="#四：Git撤销修改和删除文件操作。" class="headerlink" title="四：Git撤销修改和删除文件操作。"></a>四：Git撤销修改和删除文件操作。</h4><p>1：撤销修改：</p><p>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/24.jpg" data-fancybox="group" data-caption="24" class="fancybox"><img alt="24" title="24" data-src="http://zagcool.github.io/img/pics/gitCourse/24.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。<br>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD^</p><p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/25.jpg" data-fancybox="group" data-caption="25" class="fancybox"><img alt="25" title="25" data-src="http://zagcool.github.io/img/pics/gitCourse/25.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>可以发现，Git会告诉你，git checkout  – file 可以丢弃工作区的修改，如下命令：<br>git checkout  –  readme.txt,如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/26.jpg" data-fancybox="group" data-caption="26" class="fancybox"><img alt="26" title="26" data-src="http://zagcool.github.io/img/pics/gitCourse/26.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><p>readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。<br>另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p><p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/27.jpg" data-fancybox="group" data-caption="27" class="fancybox"><img alt="27" title="27" data-src="http://zagcool.github.io/img/pics/gitCourse/27.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</p><p>2：删除文件。</p><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/28.jpg" data-fancybox="group" data-caption="28" class="fancybox"><img alt="28" title="28" data-src="http://zagcool.github.io/img/pics/gitCourse/28.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p><p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？<br>可以使用如下命令 git checkout  – b.txt，如下所示：</p><p>再来看看我们testgit目录，添加了3个文件了。如下所示：<br><a href="http://zagcool.github.io/img/pics/gitCourse/29.jpg" data-fancybox="group" data-caption="29" class="fancybox"><img alt="29" title="29" data-src="http://zagcool.github.io/img/pics/gitCourse/29.jpg" src="/img/loading.gif" class="lazyload"></a></p><h2 id="五：远程仓库。"><a href="#五：远程仓库。" class="headerlink" title="五：远程仓库。"></a>五：远程仓库。</h2><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p><p>ssh-keygen  -t rsa –C “<a href="mailto:youremail@example.com">youremail@example.com</a>”, 由于我本地此前运行过一次，所以本地有，如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/30.jpg" data-fancybox="group" data-caption="30" class="fancybox"><img alt="30" title="30" data-src="http://zagcool.github.io/img/pics/gitCourse/30.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/31.jpg" data-fancybox="group" data-caption="31" class="fancybox"><img alt="31" title="31" data-src="http://zagcool.github.io/img/pics/gitCourse/31.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>点击 Add Key，你就应该可以看到已经添加的key。<br>如何添加远程库？</p><p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p><p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/32.jpg" data-fancybox="group" data-caption="32" class="fancybox"><img alt="32" title="32" data-src="http://zagcool.github.io/img/pics/gitCourse/32.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/33.jpg" data-fancybox="group" data-caption="33" class="fancybox"><img alt="33" title="33" data-src="http://zagcool.github.io/img/pics/gitCourse/33.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：<br>git remote add origin <a href="https://github.com/tugenhua0707/testgit.git" target="_blank" rel="noopener">https://github.com/tugenhua0707/testgit.git</a> </p><p>所有的如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/34.jpg" data-fancybox="group" data-caption="34" class="fancybox"><img alt="34" title="34" data-src="http://zagcool.github.io/img/pics/gitCourse/34.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/35.jpg" data-fancybox="group" data-caption="35" class="fancybox"><img alt="35" title="35" data-src="http://zagcool.github.io/img/pics/gitCourse/35.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>从现在起，只要本地作了提交，就可以通过如下命令：</p><p>git push origin master</p><p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p><ol start="2"><li>如何从远程库克隆？</li></ol><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。<br>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？</p><p>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/36.jpg" data-fancybox="group" data-caption="36" class="fancybox"><img alt="36" title="36" data-src="http://zagcool.github.io/img/pics/gitCourse/36.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>如下，我们看到：</p><p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：<br>接着在我本地目录下 生成testgit2目录了，如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/37.jpg" data-fancybox="group" data-caption="37" class="fancybox"><img alt="37" title="37" data-src="http://zagcool.github.io/img/pics/gitCourse/37.jpg" src="/img/loading.gif" class="lazyload"></a></p><h2 id="六：创建与合并分支。"><a href="#六：创建与合并分支。" class="headerlink" title="六：创建与合并分支。"></a>六：创建与合并分支。</h2><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/38.jpg" data-fancybox="group" data-caption="38" class="fancybox"><img alt="38" title="38" data-src="http://zagcool.github.io/img/pics/gitCourse/38.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br>git branch dev<br>git checkout dev<br>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777</p><p>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/39.jpg" data-fancybox="group" data-caption="39" class="fancybox"><img alt="39" title="39" data-src="http://zagcool.github.io/img/pics/gitCourse/39.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/40.jpg" data-fancybox="group" data-caption="40" class="fancybox"><img alt="40" title="40" data-src="http://zagcool.github.io/img/pics/gitCourse/40.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/41.jpg" data-fancybox="group" data-caption="41" class="fancybox"><img alt="41" title="41" data-src="http://zagcool.github.io/img/pics/gitCourse/41.jpg" src="/img/loading.gif" class="lazyload"></a><br>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p><p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/42.jpg" data-fancybox="group" data-caption="42" class="fancybox"><img alt="42" title="42" data-src="http://zagcool.github.io/img/pics/gitCourse/42.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>总结创建与合并分支命令如下：</p><p>   查看分支：git branch<br><br>   创建分支：git branch name<br><br>   切换分支：git checkout name<br><br>创建+切换分支：git checkout –b name<br><br>合并某分支到当前分支：git merge name<br><br>删除分支：git branch –d name</p><p>如何解决冲突？</p><p>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/43.jpg" data-fancybox="group" data-caption="43" class="fancybox"><img alt="43" title="43" data-src="http://zagcool.github.io/img/pics/gitCourse/43.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/44.jpg" data-fancybox="group" data-caption="44" class="fancybox"><img alt="44" title="44" data-src="http://zagcool.github.io/img/pics/gitCourse/44.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在我们需要在master分支上来合并fenzhi1，如下操作：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/45.jpg" data-fancybox="group" data-caption="45" class="fancybox"><img alt="45" title="45" data-src="http://zagcool.github.io/img/pics/gitCourse/45.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/46.jpg" data-fancybox="group" data-caption="46" class="fancybox"><img alt="46" title="46" data-src="http://zagcool.github.io/img/pics/gitCourse/46.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/47.jpg" data-fancybox="group" data-caption="47" class="fancybox"><img alt="47" title="47" data-src="http://zagcool.github.io/img/pics/gitCourse/47.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>3.分支管理策略。</p><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><p>创建一个dev分支。<br>修改readme.txt内容。<br>添加到暂存区。<br>切换回主分支(master)。<br>合并dev分支，使用命令 git merge –no-ff  -m “注释” dev<br>查看历史记录</p><p>截图如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/48.jpg" data-fancybox="group" data-caption="48" class="fancybox"><img alt="48" title="48" data-src="http://zagcool.github.io/img/pics/gitCourse/48.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h2 id="七：bug分支："><a href="#七：bug分支：" class="headerlink" title="七：bug分支："></a>七：bug分支：</h2><p>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p><p>比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：<br></p><p>并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/49.jpg" data-fancybox="group" data-caption="49" class="fancybox"><img alt="49" title="49" data-src="http://zagcool.github.io/img/pics/gitCourse/49.jpg" src="/img/loading.gif" class="lazyload"></a>  </p><p>所以现在我可以通过创建issue-404分支来修复bug了。</p><p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/50.jpg" data-fancybox="group" data-caption="50" class="fancybox"><img alt="50" title="50" data-src="http://zagcool.github.io/img/pics/gitCourse/50.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/51.jpg" data-fancybox="group" data-caption="51" class="fancybox"><img alt="51" title="51" data-src="http://zagcool.github.io/img/pics/gitCourse/51.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在，我们回到dev分支上干活了。<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/52.jpg" data-fancybox="group" data-caption="52" class="fancybox"><img alt="52" title="52" data-src="http://zagcool.github.io/img/pics/gitCourse/52.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/53.jpg" data-fancybox="group" data-caption="53" class="fancybox"><img alt="53" title="53" data-src="http://zagcool.github.io/img/pics/gitCourse/53.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p><p>1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。<br>2.另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。<br>演示如下<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/55.jpg" data-fancybox="group" data-caption="55" class="fancybox"><img alt="55" title="55" data-src="http://zagcool.github.io/img/pics/gitCourse/55.jpg" src="/img/loading.gif" class="lazyload"></a> </p><h2 id="八：多人协作。"><a href="#八：多人协作。" class="headerlink" title="八：多人协作。"></a>八：多人协作。</h2><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。<br>*要查看远程库的信息 使用 git remote<br>*要查看远程库的详细信息 使用 git remote –v</p><p>如下演示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/56.jpg" data-fancybox="group" data-caption="56" class="fancybox"><img alt="56" title="56" data-src="http://zagcool.github.io/img/pics/gitCourse/56.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>一：推送分支：</p><p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><p>使用命令 git push origin master</p><p>比如我现在的github上的readme.txt代码如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/57.jpg" data-fancybox="group" data-caption="57" class="fancybox"><img alt="57" title="57" data-src="http://zagcool.github.io/img/pics/gitCourse/57.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>本地的readme.txt代码如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/58.jpg" data-fancybox="group" data-caption="58" class="fancybox"><img alt="58" title="58" data-src="http://zagcool.github.io/img/pics/gitCourse/58.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/59.jpg" data-fancybox="group" data-caption="59" class="fancybox"><img alt="59" title="59" data-src="http://zagcool.github.io/img/pics/gitCourse/59.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/60.jpg" data-fancybox="group" data-caption="60" class="fancybox"><img alt="60" title="60" data-src="http://zagcool.github.io/img/pics/gitCourse/60.jpg" src="/img/loading.gif" class="lazyload"></a><br>可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev</p><p>那么一般情况下，那些分支要推送呢？</p><p>master分支是主分支，因此要时刻与远程同步。<br>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p><p>二：抓取分支：</p><p>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2</p><p>但是我首先要把dev分支也要推送到远程去，如下:<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/61.jpg" data-fancybox="group" data-caption="61" class="fancybox"><img alt="61" title="61" data-src="http://zagcool.github.io/img/pics/gitCourse/61.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/62.jpg" data-fancybox="group" data-caption="62" class="fancybox"><img alt="62" title="62" data-src="http://zagcool.github.io/img/pics/gitCourse/62.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>现在目录下生成有如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/63.jpg" data-fancybox="group" data-caption="63" class="fancybox"><img alt="63" title="63" data-src="http://zagcool.github.io/img/pics/gitCourse/63.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout  –b dev origin/dev</p><p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p><p>如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/64.jpg" data-fancybox="group" data-caption="64" class="fancybox"><img alt="64" title="64" data-src="http://zagcool.github.io/img/pics/gitCourse/64.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/65.jpg" data-fancybox="group" data-caption="65" class="fancybox"><img alt="65" title="65" data-src="http://zagcool.github.io/img/pics/gitCourse/65.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/66.jpg" data-fancybox="group" data-caption="66" class="fancybox"><img alt="66" title="66" data-src="http://zagcool.github.io/img/pics/gitCourse/66.jpg" src="/img/loading.gif" class="lazyload"></a>  </p><p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/67.jpg" data-fancybox="group" data-caption="67" class="fancybox"><img alt="67" title="67" data-src="http://zagcool.github.io/img/pics/gitCourse/67.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：</p><p>我们可以先来看看readme.txt内容了。<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/68.jpg" data-fancybox="group" data-caption="68" class="fancybox"><img alt="68" title="68" data-src="http://zagcool.github.io/img/pics/gitCourse/68.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：<br><br><a href="http://zagcool.github.io/img/pics/gitCourse/69.jpg" data-fancybox="group" data-caption="69" class="fancybox"><img alt="69" title="69" data-src="http://zagcool.github.io/img/pics/gitCourse/69.jpg" src="/img/loading.gif" class="lazyload"></a> </p><p>因此：多人协作工作模式一般是这样的：<br>首先，可以试图用git push origin branch-name推送自己的修改.<br>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。<br>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</p><p><strong>Git基本常用命令如下:</strong></p><p>   mkdir：         XX (创建一个空目录 XX指目录名)</p><p>   pwd：          显示当前目录的路径。</p><p>   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</p><p>   git add XX       把xx文件添加到暂存区去。</p><p>   git commit –m “XX”  提交文件 –m 后面的是注释。</p><p>   git status        查看仓库状态</p><p>   git diff  XX      查看XX文件修改了那些内容</p><p>   git log          查看历史记录</p><p>   git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本</p><pre><code>(如果想回退到100个版本，使用git reset –hard HEAD~100 )</code></pre><p>   cat XX         查看XX文件内容</p><p>   git reflog       查看历史记录的版本号id</p><p>   git checkout – XX  把XX文件在工作区的修改全部撤销。</p><p>   git rm XX          删除XX文件</p><p>   git remote add origin <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="noopener">https://github.com/tugenhua0707/testgit</a> 关联一个远程库</p><p>   git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库</p><p>   git clone <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="noopener">https://github.com/tugenhua0707/testgit</a>  从远程库中克隆</p><p>   git checkout –b dev  创建dev分支 并切换到dev分支上</p><p>   git branch  查看当前所有的分支</p><p>   git checkout master 切换回master分支</p><p>   git merge dev    在当前的分支上合并dev分支</p><p>   git branch –d dev 删除dev分支</p><p>   git branch name  创建分支</p><p>   git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作</p><p>   git stash list 查看所有被隐藏的文件列表</p><p>   git stash apply 恢复被隐藏的文件，但是内容不删除</p><p>   git stash drop 删除文件</p><p>   git stash pop 恢复文件的同时 也删除文件</p><p>   git remote 查看远程库的信息</p><p>   git remote –v 查看远程库的详细信息</p><p>   git push origin master  Git会把master分支推送到远程库对应的远程分支上</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技术盘点</title>
      <link href="/2015/11/06/2015-11-06-%E5%89%8D%E7%AB%AF%E5%8E%86%E7%A8%8B/"/>
      <url>/2015/11/06/2015-11-06-%E5%89%8D%E7%AB%AF%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>近几年前端技术盘点以及 2016 年技术发展方向</p><p>网址：<a href="http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/" target="_blank" rel="noopener">http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/</a></p><p>Web 发展了几十个春秋，风起云涌，千变万化。我很庆幸自己没有完整地经历过这些年头，而是站在前人的肩膀上行走。Web 技术发展的速度让人感觉那几乎不是继承式的迭代，而是一次又一次的变革，一次又一次的创造。这几年的前端，更为之甚！</p><p>我从 12 年底开始接触前端，12 年之前的前端发展情况只能从上一辈的笔触中领会。本文会盘点从 09 年开始到 15 年间前端技术的革新，同时也会从多个角度，解读近几年前端技术发展的潜在因素，其中穿插了若干对前端演进的拙见，难免会有错误和疏漏，忘读者可以补充和斧正。</p><p>那些年，一度追捧，一度放弃</p><p>下面，花一些篇幅简单回顾下 09 年到 15 年前端的发展历程。</p><h4 id="09年，基础类库完善，寻求突破"><a href="#09年，基础类库完善，寻求突破" class="headerlink" title="09年，基础类库完善，寻求突破"></a>09年，基础类库完善，寻求突破</h4><hr><p>09 年之前，JavaScript 还处于对自身语言的完善过程中，而到了 09 年，JavaScript 类库已经颇为成熟，jQuery/Prototype/Script.aculo.us/Dojo 等都已经发布了好几个 stable 版本，各大类库也是相互吸收优点，不断完善并提高自身性能，然而功能上已经没有太多增加的势头。部分框架开始了思想上的转变，更加注重前端开发的组织和结构，条理性强了很多，如 YUI，Dojo 等。</p><p>从 ECMAScript 规范的争执，开启了浏览器引擎大战，各大厂商也趁机瓜分 IE6 份额，Chrome 和 Firefox 在这场战役中取得小胜，V8 也敲响了前端的大门。为了迎合市场的激烈竞争，IE 开始了升级之旅，09 年初发布 IE8，全面兼容 CSS2.1。</p><p>而此时，Node.js 和 3G Mobile 这两只巨兽开始浮出水面，Web 标准也开始向 HTML5、ECMAScript5.0 靠拢。</p><h4 id="10-年，Web2-0-深入人心，开始性能挑战"><a href="#10-年，Web2-0-深入人心，开始性能挑战" class="headerlink" title="10 年，Web2.0 深入人心，开始性能挑战"></a>10 年，Web2.0 深入人心，开始性能挑战</h4><hr><p>毫无疑问，这一年，各大巨头都看清了 HTML5 是 web 发展的未来，在保留原来前端技术的状态下，都簇拥着拉扯 HTML5 的裙摆。富客户端应用也在这一年蓬勃生长，ExtJS/Dojo 摇身变为企业级框架，各类组件化概念和产品如约而至。</p><p>延续着 09 年的变化，10 年的前端显得颇为沉寂，然而在标准的运用和推动上，各大厂商也是十分卖力。IE 9 出来了预览第三版，iPhone 的 Safari 已经能够支持众多 HTML5 内容：Canvas/Video/Audio/Geolocation/Storage/Application Cache/Web SQL Database 等。</p><p>W3C 宣布成立 Web 性能工作组，Google 和 Mozilla 纷纷推出应用商店，浏览器调试工具也丰富了起来，人们开始更多地关注开发体验和性能问题。</p><h3 id="11-年，HTML5-抗大旗，Flash-堪忧"><a href="#11-年，HTML5-抗大旗，Flash-堪忧" class="headerlink" title="11 年，HTML5 抗大旗，Flash 堪忧"></a>11 年，HTML5 抗大旗，Flash 堪忧</h3><hr><p>2011 年 HTML5 的技术发展和推广都向前迈进了一大步，语义明确的标签体系、简洁明了的富媒体支持、本地数据的储存技术、canvas 等等各类技术被广泛应用。这一年，很多 web 开发者也面临一项技术的抉择，HTML5 or Flash？从 Flash Player 11.1 开始，Adobe 不再继续开发面向移动设备浏览器的 Flash 插件，积极投身于 HTML5，这意味着 Flash 技术的凋零。</p><p>这一年，HTML5 游戏火爆到了一个高潮，他的低门槛和高收益让很多开发者眼红，正因如此，移动端开发工具和调试工具也日益成熟。jQuery 已经成为大小公司日常开发的标配，成千上万的 JQ 插件让网页开发变得尤为轻松，而随之而来的也是页面的臃肿和性能调优的深入探索。</p><p>Node.js 已经悄然崛起，在 github 上的访问量已经超过了 Rails，国内的云应用开始尝试使用 Node.js，Node.js 相关工具也纷纷出来。</p><h3 id="12-年，响应式开发，工程化推进"><a href="#12-年，响应式开发，工程化推进" class="headerlink" title="12 年，响应式开发，工程化推进"></a>12 年，响应式开发，工程化推进</h3><hr><p>随着硬件技术的发展，各手机厂商又开始骚动起来，为了占有更多的市场，不断提高产品的性价比，体验也得到了不断的优化。借着先前两年 HTML5 刮起的东风，移动端上的 web 开发也颤抖了起来。移动端的开发挑战不亚于 PC 上对多个浏览器的支持，这一年，萌生了众多移动端框架，如 Sencha Touch/Zepto.js/JQ Mobile 等，相对 PC 端框架，它们更加轻便。</p><p>而移动端的崛起，带来了许多终端开发难题：多终端适配，多分辨率适配，远程调试等等，而随着这些难题一个个被解决，移动端生长的势头变得更加强盛。此时 Twitter 也推出了 Bootstrap， 这个前端开发工具包不仅方便了前端，也方便了后端同学，它的出现让快速建站更加简单。</p><p>编程思想的切换，迎来了 CoffeeScript 和 TypeScript，这两个预处理语言的出现又为 JavaScript 引来了不少其他方向转型过来的开发者。JavaScript 的兄弟 Node.js，也在命令行领域开拓了一片不小的疆域，甚至有动摇 Perl 和 Ruby 地位的趋势。</p><p>在前端工程化上，几个派系相互争斗，产出了 AMD、CMD、KMD 等规范，也衍生了 SeaJS、RequireJS 等模块化工具。前端在这一年很有跳跃感。</p><h3 id="13-年，爆发式增长，百花齐放"><a href="#13-年，爆发式增长，百花齐放" class="headerlink" title="13 年，爆发式增长，百花齐放"></a>13 年，爆发式增长，百花齐放</h3><hr><p>规范和标准上有不少产出。Web Components 的出现给前端开发开辟了新思路；WebDriver 规范的出来推动了自动化测试的进程，ECMAScript 6 的规范草案落地，Webapp 工作小组在这一年也是相当活跃。</p><p>Chrome 浏览器在这一年也有了很大的突破，开始支持 SPDY，使用 Blink 取代 webkit 作为 Chromium 的新渲染引擎，Chrome DevTools 的调试体验大幅度提升。这一年中，Chrome 连同其他浏览器厂商快速推动了各项草案规范的实现。</p><p>语言能力上依旧在增强，并且从 JS 开始扩散到 CSS，出现了 LESS、SASS 和 Stylus 等预处理语言，Web 开发变得更加紧凑。</p><p>而在无线端，应用不再局限于 Webapp，由于流畅度、性能等方面不能满足用户体验的需求，各大公司开始转向 Native 方向的研究，进而出现了 Hybrid 和 PhoneGap 的繁荣，它们为 JS 调用了提供更多的设备 API。</p><p>Node.js 大放异彩，很多公司在生产环境中使用 Node.js，同时也出现了诸如 Express、Meteor 等小巧的快速搭建 Node.js Server 的应用框架。</p><p>各浏览器的调试也是种类繁多、功能丰富，PhantomJS 在自动化测试上开始取代 Selenium，出现了众多的远程调试方案和工具。</p><p>前端工程化开始普及，各公司开始推出自己的前端集成开发解决方案。</p><h3 id="14-年，移动端的崛起，HTML5-和-ES6-落地"><a href="#14-年，移动端的崛起，HTML5-和-ES6-落地" class="headerlink" title="14 年，移动端的崛起，HTML5 和 ES6 落地"></a>14 年，移动端的崛起，HTML5 和 ES6 落地</h3><hr><p>HTML5 正式定稿，这意味着，web page 正式演变为 web application。ES6 华丽丽走进前端，走的很稳重，它的 Module/Class 等特性已经完全让这们语言具备了开发大型应用的能力。</p><p>大而厚的基础库难以满足灵活场景，Mobile 要求极致体验，MV* 库铺卷而来，如 avalon/angular/knockout 等。</p><p>Web Components 跨终端组件快速发展，移动端开发迎来一次升华。Node.js 前后端分离的流行，中间层的出现改变了前后端的合作模式。</p><p>2014 是颠覆式的一年，前端发展在这一年开始形成了一个短暂的稳定格局。</p><h3 id="15-年，观念的转变，步入前端工业化生产"><a href="#15-年，观念的转变，步入前端工业化生产" class="headerlink" title="15 年，观念的转变，步入前端工业化生产"></a>15 年，观念的转变，步入前端工业化生产</h3><hr><p>今年格外引人注目的框架是，类 React。Facebook 在 React.js Conf 2015 大会上推出了基于 JavaScript 的开源框架 React Native，它结合了 Web 应用和 Native 应用的优势，可以使用 JavaScript 来开发 iOS 和 Android 原生应用。在 JavaScript 中用 React 抽象操作系统原生的 UI 组件，代替 DOM 元素来渲染等。敲一次代码，能够运行在多个平台上，其优势可见一斑。除了 React ，还有手机淘宝推出的 Weex 框架，它吸收了 vue.js 的编程精华，编程风格更加简约。</p><p>在众多构建工具中，如今潇洒存活的并不多。体验完 grunt 和 browserify 后，gulp 顺势而至，尔后又出现了 webpack、jspm 等。而包管理工具，经历了 components、bower、spm 后，npm 开始主导整个市场。</p><p>Node.js 的应用已经铺天盖地，各大公司前端都把 Node.js 作为分离前后端的主要手段，并且在测试、监控等方面沉淀了大量内容。不过，这个市场是很苛刻的，Node.js 的性能难以达到 C/C++ 的水平，那么接下来要做的就是要提升性能，至少得接近 C/C++。</p><h2 id="Web-规范和标准"><a href="#Web-规范和标准" class="headerlink" title="Web 规范和标准"></a><strong>Web 规范和标准</strong></h2><hr><p>最开始，我们看到的 JavaScript 还只是一个简单的脚本语言，配合着 AJAX，在网页上翻腾了好几个年头。随着互联网趋势越来越明显，互联网业务量和业务复杂度不断增加，很多网页变得相当复杂，如让我们震惊了好一会儿的 Gmail，交互复杂，体验优良。为了更好的多人协作，代码中的 Utils 库越来越大，在这些库中，基础部分更多的是对 JavaScript 语言本身的拓展，比如给 String 加一个 repeat 函数，再加一个 trim 函数，再加一个 endWith 函数等等。</p><p>复杂的业务中会经常看到一层又一层的回调处理，回调的嵌套让代码的可读性变的很差，而且很难将多个异步并行处理。为了改变这种编程范式，我们做了很多的思考，使用事件监听，使用各种手段拉直回调，平坦地调用。</p><p>慢慢的，如果你在关注 W3C 小组的动向，会发现，那些被认可的，并且被广泛重复定义的东西，都被纳入了标准。最开始的 jQuery/prototype，前者主要是对浏览器做兼容处理，让开发者不再把精力放到浏览器的差异上；后者是对语言本身的拓展，对 JavaScript 各种类型做拓展，并且提供了一套拓展任何对象的功能集。而现在的开发，我们很大程度上不再依托这些类库。规范和标准已经把这些差异都统一了，String 中自带了 includes/startsWith/endsWith/repeat/padStart/padEnd 等函数，Array 自带了 from/forEach/of/keys/values/find/findIndex 函数…</p><p>规范的标准是为了让开发者得到更好的编程体验，编程不是目标，目标是将编程生产力转化成实际效益，越少的阻碍对开发者越有利。各浏览器厂商当然也认识到了这一点，他们不断地提升自己产品的体验，将标准中的新特性都融合进去，比如 ES6 中的 Promise/Generator/Class/Module 等等。在这些内容普及之前，我们不需要加入 jQuery/prototype 这些「不纯粹」的东西，而是添加两个 shim 和 polyfill，如 es5-shim，html5shiv 等等。待到山花烂漫时，再轻松删掉这些补丁程序。</p><p>这两年工程化很热，W3C 小组也看到了，这就是市场的需求，为了完成一个大型应用的编程，就必须模块化、组件化，于是在规范中也出现了 Module &amp; Module Loader；Node.js 的到来，让很多前端工程师开始接触数据库操作，面对巨量的异步，我们忍气吞声写了无数的回调地狱，尽管使用了很多 Promise 相关的操作，程序结构依然松散难以阅读，于是规范中也开始出现了 async/await 等对 Generator 的上层封装。文字已经不能满足当代人的沟通需求，音视频等富媒体传输走进了我们的生活，于是规范中也出来了 WebRTC/WebAudio 等规范。</p><p>只要规范出来了，后续市面上就会根据规范来实现一套 shiv，这些 shiv 提供了同样的 API，提供了同样的编程体验。当浏览器自我进化完成之后，这些 shiv 也将成为历史，被开发者遗弃在代码的注释之中。这些都是规范和标准的魅力，它的存在，就是让开发者把精力投入到自己的业务之中，编程和范式的工作交给它。</p><p>在 这里 可以看到，W3C 各个小组最近都在干啥。标准不能囊括一切。</p><h2 id="生态的自我完善和自我拓展"><a href="#生态的自我完善和自我拓展" class="headerlink" title="生态的自我完善和自我拓展"></a><strong>生态的自我完善和自我拓展</strong></h2><hr><p>技术的更迭过于频繁，我们能够清晰地看到，很多人还在用更迭前一波甚至是前好几波的产品。</p><p>当年的 IE6，在战场上鏖战了 10 多个年头，依然屹立不到，而现在它在市面上依然有百分之一左右的占有率，这种小强精神不得不让人肃然起敬。“只要用户在，我们就得追随”，这可能是很多公司的服务理念，因为用户就是潜在的利润。正是因为这种服务理念，成就了 IE6 一个又一个的 5 年！然而低本版的 IE 已经不仅仅是被前端从业人员抵制和排斥了，网络安全、网络运维、QA 等等，各个技术岗位的人员都开始对他不屑，它的存在对工作效率、对安全、对很多方面产生了极为不良的影响，甚至影响到一些核心内容的推广，所以 2016 将是低版本 IE 消亡的一年，我也呼吁业界所有的朋友举起义旗反抗起来！</p><p>庆幸的是，也有人开始吃螃蟹了。从支付宝到天猫到淘宝，阿里巴巴在很多业务上已经主（bei）动（bi）地放弃了对 IE6 和 IE7 的支持，甚至在统一接入层直接做了 302 跳转，提示用户更新浏览器或者引导流量到无线端。这是一个好的开始，我们期望这也是业界达成共识的开始！</p><p>HTTP 协议，从 1.0 快速过度到了 1.1，整个互联网的上层建筑变的十分稳固。当然，我也了解到依然有很多产品还是保持了 1.0 的状态，据说电信公司的很多产品就是使用 HTTP/1.0 进行通讯，这无疑让人惊愕。为了追求更高的效率，减少网络传输中的无效流量，W3C 工作组对 HTTP 协议也做了重新的定义，SPDY 就是 13 年比较火热的一个话题，Firefox 和 Chrome 都陆续开始支持 SPDY，后来在 SPDY 的基础上做了升级，正式定义为 HTTP/2.0，它的一个很大特点就是多路复用，这个小小的特点改变了我们前端编程的很多优化模式，比如</p><p>域名不是越多越好，为了能够充分利用浏览器的连接数，我们给 JS 和 CSS 开一个域名，给 img 开好几个域名，网页打开的时候，恰到好处的利用浏览器的连接数上限限制。HTTP/2.0 的多路复用，就是可以在一个 HTTP 请求中进行多个资源的传输，如果域名散列，反而不能利用这个特性<br>资源合并没有任何优势，以前的资源合并是为了减少请求数以节约建立 TCP 链接的网络开销和头部传输的流量开销，而在 HTTP/2.0 中，一个 HTTP 请求上完全可以把所有的资源全部推送过来，如果合并了资源，反而不能良好运用浏览器对资源的缓存。</p><p>当然，除了多路复用，还有很多其他的优化，比如传输的数据为二进制流，HEAD 头会被压缩处理，服务器可以向客户端推送内容等。在这个技术水平指数式增长的年代，我相信以后的革新不会比消灭 IE6 痛苦。</p><p>模块加载上，经过了各派系的争论之后，流传下来几个不错的产品 SeaJS、RequireJS 等，那么那个模块加载器将成为工具平台中短暂的终点呢？似乎这些都不是。当我们按照规范中的方式进行模块定义，按照规范中的方式加载定义的模块时，加载这个流程就显得不那么重要了，因为这些事情最后都会变成 shiv/polyfill 的事情，最终会变成浏览器的固有属性。</p><p>当一个东西在社区中被暴力追捧的时候，会有很多衍生的产品出来，当这些衍生物根深蒂固时，可能又会出现一个更加原生更加符合开发习惯的东西出来。就像 jQuery，我们为它编写的插件不计其数，而在工程化的需求冲击下，它却显得那么的弱不禁风，因为它关注的点和当前的发展态势不太吻合，仅此而已。</p><p>Mobile 的发展驱动着战场的转移</p><p>记得当年拿着 Nokia5230 学完了 HTML 和 JavaScript 的入门，那屏幕尺寸也就是三个手指的宽度，紧紧攥在手里看着页面混排效果极差的网页文档。</p><p>现如今，iPhone 都出到 6s 了，一个版本一个尺寸，而且尺寸越来越大，还有各种宽高不一的 Android 机器，种类繁多。以前的触屏是电阻式，只支持单点触碰；而现在电容式的触屏精度更高，还支持多指触控，这如丝般顺滑的体验在三四年前是完全体会不到的。曾经手机开一个程序久了就会卡，动不动还会自动重启；而现在的手机开一堆程序，完全无感知，这就是硬件发展前后的差异。</p><p>手机已经成为了人们生活中不可或缺的一部分，甚至成为了一些人身体的一部分，淘宝今年双十一的数据显示，国内移动端的消费比例已经远远超过了 PC 端，占比 68%。面对庞大的用户，我们的技术是否做好了充足的准备，这里还得打一个问好。</p><p>PC 上那一套经验不是直接搬到移动端就可以使用了，在移动端还需要解决更多的问题：</p><p>多分辨率问题，这里涉及到了响应式设计和前端响应式技术<br>不同网络环境的网页加载优化问题，2g/3g/4g/wifi<br>手指交互带来的一系列体验问题<br>为了提升用户体验，将 Web Native 化 —— 类 React 技术带来的一系列问题<br>远程调试问题<br>移动安全问题等等</p><p>上面提到的问题很多已经有了优秀的解决方案，当然也有很多未提及的。WebApp 的性能、流畅度和稳定性远远不如原生应用，同时它也无法良好地运用设备提供的原生功能，这些都是大家转投 Native 的原因。</p><h2 id="端的融合"><a href="#端的融合" class="headerlink" title="端的融合"></a><strong>端的融合</strong></h2><hr><p>不同分辨率的手机，不同物理尺寸的终端，为了保持良好的视觉体验和用户体验，我们不得不为每一个尺寸写一份 Media Query 代码，那么对应的，设计师也需要设计多套版式供前端使用，这给设计师、前端和测试带来了无尽的麻烦。为此，我们通过前端技术重塑屏幕，重新定义像素尺寸，使用流式布局，通过百分比来响应不同的终端尺寸。这是端的融合。</p><p>后续的 Mobile 的技术发展方向上，应该是相当明确的。很多公司都是三套人马维护三端的程序，iOS、Android 和 Web，而这三端做的事情都是一样的，一样的界面，一样的后端接口，一样的交互方式。为了能够快速响应业务的变更，我们不得不将三端合并为一端对待，用一套程序编程成三端代码，然后发布到三个平台上。这也是端的融合。React 系列技术发展到此，绝对不是终点，它只是一个探路灯，给我们照明了方向。</p><p>技术需要为业务做保障，而好的技术是能够及时响应业务的变化，我们不可能投入大量的人力在 Web 的修补工作上，通过开发统一工具，屏蔽端和端之间的差异，统一开发模式和开发体验，这才是 Mobile 的未来。</p><p>当然，回到我们之前说的规范和标准，我们目前所做的「屏蔽差异」工作，今后，也会有统一的标准来规范，目前手机厂商没有这个共识，是因为还处于当年 Chrome、Firefox 抢占 IE6 市场份额的阶段。端的最终融合在于一个统一的标准，以及强有力的执行。</p><h2 id="栈的融合"><a href="#栈的融合" class="headerlink" title="栈的融合"></a>栈的融合</h2><hr><p>我刚接触前端的时候，还没有听说「全栈」，Web 技术栈往小里说，包含了从前端设计、交互、前端实现、网络数据传输、后端实现、后端运维和数据库等几个方面，能短时间内从无到有实现这么一套系统，并且能够抗得住一定流量冲击的人，我们可以称之为全栈工程师。能够有架构有条理地实现这套系统，并且抗得住大流量、有集成测试、有监控的，这种我们可以称之为资深全栈工程师。现在不乏这种人才，也不乏自吹为这种人。</p><p>栈的融合得益于 Node.js 的出现，作为前后端分离的桥梁，它拉近了前端工程师与后端的距离，有的人在这座桥梁上卖力行走，渐渐的也从前端走进 了后端，甚至走进了后端的运维。至此，前端也拥有了部署和发布整个应用的能力，这是一个质的突破。</p><p>使用 Node.js，简单几行程序便能实现一个 web 服务器、便能搭建一个多人聊天的网页，它的便捷性可见一斑。NPM 社区的发展，沉淀了成千上万的组件包，一行命令即可获取，这种组件拼凑式的开发，任何功能的实现都不会显得太复杂，而这里的「不复杂」也蕴含了无数的坑坑洼洼，在这一层的融合上也会遇上不少阻碍：</p><p>冗余的庞大的包内容，为了使用一个小功能，我们从网络上拉取下来一个巨大的包，而且这里的「巨大」对很多人来说都是无感知的，很少会有人进入 node_modules 去查看依赖的第三方包是如何实现的，实际情况可能会相当震撼，第三方包还引用了一堆第三方包，这些包都会在 Node.js 执行的时候被收纳进去，放在内存中。<br>猛烈的迭代，今年的 Node.js 被人嫌弃迭代太慢了（当然，这是表面原因），走出了一个分支 io.js，发展了一会儿，进度赶超了 Node.js，后来觉得一家人不干两家活，又合并回去了。虽说上层 API 几乎没有变化，但是底层却被翻了一个天。<br>偶尔的巨大漏洞，每隔一端时间就会暴露 Node.js 存在漏洞，这些漏洞的补救措施就是立即升级版本号，比较让人担心受怕。<br>后端意识不强烈，前端占领了中间层的开发，有的时候还干这后端的活儿，然而却没有后端沉淀多年固有的意识，测试和监控做的相当潦草。</p><p>JavaScript 从客户端的脚本语言纵身跃进进入了后端行列，而今也开始深入到移动端 Native 领域，确实是无孔不入，这可能就是语言的特性，也可能是技术本身就在寻求融合点，把有差异的地方全部躺平，然后用统一的方式去关注业务，关注用户。端和栈也在融合。</p><h2 id="后端服务化，云数据，云安全"><a href="#后端服务化，云数据，云安全" class="headerlink" title="后端服务化，云数据，云安全"></a>后端服务化，云数据，云安全</h2><p>用户体验变得越来越重要，响应式技术的发展也是后续网页应用的一大特点，端和端之间的差异只是在表现上，数据这一层差异不是特别打，很多应用 PC 和 Mobile 共用一套接口，或者 Mobile 的接口在 PC 接口的基础上做了一层包装，对接口字段做了些许删减。后端为了响应各个端之间的数据需求，也需要关注数据的可利用性，接口包装的拓展性等，这是后端服务化的一个表现。移动端的开发上，前后端间隙十分明显，越来越多移动端应用的发布已经脱离了后端，前端完全通过异步方式获取数据。</p><p>业务变化很快很快快，今天这个产品被并购，明天那个业务被砍掉，每个人负责的业务线可能冷不丁地就变了。很多大公司的决策是由上往下的，上面微动，下面可能就是大动，可能某个部门就不存在了，也可能被划分成几个产品部门。</p><p>所以「大后台，小前台」的趋势必然形成。前端，毫无疑问，在这个前台之中。前台的特点是灵活的，多变的，可快速重组的。对后台而言，为了响应前台的变化，需要提供更细粒化的 API，将数据打散，打得更加零碎，零碎的数据易于重组，这是在考验后端的架构能力。如今，很多前端也都是半栈工程师，盘踞在前后端中间层上，然而如何迎接这种后端服务化的模式，似乎这个准备还是不够充足的。</p><p>GraphQL 的出现场景跟 React 类似，React 是前端应对不同场景的一种强有力手段，而 GraphQL 则是后端应对不同需求场景的一次尝试，Web APIs 将会成为 Web App 和 Mobile App 的一个中心点，前端基于后端的 RESTful 服务构建应用，这里面存在太多未知的问题需要探索，这是一个大数据下探索的新起点，也给前端开发者创造了无数的可能。</p><p>这几年各类网盘，各个云服务商都在抢占市场，有提供图片储存的，有提供 CDN 静态资源缓存的，有提供大文件储存的，也有卖数据库服务的。种类繁多，而归根到底都是，你付钱给我，我提供储存和安全，还提供方便的 SDK 让你获取自己的数据。云服务卖的是一套服务，它是把所有人的数据风险集于一身，用强硬的技术做安全防御。云，赋予了我们无穷的想象空间。</p><h2 id="三辆马车，我们还差一辆"><a href="#三辆马车，我们还差一辆" class="headerlink" title="三辆马车，我们还差一辆"></a>三辆马车，我们还差一辆</h2><p>开发功能对很多人来说是轻松活儿，基本的前端语言加些复杂的特效，实现成本不会很高；即便是搭建一个网站，使用 Node.js 社区中的框架也能够轻松实现。然后极少人会去关注每个功能点的测试，一个项目下来基本看不到测试用例，更不用说会去做监控相关的事情。结果就是，踏过了无数的坑洼之后终于上线了，而后续加功能的时候发现，加了东西就跑不通，新内容影响了之前的逻辑，只好去修复之前的逻辑，修好之后发现更早之前的逻辑又不通了，整个修复过程就像玩多米诺骨牌。</p><p>程序开发三板斧：功能、测试和监控。在 github 上可以看到很多程序都加入了持续集成，这是一个好兆头，以为着我们写的程序也越来越健壮，至少贡献给世人使用的程序是健壮的。很多程序的代码覆盖率也达到了 90%+，这些数据都是重视测试的证据。</p><p>然而，三辆马车，我们最后一辆依然没有开动起来。很多公司都会有自己的 log 平台，每个用户访问页面中的任何一个链接都会将用户信息和访问信息以 log 日志形式收集到 log 平台上，然后通过监控平台或者离线分析的方式，获取业务数据或者技术数据，进行分析和二次开发。这些东西在大公司见的很多，而这方面的东西在前端，尤其是使用 Node.js 做程序开发的前端身上，看到的并不多。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2016 年，我觉得技术上的新创造会稍微缓和些，这两年很多人已经被新技术冲击得有些找不着方向了，同一类东西，前者还没学完，后者就开始火爆了，紧接着又是一阵技术的凋零和新技术的出现，这样搞久了也会有一丝的疲倦。而更多的会关注，如何更好地服务多端，如何更大幅度地提升开发体验和用户体验，很多技术都会往性能、往极致这个方向上钻研。</p><p>写长文真不轻松。写到这里，感觉说的不通透，还有很多想说的，但是个人理解力有限，也难以表达全面。技术的变化很快，今天说过的东西，到了明天就可能过时了。我们猜不透未来，只能把现有的东西好好消化吸收下，留下一个话柄，给读者吧。</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目生命周期</title>
      <link href="/2015/11/06/2017-5-15-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2015/11/06/2017-5-15-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="项目生命周期"><a href="#项目生命周期" class="headerlink" title="项目生命周期"></a>项目生命周期</h4><blockquote><p>项目岗位 ，传统项目生命周期  新型项目周期</p></blockquote><h5 id="产品岗位-—（产品方向指挥员）"><a href="#产品岗位-—（产品方向指挥员）" class="headerlink" title="产品岗位 —（产品方向指挥员）"></a>产品岗位 —（产品方向指挥员）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出一条符合公司目前业务发展的方向点</span></span><br><span class="line"><span class="comment"># 通过某些工具 将工作目标具体化，可视化</span></span><br><span class="line"><span class="comment"># 产品需求文档  项目里程表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与相关团队加强交流，避免产品的功能需求出现偏差</span></span><br></pre></td></tr></table></figure></div><h5 id="开发岗位—（产品实现制造员）"><a href="#开发岗位—（产品实现制造员）" class="headerlink" title="开发岗位—（产品实现制造员）"></a>开发岗位—（产品实现制造员）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据产品需求文档和相关文件，将产品的功能 使用代码实现出来</span></span><br></pre></td></tr></table></figure></div><h5 id="测试岗位-—（产品质量检测员）"><a href="#测试岗位-—（产品质量检测员）" class="headerlink" title="测试岗位 —（产品质量检测员）"></a>测试岗位 —（产品质量检测员）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断 开发的产品是否满足产品需求文档中定义的功能 </span></span><br><span class="line"><span class="comment"># 判断能否达到用户的使用标准</span></span><br></pre></td></tr></table></figure></div><h5 id="运营岗位-—-（产品的维护支撑者）"><a href="#运营岗位-—-（产品的维护支撑者）" class="headerlink" title="运营岗位 — （产品的维护支撑者）"></a>运营岗位 — （产品的维护支撑者）</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与其他团队沟通合作 将服务器环境搭建的合理 实时查看项目正常运行状态</span></span><br></pre></td></tr></table></figure></div><p><strong><em>一个项目的完成 需要各岗位通力合作完成</em></strong></p><hr><h4 id="传统软件项目生命周期"><a href="#传统软件项目生命周期" class="headerlink" title="传统软件项目生命周期"></a>传统软件项目生命周期</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调研阶段 ===&gt; 设计阶段 ===&gt; 开发阶段 ===&gt;  测试阶段 ====&gt; 运营阶段</span></span><br></pre></td></tr></table></figure></div><ol><li><p>调研阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">目的：居安思危 生存的核心竞争力</span><br><span class="line">人员：侧重于产品经理</span><br><span class="line">节点：多角度思路/方案  领导拍板</span><br><span class="line"></span><br><span class="line">例如：市场调研 竞品分析等</span><br></pre></td></tr></table></figure></div></li><li><p>设计阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">目的：方案可视化</span><br><span class="line">人员：产品团队主导，开发 测试 运维参与</span><br><span class="line">节点：产品需求文档 项目里程表</span><br><span class="line">（PM UE UI）</span><br></pre></td></tr></table></figure></div></li><li><p>开发阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">目的：方案实现/运行</span><br><span class="line">人员：开发团队为主 运维团队参与</span><br><span class="line">节点：阶段项目正常运行 后期会有版本迭代</span><br><span class="line">（FE  BE DBA）</span><br></pre></td></tr></table></figure></div></li><li><p>测试阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">目的：保证项目功能完善</span><br><span class="line">人员： 测试团队为主 运维 开发参与</span><br><span class="line">节点：项目功能符合需求</span><br><span class="line">(QA)</span><br></pre></td></tr></table></figure></div></li><li><p>运营阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目的：项目部署 +  运行维护</span><br><span class="line">人员：运营团队为主  开发/产品团队参与</span><br><span class="line">节点：项目终止 功能迭代等</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">调研阶段的方向需求点是基于<span class="string">"假设"</span>出来的</span><br><span class="line">A阶段的产出是B阶段工作的前提。</span><br><span class="line">   最终的产品能不能达到用户的需求，待定</span><br></pre></td></tr></table></figure></div></li></ol><hr><h4 id="新型项目生命周期"><a href="#新型项目生命周期" class="headerlink" title="新型项目生命周期"></a>新型项目生命周期</h4><p><a href="/img/images/web01/%E6%96%B0%E5%9E%8B%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png" data-fancybox="group" data-caption="新型开发模式" class="fancybox"><img alt="新型开发模式" title="新型开发模式" data-src="/img/images/web01/%E6%96%B0%E5%9E%8B%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统 以文档的形式推导项目向前发展</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 团队的利用效率不好</span></span><br><span class="line"><span class="comment"># 产品迭代的周期太慢</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新型 </span></span><br><span class="line">特点：</span><br><span class="line"><span class="number">1.</span> 软件功能的拆分 分成独立的子功能项目</span><br><span class="line">    <span class="number">2.</span> 以人/团队沟通协作为主导项目的开发进度</span><br><span class="line">常见术语：</span><br><span class="line"><span class="number">1.</span> 持续集成 CI  开发和测试团队之间的无障碍协作沟通  有温度的产品</span><br><span class="line">    <span class="number">2.</span> 敏捷开发  产品和研发团队无障碍沟通  方向正确</span><br><span class="line">    <span class="number">3.</span> 狭义DevOps 研发和运营  部署</span><br><span class="line">    <span class="number">4.</span> 持续交付<span class="number">1.0</span>/<span class="number">2.0</span>  CD  产品和运营 各团队的无障碍协作沟通 实现项目产品的端到端的交付能力</span><br></pre></td></tr></table></figure></div><p><a href="/img/images/web01/%E6%96%B0%E5%9E%8B%E8%BD%AF%E4%BB%B6%E6%95%88%E6%9E%9C%E5%9B%BE.png" data-fancybox="group" data-caption="新型软件效果图" class="fancybox"><img alt="新型软件效果图" title="新型软件效果图" data-src="/img/images/web01/%E6%96%B0%E5%9E%8B%E8%BD%AF%E4%BB%B6%E6%95%88%E6%9E%9C%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p><hr><h4 id="物理环境"><a href="#物理环境" class="headerlink" title="物理环境"></a>物理环境</h4><h5 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 物理设备 + 操作系统 合理配置  它是所有环境正常运行的根本所在</span></span><br></pre></td></tr></table></figure></div><h5 id="基础设施环境"><a href="#基础设施环境" class="headerlink" title="基础设施环境"></a>基础设施环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础环境之上  结合 相关网络设备配置 安装相关软件DNS DHCP SNMP FTP等</span></span><br></pre></td></tr></table></figure></div><h5 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支撑项目运行的相关软件安装和搭建</span></span><br><span class="line">如 nginx  django  python</span><br></pre></td></tr></table></figure></div><h5 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把基础环境 和 基础设施环境  应用环境都有自己特定功能属性的数据  将这些数据保存下来的文件就是配置文件</span></span><br><span class="line"></span><br><span class="line">如 工作目录  saltstack  ansible   disconf  版本控制系统等</span><br></pre></td></tr></table></figure></div><h5 id="集群环境"><a href="#集群环境" class="headerlink" title="集群环境"></a>集群环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将上面的四个环境 整合起来就是我们的<span class="string">"业务环境"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了实现高性能  高扩展 高容量等业务优势特性  </span></span><br><span class="line"><span class="comment"># 由大量服务器来支撑的业务环境 我们称之为"集群环境"</span></span><br></pre></td></tr></table></figure></div><hr><h4 id="逻辑环境"><a href="#逻辑环境" class="headerlink" title="逻辑环境"></a>逻辑环境</h4><h5 id="个人开发环境"><a href="#个人开发环境" class="headerlink" title="个人开发环境"></a>个人开发环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">个人   自己的电脑   个人配的开发环境(可以和公司开发环境不一样)</span><br><span class="line">工作内容 项目的子模块和子功能   完成领导的安排</span><br><span class="line"></span><br><span class="line">单元测试</span><br></pre></td></tr></table></figure></div><h5 id="公司开发环境"><a href="#公司开发环境" class="headerlink" title="公司开发环境"></a>公司开发环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开发团队  公司内部服务器    服务器环境和线上服务器环境完全一致</span><br><span class="line">工作内容 项目子模块之间的功能联调  项目阶段开发 调试完成</span><br><span class="line"></span><br><span class="line">组建和接口测试</span><br></pre></td></tr></table></figure></div><h5 id="项目测试环境"><a href="#项目测试环境" class="headerlink" title="项目测试环境"></a>项目测试环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试团队  公司内部服务器   和线上服务器完全一致</span><br><span class="line">项目功能/非功能/探索测试  项目阶段功能正常运行</span><br></pre></td></tr></table></figure></div><h5 id="项目预发布环境"><a href="#项目预发布环境" class="headerlink" title="项目预发布环境"></a>项目预发布环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运维团队   公司线上服务组中的一台  和线上服务器完全一致</span><br><span class="line">特殊功能测试（比如支付） 数据压力测试 其他安全测试</span><br><span class="line">完成标准 项目阶段功能正常运行 最后一道防线</span><br></pre></td></tr></table></figure></div><h5 id="项目线上环境"><a href="#项目线上环境" class="headerlink" title="项目线上环境"></a>项目线上环境</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运维团队  公司线上服务器   标准线上的服务器  </span><br><span class="line">代码的部署和维护  项目的正常运行</span><br></pre></td></tr></table></figure></div><p><strong><em>1.所有的环境彼此隔离</em></strong></p><p><strong><em>2.都有上面物理环境中的一个或多个组成</em></strong></p><p><strong><em>3.公司所有的服务器都看不到，只能通过远程连接来访问</em></strong></p><hr><h4 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h4><h5 id="开发团队"><a href="#开发团队" class="headerlink" title="开发团队"></a>开发团队</h5><ol><li>前端小组：界面可视化工作</li><li>后端小组：业务逻辑实现 开发功能接口 实现前后端整合</li><li>数据库小组：设计和操作数据库与数据表相关内容</li></ol><p><strong>人员数量 一般6-8人 根据项目功能多少 以及领导管理能力大小来定</strong></p><h5 id="工作拆分"><a href="#工作拆分" class="headerlink" title="工作拆分"></a>工作拆分</h5><ol><li>团队人数按照工作进行合理分块 分配给每一个人</li><li>技术水平：对团队成员的能力进行评估，能者多劳，最大化提高团队人员的综合利用效率</li></ol><h5 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h5><blockquote><p>团队项目产品开发的过程中，项目文件代码保持一致性的一种方式</p></blockquote><h5 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h5><blockquote><p>自动实现特定/完全版本控制功能的一种软件平台，它是文件多版本状态共存的一种机制</p></blockquote><h5 id="版本控制系统特点"><a href="#版本控制系统特点" class="headerlink" title="版本控制系统特点"></a>版本控制系统特点</h5><ol><li>版本存储</li><li>协同合作</li></ol><h5 id="分类-amp-工具"><a href="#分类-amp-工具" class="headerlink" title="分类&amp;工具"></a>分类&amp;工具</h5><ul><li>集中式版本控制系统</li></ul><p>​    产品项目的标准代码几种放在中央代码的服务器</p><p>​    CVS   SVN   VSS</p><ul><li><p>分布式版本控制系统</p><p>分布式版本控制系统没有中央服务器，团队中每一个人的电脑就是 一个完整的代码版本库</p><p>Git   Mercurial  Montone   Bitkeeper  … … </p></li></ul><hr><h4 id="分支基础"><a href="#分支基础" class="headerlink" title="分支基础"></a>分支基础</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用术语：</span><br><span class="line">仓库 版本 分支</span><br><span class="line">动作术语：</span><br><span class="line">获取 提交 合并 冲突 解决</span><br><span class="line">其他术语：</span><br><span class="line">hook  锁定</span><br></pre></td></tr></table></figure></div><h5 id="分支简介："><a href="#分支简介：" class="headerlink" title="分支简介："></a>分支简介：</h5><blockquote><p>分支的主要目的就是 帮助项目并行开发</p></blockquote><h5 id="分支类型："><a href="#分支类型：" class="headerlink" title="分支类型："></a>分支类型：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长分支 和 短分支</span></span><br><span class="line">根据长时间出现的分支叫做 长分支  一般整个生存时间&gt;=<span class="number">3</span>天 叫做长分支  大型成熟公司团队 存活时间长于<span class="number">1</span>天的可以称之为长分支  否则称之为 短分支</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">master 长分支  bugfix  feature-B  fea-C分支都是短分支</span><br></pre></td></tr></table></figure></div><p><strong>对于长分支来说，主要有三种</strong></p><p>主干分支 master   开发分支 develop  分布分支  release</p><p><a href="/img/images/web01/%E9%95%BF%E7%9F%AD%E5%88%86%E6%94%AF%E7%BB%BC%E5%90%88%E6%95%88%E6%9E%9C%E5%9B%BE.png" data-fancybox="group" data-caption="长短分支综合效果图" class="fancybox"><img alt="长短分支综合效果图" title="长短分支综合效果图" data-src="/img/images/web01/%E9%95%BF%E7%9F%AD%E5%88%86%E6%94%AF%E7%BB%BC%E5%90%88%E6%95%88%E6%9E%9C%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p><p>​    </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 从本地master 拉取出来一个开发分支</span><br><span class="line"><span class="number">2</span> 在开发分支正常开发代码</span><br><span class="line"><span class="number">3</span> 本地开发分支简单测试</span><br><span class="line"><span class="number">4</span> 拉取我们开发过程中，master分支上变化的新代码 合并到开发分支</span><br><span class="line">  重新再开发分支进行测试  组件接口测试</span><br><span class="line"><span class="number">5</span> 将测试通过的开发分支代码推送到master</span><br><span class="line"><span class="number">6</span> master分支进行集成测试</span><br></pre></td></tr></table></figure></div><p><a href="/img/images/web01/%E9%9B%86%E6%88%906%E6%AD%A5%E6%8F%90%E4%BA%A4%E6%B3%95.png" data-fancybox="group" data-caption="长短分支综合效果图" class="fancybox"><img alt="长短分支综合效果图" title="长短分支综合效果图" data-src="/img/images/web01/%E9%9B%86%E6%88%906%E6%AD%A5%E6%8F%90%E4%BA%A4%E6%B3%95.png" src="/img/loading.gif" class="lazyload"></a></p><p>​        </p><h5 id="常见开发分支模式"><a href="#常见开发分支模式" class="headerlink" title="常见开发分支模式"></a>常见开发分支模式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分支开发---主干发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分支开发---分支发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主干开发---分支发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主干开发---主干发布</span></span><br></pre></td></tr></table></figure></div><h5 id="生产案例"><a href="#生产案例" class="headerlink" title="生产案例"></a>生产案例</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 每天向主干合并一次代码</span><br><span class="line"><span class="number">2</span> 让分支生命周期尽量短（少于一天）</span><br><span class="line"><span class="number">3</span> 同一时间少于三天的活跃分支</span><br></pre></td></tr></table></figure></div><h4 id="项目发布-1"><a href="#项目发布-1" class="headerlink" title="项目发布"></a>项目发布</h4><blockquote><p>项目发布：将我们的代码放到一台公司的互联网服务器上</p></blockquote><p>手工方式和脚本方式</p><p>脚本相比手工发布代码的优势：</p><p>快，干扰因素少，安全</p><h5 id="发布原则"><a href="#发布原则" class="headerlink" title="发布原则"></a>发布原则</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 获取代码===&gt;2 打包代码===&gt;3 传输代码===&gt; 4 停止应用</span><br><span class="line">===&gt; 解压代码===&gt; 放置代码===&gt;开启应用===&gt;检查效果===&gt;对外访问</span><br></pre></td></tr></table></figure></div><p><strong>部署流水线：建立在我们对项目发布原则理解的基础上，调研相关功能属性的软件，结合软件将其以自动化方式来实现特定的功能并合理的整合</strong></p><h5 id="原则详解"><a href="#原则详解" class="headerlink" title="原则详解:"></a>原则详解:</h5><p><a href="/img/images/web01/%E5%8F%91%E5%B8%83%E6%BC%94%E7%A4%BA%E5%9B%BE.png" data-fancybox="group" data-caption="长短分支综合效果图" class="fancybox"><img alt="长短分支综合效果图" title="长短分支综合效果图" data-src="/img/images/web01/%E5%8F%91%E5%B8%83%E6%BC%94%E7%A4%BA%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p><ul><li><p>获取代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 代码仓库</span><br><span class="line">  - 集中式：SVN</span><br><span class="line">  - 分布式：git</span><br><span class="line">- 公司的代码仓库：gitlab</span><br><span class="line">- 仓库权限：只有项目的开发人员才有权限，项目之外的人没有权限</span><br><span class="line">- 代码权限：开发 管理 查看</span><br><span class="line">- 提交的方式：代码的版本号</span><br></pre></td></tr></table></figure></div></li><li><p>打包代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 目的：</span><br><span class="line">- 减少传输文件的数量</span><br><span class="line">    - 减小传输文件大小</span><br><span class="line">    - 增强传输速率</span><br><span class="line">   </span><br><span class="line">- 常见的打包方式：</span><br><span class="line">- window：zip  rar</span><br><span class="line">    - linux: tar zip</span><br></pre></td></tr></table></figure></div></li><li><p>传输代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 有网情况</span><br><span class="line">- 多种方式： git  ftp scp 共享挂载 cp  rsync</span><br><span class="line">- 没有网的情况下</span><br><span class="line">- 物理方式：U盘  或者硬盘</span><br></pre></td></tr></table></figure></div></li><li><p>关闭应用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 站在用户的角度 先关闭离客户近的，在关闭离客户远的</span><br></pre></td></tr></table></figure></div></li><li><p>解压代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf ...</span><br></pre></td></tr></table></figure></div></li><li><p>放置代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 备份原文件</span><br><span class="line">- 防治新文件</span><br></pre></td></tr></table></figure></div></li><li><p>开启应用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">刚才关闭了什么应用就开启什么应用</span><br><span class="line">开启的顺序：</span><br><span class="line">先开启离客户远的，后开启离客户近的</span><br></pre></td></tr></table></figure></div></li><li><p>检查</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看浏览器效果或者netstat  -tnulp 查看系统开放的端口</span><br></pre></td></tr></table></figure></div></li></ul><h5 id="技术关键点"><a href="#技术关键点" class="headerlink" title="技术关键点"></a>技术关键点</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件的压缩：</span></span><br><span class="line">   tar zcvf 压缩后的文件名 将要压缩的文件</span><br><span class="line"><span class="comment"># 文件的解压</span></span><br><span class="line">tar xf  压缩后的文件名</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">z 指定压缩格式为tar.gz</span></span><br><span class="line"><span class="string">c 压缩 v 显示详细过程  f 指定压缩文件  x 解压</span></span><br><span class="line"><span class="string">zcat 查看压缩文件的内容</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp传输工具</span></span><br><span class="line">  scp  要传输的文件   要放置的位置</span><br><span class="line">   </span><br><span class="line">远程连接的用户@远程主机:远程主机的目录路径</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件备份  使用时间戳来做唯一标志</span></span><br><span class="line">date [option]</span><br><span class="line">%F : %Y-%m-%d</span><br><span class="line">%T : %H:%M:%S</span><br><span class="line">指定时间戳格式：</span><br><span class="line">年月日时分秒:date +%Y%m%d%H%M%S</span><br><span class="line"></span><br><span class="line">mv nihao nihao-$(date +%Y%m%d%H%M%S)</span><br></pre></td></tr></table></figure></div><hr><h4 id="项目运营"><a href="#项目运营" class="headerlink" title="项目运营"></a>项目运营</h4><h5 id="项目演变"><a href="#项目演变" class="headerlink" title="项目演变"></a>项目演变</h5><ul><li><p>技术变革</p></li><li><p>框架演变</p></li><li><p>架构演变</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般来说项目有三层内容：</span><br><span class="line">web访问层---数据库层---存储层</span><br></pre></td></tr></table></figure></div><ol><li><p>初级阶段：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">单体阶段：</span><br><span class="line">所有应用服务都部署在同一台主机上</span><br><span class="line">应用/数据分离阶段：</span><br><span class="line">应用和数据库单独部署</span><br><span class="line">页面动静分离阶段：</span><br><span class="line">剥离用户的读请求/写请求</span><br><span class="line">页面/数据缓存阶段：</span><br><span class="line">web缓存local storage    数据缓存 drf-extension</span><br><span class="line">购买cdn缓存服务器</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>注意：架构演变过程中，所有的增加内容，都是根据业务场景中的瓶颈点，结合成本和收益综合考虑，一步一步做出来的。<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>中期阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">应用服务集群阶段</span><br><span class="line"><span class="number">1.</span> nginx代理集群  </span><br><span class="line">    <span class="number">2.</span> 应用服务器集群  </span><br><span class="line">    <span class="number">3.</span>数据库集群  mysql集群 /redis缓存分布式）</span><br><span class="line">数据库读写分离：</span><br><span class="line"><span class="number">1.</span> 数据库集群做读写分离  </span><br><span class="line">    <span class="number">2.</span> 静态文件做共享存储（实现并行体系）</span><br><span class="line">    </span><br><span class="line">存储分布式：</span><br><span class="line"><span class="number">1.</span> 对数据库分库/分表扩展</span><br><span class="line">    <span class="number">2.</span> 数据文件使用分布式存储</span><br><span class="line">    </span><br><span class="line">    分布式存储 ceph glusterfs  hdfs</span><br><span class="line">业务应用拆分：</span><br><span class="line">项目应用进行拆分</span><br></pre></td></tr></table></figure></div></li><li><p>中后期阶段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">业务拆分：</span><br><span class="line">所有功能以服务形式单独部署，引入配置管理中心，消息中间件，搜索引擎等功能</span><br><span class="line">    </span><br><span class="line">微服务阶段：</span><br><span class="line">所有服务都可以自由部署</span><br></pre></td></tr></table></figure></div></li></ol></li></ul><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><h5 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 分析项目的产品需求分档 获取项目主旨  定好部署方案的方向</span><br><span class="line"><span class="number">2</span> 分析项目开发文档 按照功能边界，设计部署的节点</span><br><span class="line"><span class="number">3</span> 分析边界功能，调研功能边界，合理的取舍，选符合当前业务场景的</span><br><span class="line"><span class="number">4</span> 梳理方案，部署初版部署方案</span><br><span class="line"><span class="number">5</span> 根据项目实际情况，调整优化并确定项目部署方案</span><br></pre></td></tr></table></figure></div><h5 id="架构部署原则"><a href="#架构部署原则" class="headerlink" title="架构部署原则"></a>架构部署原则</h5><p><a href="/img/%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" data-fancybox="group" data-caption="长短分支综合效果图" class="fancybox"><img alt="长短分支综合效果图" title="长短分支综合效果图" data-src="/img/%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一级定位：核心组成部分</span><br><span class="line">web  数据库  存储层</span><br><span class="line"></span><br><span class="line">二级定位  功能增强部分</span><br><span class="line">web缓存  代理 数据库缓存</span><br><span class="line"></span><br><span class="line">对于架构的一级角色：部署原则  站在用户访问资源的角度，从后向前依次部署</span><br><span class="line">对于架构的二级角色，部署原则， 哪里需要部署哪里</span><br></pre></td></tr></table></figure></div><h5 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 流程分析</span><br><span class="line">  基于环境部署需求关键点 查依赖 逐渐梳理分析流程</span><br><span class="line"><span class="number">2</span> 方案定制</span><br><span class="line">基于最终的分析流程 排查节点，定环境部署方案</span><br></pre></td></tr></table></figure></div><hr><h4 id="项目运营-1"><a href="#项目运营-1" class="headerlink" title="项目运营"></a>项目运营</h4><h5 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IP 独立ip数</span></span><br><span class="line"><span class="comment"># PV page view 页面浏览量</span></span><br><span class="line">指一天内网站的浏览次数，它是衡量网站用户访问页面的数量</span><br><span class="line"><span class="comment"># UV  unique Visitor 页面访问的用户</span></span><br><span class="line">指一天内访问某站点的人数  以cookie/客户端为依据</span><br><span class="line"><span class="comment"># VV： Visit View 用户访问网站次数</span></span><br><span class="line">指一天内某个用户访问了多少次数</span><br><span class="line">    特点：</span><br><span class="line">      打开网页A 浏览完毕后关闭该页面  表示一次访问</span><br><span class="line">       </span><br><span class="line"><span class="comment"># BR： Bounce Rate 跳出率</span></span><br><span class="line">指一天内访问用户中，打开网站后没有做任何事情，一会儿就离开了的比例</span><br><span class="line">    特点：</span><br><span class="line">    如果跳出率很高，我们的网页没有什么吸引力，设计效果不怎么好</span><br><span class="line">        </span><br><span class="line"><span class="comment"># CR: Conversion Rate 转化率</span></span><br><span class="line">指一天内访问用户中，打开网站后，继续浏览该网站其他页面的比例</span><br></pre></td></tr></table></figure></div><p><strong>网站质量：术语 跳出率 和 转化率 人员：产品，开发</strong></p><p><strong>常见分析工具：</strong></p><p><strong>服务器日志，公司内部监控平台等</strong></p><p><strong>互联网网站分析工具：CNZZ 百度统计，云平台监控</strong></p><hr><h5 id="项目运营-2"><a href="#项目运营-2" class="headerlink" title="项目运营"></a>项目运营</h5><ul><li><p>缓存层</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? 在现有主机资源情况下，花最小的代价扛住大量的用户访问量</span><br><span class="line"></span><br><span class="line"><span class="meta">@ 自建web缓存 或者购买cdn</span></span><br></pre></td></tr></table></figure></div></li><li><p>代理层</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? 如何提高用户高质量的请求分发</span><br><span class="line"></span><br><span class="line"><span class="meta">@ 基于请求的关键字进行合理的分流</span></span><br><span class="line">基于请求的ip地址  封闭恶意的ip访问，提高正常的ip用户访问效率</span><br><span class="line">    基于请求的浏览器信息，分发到相应的后端应用</span><br><span class="line">    基于请求的协议方法 做好读写分离业务的精确分流</span><br><span class="line">    基于请求的路径信息，做好指定业务的精确分流</span><br><span class="line">    </span><br><span class="line">nginx  反向代理  负载均衡 url重定向 <span class="keyword">if</span>指令  大量内置变量 request_method</span><br></pre></td></tr></table></figure></div></li><li><p>web后端访问层</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?动态web请求过多，压力有些大，常见的解决方法有哪些</span><br></pre></td></tr></table></figure></div><p>@ 分析动态的web请求瓶颈点：</p><pre><code>请求量大：web缓存/cdn  动态web集群</code></pre><p>​      数据库操作多：<br>​      分析请求内容是否频繁/集中，页面静态化考虑</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 数据层</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  ? 如何保证我们数据存储的质量</span><br><span class="line">  </span><br><span class="line">  @ 存储设备的购买质量 分布式存储  备份策略(快照）</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>缓存知识体系了解一下</strong></p><p>浏览器—服务器–内存–cpu</p><hr><h4 id="功能迭代"><a href="#功能迭代" class="headerlink" title="功能迭代"></a>功能迭代</h4><blockquote><ol><li>传统：边做边改，瀑布，迭代，增量，快速原型，螺旋模型</li><li>新型：敏捷，精益，DevOps等</li></ol></blockquote><h5 id="边做边改模型"><a href="#边做边改模型" class="headerlink" title="边做边改模型"></a>边做边改模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优势：</span><br><span class="line"><span class="comment"># 这种作坊式的软件生产方法，好处就是快速的产出效益，企业回笼资金快</span></span><br><span class="line">劣势：</span><br><span class="line"><span class="comment"># 1 野草式发展：无计划，软件结构无规律修改，产品越来越糟，最终导致无法继续修改</span></span><br><span class="line"><span class="comment"># 2 质量无保证： 无考虑测试和可维护性，没有任何文档，软件的维护十分困难</span></span><br></pre></td></tr></table></figure></div><p><strong>场景初期使用最频繁</strong></p><p><strong>逻辑不需要太严谨的小项目</strong></p><h5 id="瀑布模式"><a href="#瀑布模式" class="headerlink" title="瀑布模式"></a>瀑布模式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提供了一个理想化的软件开发基础框架，以文档形式来推动项目进度</span><br><span class="line">优点：按部就班 适合过程管理 线性开发</span><br><span class="line">劣势：需求不确定 反馈太漫长 导致缺乏并行性 效率低下</span><br><span class="line">场景：大型 核心 稳定性高的项目</span><br></pre></td></tr></table></figure></div><h5 id="迭代模型"><a href="#迭代模型" class="headerlink" title="迭代模型"></a>迭代模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">快速将产品交付，一个阶段一个阶段完成部分功能，每一个阶段使用瀑布模式开发，最终交付一个完善的产品</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"> <span class="number">1.</span> 反馈周期短</span><br><span class="line"> <span class="number">2.</span> 降低产品风险</span><br><span class="line"> <span class="number">3.</span> 提高效率</span><br><span class="line">劣势：</span><br><span class="line">团队综合应对水平有一定要求，组织者水平要求高一些</span><br><span class="line">场景：</span><br><span class="line">大部分项目的中后期的通用做法</span><br><span class="line">    高风险项目</span><br><span class="line">    </span><br><span class="line">在设计阶段 一个阶段一个阶段的设计 并实现部分功能，最终完成产品  按照(调--设--开--测--部)快速迭代</span><br></pre></td></tr></table></figure></div><h5 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">按照瀑布模式进行线性开发，但却是一个阶段一个阶段的功能迭代开发</span><br><span class="line">前期就进行整体的产品精细化设计，将复杂项目进行合理的阶段性功能拆分，</span><br><span class="line">后期通过 (开发--测试--部署)实现快速迭代</span><br><span class="line"></span><br><span class="line">优势：保证项目目标方向上 产品交付时间短</span><br><span class="line">      保证交付时间的标准上 产品功能目标比迭代模型好</span><br><span class="line">劣势：</span><br><span class="line">精细设计程度：要求程度较高，对于需求变动大的项目不太适合</span><br><span class="line">    阶段性依赖：较强</span><br><span class="line">    团队水平：功能需求变动风险较高，领导组织水平要求较高</span><br><span class="line">场景：</span><br><span class="line">大部分项目早期使用增量，可以规避技术风险</span><br><span class="line">    交付时间短，人员不足的项目场景</span><br><span class="line">    产品需求功能变动大的场景不适合</span><br></pre></td></tr></table></figure></div><h5 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用于需求复杂/动态变化的软件系统 在调研阶段制度部分核心功能进行分析，用最少的时间做一个基本功能完备产品原型</span><br><span class="line">优势：</span><br><span class="line">适用于需求复杂/动态变化的软件系统</span><br><span class="line">    减少需求不明确带来的开发风险</span><br><span class="line">劣势：</span><br><span class="line">用户是善变的，开发会受到需求变更的影响，开发团队具有快速重构项目的能力</span><br><span class="line">    </span><br><span class="line">场景：</span><br><span class="line">特殊，需求不明的 复杂的项目，或者项目中有某些紧急bug</span><br></pre></td></tr></table></figure></div><h5 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在快速原型和瀑布模型基础上 增加了风险分析策略，结合多种方法尽量降低风险，保证项目的产品质量</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 功能计划：确定软件功能，理清限制条件，指定研发方案</span><br><span class="line"><span class="number">2.</span> 风险分析：评估研发方案，考虑如何识别和消除风险</span><br><span class="line"><span class="number">3.</span> 项目生产：软件开发 测试 和部署</span><br><span class="line"><span class="number">4.</span> 客户反馈：工作复盘，提出修正建议，指定下一步计划</span><br><span class="line"></span><br><span class="line">优势：</span><br><span class="line">以进化的开发方式为中心，结合使用快速原型</span><br><span class="line">    强调了其他模型所忽视的风险分析</span><br><span class="line">劣势：</span><br><span class="line">强调风险分析，但要求许多客户接受并相信这种分析，是不容易的</span><br><span class="line">    </span><br><span class="line">场景：特别适合于大型复杂的系统</span><br></pre></td></tr></table></figure></div><h5 id="敏捷开发模型"><a href="#敏捷开发模型" class="headerlink" title="敏捷开发模型"></a>敏捷开发模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">应对快速变化的用户需求的一种软件开发的管理新模式，由数十种软件开发的项目管理方法的集合</span><br><span class="line">Scrum主管</span><br><span class="line">XP：一种轻量 敏捷 高效 低风险 柔性 可预测 科学而且充满乐趣的软件开发方式</span><br><span class="line">特点：</span><br><span class="line">响应变更快，关注产品价值，注重个人能力</span><br><span class="line">    </span><br><span class="line">项目开发：软件架构的解耦</span><br><span class="line">功能迭代：项目周期短</span><br><span class="line">核心特征：团队紧密协作 小儿精干 面对面沟通，指定</span><br></pre></td></tr></table></figure></div><p><a href="/img/images/web01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%9B%BE.png" data-fancybox="group" data-caption="长短分支综合效果图" class="fancybox"><img alt="长短分支综合效果图" title="长短分支综合效果图" data-src="/img/images/web01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优势： </span><br><span class="line"> <span class="number">1.</span> 产品团队，研发团队，测试团队之间更注重紧密协作</span><br><span class="line"> <span class="number">2.</span> 团队小儿精干，面对面（口头/源代码）交流，来深入理解产品的结构和功能</span><br><span class="line"> <span class="number">3.</span> 开发内嵌测试，质量前置</span><br><span class="line">劣势：</span><br><span class="line">团队组建较难，人员不多，但综合技术能力要求较强  </span><br><span class="line">场景：</span><br><span class="line">项目复杂，交付周期短，功能迭代快的项目</span><br></pre></td></tr></table></figure></div><h5 id="精益模型"><a href="#精益模型" class="headerlink" title="精益模型"></a>精益模型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 精益原则：应该说是一种项目管理原则</span></span><br><span class="line">消除浪费,增强学习,下放权力，全局优化,延迟决策,内嵌质量,尽快发布</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消除浪费：</span><br><span class="line">主要包括：不必要的特性/需求/返工/延迟。需求不明，沟通低效</span><br><span class="line"></span><br><span class="line">消除浪费和减少变异的目的， 消除是一个浪费平衡到一个合理的能承受的程度，因为浪费是不可避免的</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 团队解决措施</span></span><br><span class="line">增强学习：</span><br><span class="line">员工培训  反思会  轮岗方式 获得多种技能</span><br><span class="line">下放权力：</span><br><span class="line">让员工知道的所有相关工作的全貌，团队领导者对团队应有的支持和帮助</span><br><span class="line">全局优化：</span><br><span class="line">团队成员之间加强沟通，促使团队从不同面向取探讨整体产生最好的产品和服务</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目措施</span></span><br><span class="line">延迟决策：</span><br><span class="line">系统越复杂，延迟决策越重要</span><br><span class="line">内嵌质量：</span><br><span class="line">质量的管理在精益软件开发中尤为重要，质量应该贯穿整个开发过程中的每一个阶段</span><br><span class="line">尽快发布：</span><br><span class="line">功能迭代加快 适应市场变化</span><br></pre></td></tr></table></figure></div><p><strong>根据不同的业务场景/团队人员/需求的情况下，不同的模式各自有自己的优势</strong></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的 this</title>
      <link href="/2015/10/12/2015-10-12-JavaScript-this/"/>
      <url>/2015/10/12/2015-10-12-JavaScript-this/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a> 笔记。</p><h2 id="全局的-this"><a href="#全局的-this" class="headerlink" title="全局的 this"></a>全局的 this</h2><p>全局 this 一般指向全局对象，浏览器中的全局对象就是 <code>window</code>。</p><p>例如：</p><pre><code>console.log(this.document === document); //trueconsole.log(this === window); //truethis.a = 91;console.log(window.a); //91</code></pre><hr><h2 id="一般函数的-this"><a href="#一般函数的-this" class="headerlink" title="一般函数的 this"></a>一般函数的 this</h2><pre><code>function f1 () {    return this;}console.log(f1() === window);//true, global object</code></pre><p>可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object</p><pre><code>function f2 () {    &quot;use strict&quot;;//使用严格模式    return this;}console.log(f1() === undefined);//true</code></pre><p>严格模式中，函数的 this 为 undefined</p><hr><h2 id="作为对象方法的函数的-this"><a href="#作为对象方法的函数的-this" class="headerlink" title="作为对象方法的函数的 this"></a>作为对象方法的函数的 this</h2><pre><code>var o = {    prop: 37,    f: function() {        return this.prop;    }};console.log(o.f()); // 37</code></pre><p>上述代码通过字面量创建对象 o。</p><p>f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。</p><pre><code>var o = {    prop: 37};function independent() {    return this.prop;}o.f = independent;console.log(o.f()); // 37</code></pre><p>上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 <code>o.f = independent</code> 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。</p><hr><h2 id="对象原型链上的-this"><a href="#对象原型链上的-this" class="headerlink" title="对象原型链上的 this"></a>对象原型链上的 this</h2><pre><code>var o = {    f: function() {        return this.a + this.b;    }};var p = Object.create(o);p.a = 1;p.b = 2;console.log(p.f()); //3</code></pre><p>通过 <code>var p = Object.create(o)</code> 创建的对象，p 是基于原型 o 创建出的对象。</p><p>p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。</p><hr><h2 id="get-set-方法与-this"><a href="#get-set-方法与-this" class="headerlink" title="get/set 方法与 this"></a>get/set 方法与 this</h2><pre><code>function modulus() {    return Math.sqrt(this.re * this.re + this.im * this.im);}var o = {    re: 1,    im: -1,    get phase() {        return Math.atan2(this.im, this.re);    }};Object.defineProperty(o, &apos;modulus&apos;, {    get: modulus,    enumerable: true,    configurable: true});console.log(o.phase, o.modulus); // -0.78 1.4142</code></pre><p>get/set 方法中的 this 也会指向 get/set 方法所在的对象的。</p><hr><h2 id="构造器中的-this"><a href="#构造器中的-this" class="headerlink" title="构造器中的 this"></a>构造器中的 this</h2><pre><code>function MyClass() {    this.a = 25;}var o = new MyClass();console.log(o.a); //25</code></pre><p>new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。</p><pre><code>function C2() {    this.a = 26;    return {        a: 24    };}o = new C2();console.log(o.a); //24</code></pre><p>因为返回了对象，将这个对象作为返回值</p><hr><h2 id="call-apply-方法与-this"><a href="#call-apply-方法与-this" class="headerlink" title="call/apply 方法与 this"></a>call/apply 方法与 this</h2><pre><code>function add(c, d) {    return this.a + this.b + c + d;}var o = {    a: 1,    b: 3};add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34function bar() {    console.log(Object.prototype.toString.call(this));}bar.call(7); // &quot;[object Number]&quot;</code></pre><hr><h2 id="bind-方法与-this"><a href="#bind-方法与-this" class="headerlink" title="bind 方法与 this"></a>bind 方法与 this</h2><pre><code>function f() {    return this.a;}var g = f.bind({    a: &quot;test&quot;});console.log(g()); // testvar o = {    a: 37,    f: f,    g: g};console.log(o.f(), o.g()); // 37, test</code></pre><p>绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weinre --WebApp 调试工具</title>
      <link href="/2015/06/18/2015-06-18-weinre/"/>
      <url>/2015/06/18/2015-06-18-weinre/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-weinre？"><a href="#什么是-weinre？" class="headerlink" title="什么是 weinre？"></a>什么是 weinre？</h3><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">weinre官网</a> 上有两句有意思的介绍：</p><blockquote><p><strong>weinre</strong> is <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really.</p><p><strong>weinre</strong> is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p></blockquote><p>上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。</p><p>远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 <code>F12</code> 出现的那个工具。但是在手机上，你没办法按 <code>F12</code>，而这个 weinre 就是在手机上的 <code>F12</code>，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。</p><hr><h3 id="为什么用-weinre？"><a href="#为什么用-weinre？" class="headerlink" title="为什么用 weinre？"></a>为什么用 weinre？</h3><p>现代浏览器中调试工具都非常强大了，可以直接模拟手机设备，为什么还要用 weinre 这么麻烦的东西呢？</p><p>我觉得 PC 端的浏览器虽说可以模拟，但模拟毕竟还是模拟，还只是鼠标长按滑来滑去。在开发过程中，使用手机或平板直接来感受是多么的酷，指尖在移动设备的屏幕上摩擦摩擦！给人的直观感受绝对秒杀浏览器的模拟。</p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用一种工具之前，了解它的原理和结构是很有帮助的。weinre 作为一种远程调试工具，在结构上分为三层：</p><ul><li>目标页面（target）：被调试的页面，页面已嵌入 weinre 的远程 js，下文会介绍；</li><li>Debug客户端（client）：本地的 Web Inspector 调试客户端；</li><li>Debug服务端（agent）：一个 HTTP Server，为目标页面与 Debug 客户端建立通信。</li></ul><p>三层结构如下图所示：</p><p><a href="http://muellerware.org/papers/weinre/images/http-flow.png" data-fancybox="group" data-caption="http-flow" class="fancybox"><img alt="http-flow" title="http-flow" data-src="http://muellerware.org/papers/weinre/images/http-flow.png" src="/img/loading.gif" class="lazyload"></a></p><p>weinre 的 debug 客户端是基于 Web Inspector 开发，而 Web Inspector 只与以 WebKit 为核心的浏览器兼容，所以 Weinre 的客户端只能用 Chrome 或者 Safari 打开。</p><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">官网</a>上也有相应的平台支持说明：</p><ul><li><p>Platforms supported - debug server 服务端</p><p>  任何支持 node.js 的平台。</p></li><li><p>Platforms supported - debug client 客户端（跑 debugger 界面的浏览器）</p><ul><li>Google Chrome</li><li>Apple Safari</li><li>Other recent-ish WebKit-based browsers 其他基于 webkit 内核的现代浏览器</li></ul></li><li><p>Platforms supported - debug target 目标页面（在移动设备中调试运行的目标页面）</p><ul><li>Android Browser application</li><li>iOS Mobile Safari application</li><li>PhoneGap/Cordova</li><li>other</li></ul></li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>weinre 是 nodeJS 的一个应用，首先要 <a href="https://nodejs.org/" target="_blank" rel="noopener">安装 nodeJS 运行环境</a></p></li><li><p>使用 npm 命令，安装 weinre</p><pre><code>npm -g install weinre</code></pre><p> 安装成功后会有类似的信息：</p><pre><code>C:\Users\haoyang\AppData\Roaming\npm\weinre -&gt; C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\weinreweinre@2.0.0-pre-I0Z7U9OV C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre├── underscore@1.7.0├── nopt@3.0.2 (abbrev@1.0.7)└── express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)</code></pre></li></ol><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>启动服务</p><pre><code>weinre --boundHost -all- --httpPort 8081</code></pre><ul><li><p>–boundHost [hostname | ip address | -all-]</p><p>  The ip address to bind the server to.</p></li><li><p>–httpPort [portNumber]</p><p>  The port to run the HTTP server on.</p><p>更多配置项参考 <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Running.html" target="_blank" rel="noopener">官网的说明</a>。</p></li></ul></li><li><p>启动成功后看到如下界面：</p><p> <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-weinre.png" data-fancybox="group" data-caption="weinre" class="fancybox"><img alt="weinre" title="weinre" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-weinre.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p>给目标页面添加一行脚本</p><p> 可以看到 2.中的 Target Script 说要添加一行脚本到要调试的 web 页面中。</p><p> Target Script</p><p> You can use this script to inject the weinre target code into your web page.</p><p> <a href="http://localhost:8081/target/target-script-min.js#anonymous" target="_blank" rel="noopener">http://localhost:8081/target/target-script-min.js#anonymous</a></p><p> Example:</p><pre><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre><p> 这里要说明一下，要把上面的 localhost 换为本机的 ip 地址。</p><p> 我们可以在命令行中 使用 <code>ipconfig</code> 得到 ip 地址，如下（当然你的可能和我的不一样）：</p><pre><code>IPv4 地址 . . . . . . . . . . . . : 192.168.1.107</code></pre><p> 即插入如下代码：</p><pre><code>&lt;script src=&quot;http://192.168.1.107:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre></li><li><p>进入调试页面</p><p> PC 端访问这个地址：</p><p> debug client user interface:    <a href="http://localhost:8081/client/#anonymous" target="_blank" rel="noopener">http://localhost:8081/client/#anonymous</a></p><p> 此时 target 为 none，如下图：</p><p> <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target-none.png" data-fancybox="group" data-caption="target-none" class="fancybox"><img alt="target-none" title="target-none" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target-none.png" src="/img/loading.gif" class="lazyload"></a></p><p> 现在我们要用手机访问同一个局域网下的这个目标页面。我们可以把要调试的页面放到这个路径下：</p><pre><code>C:\Users\zag\AppData\Roaming\npm\node_modules\weinre\web</code></pre><p> 通过 <a href="http://192.168.1.107:8081/FILE_NAME" target="_blank" rel="noopener">http://192.168.1.107:8081/FILE_NAME</a> 在手机上访问，就可以看到了。当然前提是同一个局域网。</p><p> 但是这样可能不太灵活，每次都要把目标页面放到指定的目录下。所以我们可以另外开一个服务器。</p><p> 我使用了基于 node.js 的 http-server 工具。将要调试的页面发布。这样我就能通过 ip 地址加端口号在手机上访问到了。</p><p> 我在手机上访问 <a href="http://192.168.1.107:8080" target="_blank" rel="noopener">http://192.168.1.107:8080</a> 打开要调试的页面，此时 debug client user interface 中自动检测到 target。就可以进行调试了！</p><p> 如下图：</p><p> <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target.png" data-fancybox="group" data-caption="target" class="fancybox"><img alt="target" title="target" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target.png" src="/img/loading.gif" class="lazyload"></a></p><p> <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-1954958440_meitu_2.jpg" data-fancybox="group" data-caption="phone" class="fancybox"><img alt="phone" title="phone" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-1954958440_meitu_2.jpg" src="/img/loading.gif" class="lazyload"></a></p></li></ol><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/dojotoolkit/article/details/6280924" target="_blank" rel="noopener">Web移动应用调试工具——Weinre</a></li><li><a href="http://muellerware.org/papers/weinre/manual.html" target="_blank" rel="noopener">weinre - WEb INspector REmote</a></li><li><a href="http://blog.csdn.net/smy_yu/article/details/38922315" target="_blank" rel="noopener">webapp开发调试环境–weinre配置</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web App 相关技术</title>
      <link href="/2015/06/17/2015-06-17-web-app/"/>
      <url>/2015/06/17/2015-06-17-web-app/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>往前推2到3年，前端工程师还在忧心忡忡地想，移动互联网时代下，前端是不是没有生存空间了。但今天一看，在我们团队，前端工程师超过一半的工作都是在做移动端的Web或者APP的开发。移动Web或者APP在技术本质上是和做桌面端Web没有本质区别，但是移动端的坑那是非常的多，通过学习这部分内容，让你成为一名桌面移动通吃的前端开发工程师。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>参考： <a href="http://junmer.github.io/mobile-dev-get-started/" target="_blank" rel="noopener">移动 Web 开发入门</a></li></ul><p>上面这个 slide 资料讲的非常好，算是一个入门的介绍吧。带我们建立基本的移动 web 开发知识体系和常见问题的实践。包含以下几个方面：</p><ul><li><p>基本概念</p><ul><li><p>Native </p><p>  本地应用 使用 Java \ Objective-C \ Swift 开发</p></li><li><p>WebApp </p><p>  网页应用 html5 开发</p></li><li><p>Hybrid </p><p>  混合应用 ooxx(native, web)</p></li><li><p>对比</p></li></ul></li><li><p>视觉</p><ul><li>设备的像素</li><li>文字单位使用 rem</li><li>viewport 属性</li><li>横屏竖屏</li><li>Flex 伸缩布局</li><li>响应式设计</li><li>软键盘</li><li>隐藏地址栏</li><li>苹果设备添加到主屏图标</li></ul></li><li><p>交互</p><ul><li>Touch</li><li>click 延迟</li><li>Scroll</li><li>Gestures(hammer –A javascript library for multi-touch gestures)</li><li>手指友好设计</li><li>HTML5 APIS（图像，摇动，声音等）</li></ul></li><li><p>实践</p><ul><li>屏蔽点击元素时的阴影</li><li>图像（像素、矢量图标、base64 减少请求、lazyload）</li><li>CSS3（合理使用渐变/圆角/阴影、代替 js 动画、translate3d、解决动画闪烁）</li><li>localStorage</li><li>避免（iframe、fixed + input）</li><li>SPA 或 Multi page</li><li>can I use</li><li>压缩合并</li><li>@G/3G 下建立连接时间</li></ul></li><li><p>调试</p><ul><li><p>浏览器自己的调试工具，模拟手机设备</p></li><li><p>weinre</p><p>  关于 weinre 我写了一篇博客介绍它。<a href="http://zagcool.github.io/2015/06/18/weinre/" target="_blank" rel="noopener">Weinre –WebApp 调试工具</a></p></li></ul></li></ul><hr><h2 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h2><p>参考：</p><ul><li><a href="http://www.css88.com/archives/5480" target="_blank" rel="noopener">移动前端不得不了解的html5 head 头标签</a></li></ul><p>上面的链接详细的讲解了：</p><ul><li><p>DOCTYPE</p></li><li><p>charset</p></li><li><p>lang属性</p></li><li><p>优先使用 IE 最新版本和 Chrome</p></li><li><p>360 使用Google Chrome Frame</p></li><li><p>SEO 优化部分：页面标题<title>标签(head 头部必须)，页面关键词 keywords，页面描述内容 description，定义网页作者 author，网页搜索引擎索引方式</title></p></li><li><p>为移动设备添加 viewport</p><p>  <code>viewport</code> 可以让布局在移动浏览器上显示的更好。 通常会写</p><pre><code>&lt;meta name =&quot;viewport&quot; content =&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt; &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</code></pre><ul><li><p>content 参数：</p><ul><li>width viewport 宽度(数值/device-width)</li><li>height viewport 高度(数值/device-height)</li><li>initial-scale 初始缩放比例</li><li>maximum-scale 最大缩放比例</li><li>minimum-scale 最小缩放比例</li><li>user-scalable 是否允许用户缩放(yes/no)</li></ul></li></ul></li><li><p>ios 设备，iOS 图标，Android，Windows 8</p></li></ul><p><strong>总结：</strong></p><pre><code>&lt;!DOCTYPE html&gt; &lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;&lt;html lang=&quot;zh-cmn-Hans&quot;&gt; &lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;&lt;head&gt;    &lt;!-- 声明文档使用的字符编码 --&gt;    &lt;meta charset=&apos;utf-8&apos;&gt;    &lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;    &lt;!-- 页面描述 --&gt;    &lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;    &lt;!-- 页面关键词 --&gt;    &lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;    &lt;!-- 网页作者 --&gt;    &lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;    &lt;!-- 搜索引擎抓取 --&gt;    &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;    &lt;!-- 为移动设备添加 viewport --&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt;    &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;    &lt;!-- iOS 设备 begin --&gt;    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;    &lt;!-- 设置苹果工具栏颜色 --&gt;    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;    &lt;!-- 避免IE使用兼容模式 --&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;    &lt;!-- 微软的老式浏览器 --&gt;    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;    &lt;!-- uc强制竖屏 --&gt;    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;    &lt;!-- QQ强制竖屏 --&gt;    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;    &lt;!-- UC强制全屏 --&gt;    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;    &lt;!-- QQ强制全屏 --&gt;    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;    &lt;!-- UC应用模式 --&gt;    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;    &lt;!-- QQ应用模式 --&gt;    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;    &lt;!-- windows phone 点击无高光 --&gt;    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;    &lt;!-- iOS 图标 begin --&gt;    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;    &lt;!-- iOS 图标 end --&gt;    &lt;!-- iOS 启动画面 begin --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;    &lt;!-- iOS 启动画面 end --&gt;    &lt;!-- iOS 设备 end --&gt;    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;    &lt;!-- Windows 8 磁贴颜色 --&gt;    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;    &lt;!-- Windows 8 磁贴图标 --&gt;    &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot;/&gt;    &lt;!-- 添加 RSS 订阅 --&gt;    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot;/&gt;    &lt;!-- 添加 favicon icon --&gt;    &lt;title&gt;标题&lt;/title&gt;&lt;/head&gt;</code></pre><hr><h2 id="页面切换动画"><a href="#页面切换动画" class="headerlink" title="页面切换动画"></a>页面切换动画</h2><ul><li><a href="http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html" target="_blank" rel="noopener">移动端重构系列13——页面切换</a></li><li><a href="http://www.w3cplus.com/css3/css3-3d-transform.html" target="_blank" rel="noopener">CSS3 3D Transform</a></li></ul><p>关于 HammerJS 的一个中文文档</p><ul><li><a href="http://www.cnblogs.com/iamlilinfeng/p/4239957.html" target="_blank" rel="noopener">Hammer.js</a></li></ul><hr><h2 id="CSS-Processing"><a href="#CSS-Processing" class="headerlink" title="CSS Processing"></a>CSS Processing</h2><blockquote><p>CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。</p><p>这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。</p></blockquote><p>这里我尝试使用了 Sass，果然很好用。下面记录几个 sass 教程。</p><ul><li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">Sass入门-w3cplus</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南-阮一峰</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要有 ruby 环境。</p><p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 源，然后添加淘宝的源 <a href="https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入" target="_blank" rel="noopener">https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入</a> sass 安装命令 <code>gem install sass</code> 了。</p><pre><code>$ gem sources --remove https://rubygems.org/$ gem sources -a https://ruby.taobao.org/$ gem sources -l*** CURRENT SOURCES ***https://ruby.taobao.org# 请确保只有 ruby.taobao.org$ gem install sass</code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre><code>sass --watch style.scss:style.css --style expanded</code></pre><hr><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong><code>rem</code></strong></p><p>字体单位使用 rem，用户在手机上设置了字体大小时，不会打破布局，造成混乱。</p><ul><li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="noopener">CSS3的REM设置字体大小-w3cplus</a></li><li><a href="http://www.iyunlu.com/view/css-xhtml/76.html" target="_blank" rel="noopener">响应式十日谈第一日：使用 rem 设置文字大小-一丝</a></li></ul><hr><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><blockquote><p>安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>WEB基本攻击大致可以分为三大类：“资源枚举”、“参数操纵” 和 “其它攻击”</p><ul><li>资源枚举</li><li>参数操纵<ul><li>SQL注入</li><li>XPath注入</li><li>cgi命令执行</li><li>XXS（cross-site scripting跨域脚本攻击）其重点是“跨域”和“客户端执行”<ul><li>Reflected XSS ——基于反射的XSS攻击。主要依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击。</li><li>DOM-based or local XSS——基于DOM或本地的XSS攻击</li><li>Stored XSS——基于存储的XSS攻击</li></ul></li><li>会话劫持</li></ul></li><li>其它攻击<ul><li>CSRF（cross-site request forgery）跨站请求伪造</li><li>钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</li><li>拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</li></ul></li></ul><h3 id="关于-XSS"><a href="#关于-XSS" class="headerlink" title="关于 XSS"></a>关于 XSS</h3><blockquote><p><strong>跨网站脚本</strong>（Cross-site scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p>——维基百科</p></blockquote><h3 id="XSS-防护"><a href="#XSS-防护" class="headerlink" title="XSS 防护"></a>XSS 防护</h3><ol><li><p>浏览器解析顺序：</p><p> HTML Parser &gt;&gt; CSS Parser &gt;&gt; JavaScript Parser</p></li><li><p>浏览器解码顺序：</p><p> HTML Decoding &gt;&gt; URL Decoding &gt;&gt; JavaScript Decoding</p></li><li><p>具体的防护方式：</p><ul><li>验证输入并且基于语境和按照正确的顺序转义不可信数据<ul><li>HTML 中的字符串</li><li>HTML 属性中的字符串</li><li>事件句柄属性和 JavaScript 中的字符串</li><li>HTML 属性中的 URL 路径</li><li>HTML 风格属性和 CSS 中的字符串</li><li>JavaScript 中的 HTML</li></ul></li><li>始终遵循白名单优于黑名单的做法</li><li>使用 UTF-8 为默认的字符编码以及设置 content 为 text/html</li><li>不要将用户可以控制的文本放在<meta>标签前。通过使用不同的字符集注射可以导致 XSS。</li><li>使用 <!DOCTYPE html></li><li>使用推荐的 HTTP 响应头进行 XSS 防护</li><li>防止 CRLF 注入/HTTP 响应拆分</li><li>禁止 TRACE 和其他非必要方法</li></ul></li></ol><p>对于 innerHTML 的方式输出的，我们可以采用如下的方式转码</p><pre><code>/** * 转码 XSS 防护 * @param  {String} str 用户输入的字符串 * @return {String}     转码后的字符串 */function changeCode(str) {    str = str.replace(/&amp;/g, &quot;&amp;amp;&quot;)              .replace(/&lt;/g, &quot;&amp;lt;&quot;)              .replace(/&gt;/g, &quot;&amp;gt;&quot;)              .replace(/&quot;/g, &quot;&amp;quot;&quot;)              .replace(/&apos;/g, &quot;&amp;#x27;&quot;)              .replace(/\//g, &quot;&amp;#x2f;&quot;);    return str;}</code></pre><hr><p>参考：</p><ul><li><a href="http://www.cnblogs.com/vajoy/p/4176908.html" target="_blank" rel="noopener">浅谈WEB安全性（前端向）</a></li><li><a href="http://www.freebuf.com/articles/web/40520.html" target="_blank" rel="noopener">XSS的原理分析与解剖</a></li><li><a href="http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/" target="_blank" rel="noopener">原创翻译：给开发者的终极XSS防护备忘录</a></li></ul><hr><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote><p>在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。</p><p>但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。</p><p>整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。</p></blockquote><p>这里就是网页的打开速度，如果你的网页打开速度很慢，那么一定会有用户的流失。所以性能优化很重要。</p><ul><li>网页内容<ul><li>减少http请求次数</li><li>减少DNS查询次数</li><li>避免页面跳转</li><li>缓存Ajax</li><li>延迟加载</li><li>提前加载</li><li>减少DOM元素数量</li><li>根据域名划分内容</li><li>减少iframe数量</li><li>避免404</li></ul></li><li>服务器<ul><li>使用CDN</li><li>添加Expires 或Cache-Control报文头</li><li>Gzip压缩传输文件</li><li>配置ETags</li><li>尽早flush输出</li><li>使用GET Ajax请求</li><li>避免空的图片src</li></ul></li><li>Cookie<ul><li>减少Cookie大小</li><li>页面内容使用无cookie域名</li></ul></li><li>CSS<ul><li>将样式表置顶</li><li>避免CSS表达式</li><li>用&lt;link&gt;代替@import</li><li>避免使用Filters</li></ul></li><li>Javascript<ul><li>将脚本置底</li><li>使用外部Javascirpt和CSS文件</li><li>精简Javascript和CSS</li><li>去除重复脚本</li><li>减少DOM访问</li><li>使用智能事件处理</li></ul></li><li>图片<ul><li>优化图像</li><li>优化CSS Sprite</li><li>不要在HTML中缩放图片</li><li>使用小且可缓存的favicon.ico</li></ul></li><li>移动客户端<ul><li>保持单个内容小于25KB</li><li>打包组建成符合文档</li></ul></li></ul><p>具体细节参考文章：</p><ul><li><a href="http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html" target="_blank" rel="noopener">毫秒必争，前端网页性能最佳实践</a></li></ul><p>我在 ToDo 这个任务中主要使用了 CDN 来加载静态资源。比如我使用了 <a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源公共库</a>。引用了里面的 fontawesome，速度果然比在 GitHub 仓库里快很多。下一步是压缩我自己写的静态资源。</p><p>其他参考资料：</p><ul><li><a href="http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers#section:maximising-parallelisation" target="_blank" rel="noopener">给网页设计师和前端开发者看的前端性能优化</a></li><li><a href="http://www.zhangxinxu.com/wordpress/?p=3152" target="_blank" rel="noopener">梳理：提高前端性能方面的处理以及不足</a></li><li><a href="http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html" target="_blank" rel="noopener">css sprite原理优缺点及使用</a></li><li><a href="http://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/" target="_blank" rel="noopener">CSS Sprites：鱼翅还是三鹿？</a></li><li><a href="http://www.cnblogs.com/leefreeman/p/3998757.html" target="_blank" rel="noopener">大型网站的灵魂——性能</a></li><li><a href="http://web.jobbole.com/35339/" target="_blank" rel="noopener">编写高效的 CSS 选择器</a></li></ul><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。</p></blockquote><p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p><p>根据AMD规范，我们可以使用 <code>define</code> 定义模块，使用 <code>require</code> 调用模块。</p><p>目前，通行的 js 模块规范主要有两种：<code>CommonJS</code> 和 <code>AMD</code>。</p><h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p>AMD 即 Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是 CommonJS</p><p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p><p>详细 API 如下：</p><ul><li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)" target="_blank" rel="noopener">AMD（中文版）</a></li></ul><hr><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。Node.JS 首先采用了 js 模块化的概念。</p><p>根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 global 对象的属性。</p><p>输出模块变量的最好方法是使用 module.exports 对象。 </p><hr><h3 id="为什么要用-requireJS"><a href="#为什么要用-requireJS" class="headerlink" title="为什么要用 requireJS"></a>为什么要用 requireJS</h3><p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p><p>RequireJS就是为了解决这两个问题而诞生的：</p><blockquote><p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p></blockquote><h4 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h4><ul><li><a href="http://requirejs.org/" target="_blank" rel="noopener">requireJS 官网</a></li><li><a href="http://www.requirejs.cn/" target="_blank" rel="noopener">requireJS 中文网</a></li></ul><hr><h3 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h3><p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p><blockquote><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p></blockquote><ul><li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD 模块定义规范</a></li></ul><p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p><blockquote><p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）</p></blockquote><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程（一）：模块的写法–阮一峰</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="noopener">Javascript模块化编程（二）：AMD规范</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="noopener">Javascript模块化编程（三）：require.js的用法</a></li><li><a href="http://segmentfault.com/a/1190000000733959" target="_blank" rel="noopener">详解 JavaScript 模块开发</a></li><li><a href="http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html?utm_source=tuicool" target="_blank" rel="noopener">浅谈模块化的JavaScript</a></li><li><a href="http://div.io/topic/430" target="_blank" rel="noopener">再谈 SeaJS 与 RequireJS 的差异</a></li><li>玩转AMD系列 by erik@EFE<ul><li><a href="http://efe.baidu.com/blog/dissecting-amd-preface/" target="_blank" rel="noopener">玩转AMD - 写在前面</a></li><li><a href="http://efe.baidu.com/blog/dissecting-amd-what/" target="_blank" rel="noopener">玩转AMD - 设计思路</a></li><li><a href="http://efe.baidu.com/blog/dissecting-amd-how/" target="_blank" rel="noopener">玩转AMD - 应用实践</a></li><li><a href="http://efe.baidu.com/blog/dissecting-amd-loader/" target="_blank" rel="noopener">玩转AMD - Loader</a>   </li></ul></li></ul><hr><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><blockquote><p>业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。</p><p>在EFE日常工作中，我们是基于EDP，完成项目开发过程中的项目构建、包管理、调试、单测、静态检测、打包、压缩、优化、项目部署等一系列所有工作。</p></blockquote><p>注：</p><p>如果网络不好，可以使用 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>。</p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://div.io/topic/439" target="_blank" rel="noopener">前端工程与模块化框架</a></li><li><a href="http://mweb.baidu.com/p/baidusearch-front-end-road.html" target="_blank" rel="noopener">手机百度前端工程化之路</a></li><li><a href="http://www.infoq.com/cn/articles/yunlong-on-fis" target="_blank" rel="noopener">对话百度前端工程师张云龙：F.I.S与前端工业化</a></li><li><a href="https://github.com/ecomfe/edp" target="_blank" rel="noopener">EDP</a></li><li><a href="http://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html" target="_blank" rel="noopener">Grunt教程——初涉Grunt</a></li><li><a href="http://www.open-open.com/lib/view/open1417068223049.html" target="_blank" rel="noopener">gulp入门指南</a></li><li><a href="http://www.w3ctech.com/topic/134" target="_blank" rel="noopener">Gulp开发教程（翻译）</a></li><li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp 中文网</a></li><li><a href="https://github.com/ericdum/mujiang.info/issues/6" target="_blank" rel="noopener">npm的package.json中文文档</a></li></ul><hr><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><ul><li><p><strong>数据存储</strong></p><p>  以 JSON 模拟数据表的形式存储于 LocalStorage 中</p><pre><code>使用数据库的思想，构建3张表。cateJson 分类childCateJson 子分类taskJson 任务分类表 cate----------------------id* | name | child(FK)----------------------子分类表 childCate--------------------------------id* | pid(FK) | name | child(FK)--------------------------------任务表 task----------------------------------------------id* | pid(FK) | finish | name | date | content----------------------------------------------</code></pre></li><li><p><strong>使用 <code>Sass</code> 重构了 CSS 代码</strong></p><p>  使用分块、继承等方式，使得代码更加清晰明了。</p></li><li><p><strong>响应式布局</strong></p><p>  针对手机端细节做了很多调整，更符合手机上的视觉交互习惯。</p></li><li><p><strong>加入页面切换效果</strong></p><p>  使用 <code>translate3d()</code>，纯 CSS3 切换动画效果。</p></li><li><p><strong>处理了 XSS 防护</strong></p><p>  对可能造成破坏的字符进行转码。</p></li><li><p><strong>性能优化</strong></p><p>  使用 CDN 处理静态资源 fontAwesome，压缩静态资源等</p></li><li><p><strong>模块化</strong></p><p>  使用 requireJS 模块化 JavaScript 代码。重构 JavaScript 代码。优化之前写的耦合性高的绑定事件，重新绑定事件，降低耦合性。期间根据具体需求重写了事件代理的代码。</p></li><li><p><strong>前端工程化</strong></p><p>  使用 gulp，自动编译 Sass，压缩 CSS 和 JavaScript 代码。并且配置了自动流程。</p></li></ul><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="webkit-tap-highlight-color-属性"><a href="#webkit-tap-highlight-color-属性" class="headerlink" title="-webkit-tap-highlight-color 属性"></a><code>-webkit-tap-highlight-color</code> 属性</h3><p>感谢 <a href="https://github.com/fiona23" target="_blank" rel="noopener">fiona</a> 指出。</p><p>safari移动端点击的时候会闪一下加上 <code>-webkit-tap-highlight-color: transparent;</code> 就不会闪了。</p><p>参考：</p><ul><li><a href="http://www.css88.com/webkit/-webkit-tap-highlight-color/" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code>  css88</a></li><li><a href="http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code> 属性</a></li></ul><hr><h3 id="textarea-标签-disabled-颜色"><a href="#textarea-标签-disabled-颜色" class="headerlink" title="textarea 标签 disabled 颜色"></a>textarea 标签 disabled 颜色</h3><ul><li><p>为什么用 disabled 属性？</p><p>  因为我发现仅仅使用 readonly 属性，在 IE 下是显示光标的。于是使用 disabled。</p></li><li><p>出现的问题</p><p>  各家浏览器对于 disabled 属性有自己的样式设定，比如 IE 下是灰色的。苹果设备下也是。改变这些样式的方法也不是统一的。如果要兼容 Safari 必须加上 </p>  <pre><code class="css">background: #fff;-webkit-text-fill-color: rgba(0, 0, 0, 1); -webkit-opacity: 1;</code></pre> <p>  于是最终代码如下：</p><pre><code>textarea:disabled {    color:#000;    background: #fff;    -webkit-text-fill-color: rgba(0, 0, 0, 1);     -webkit-opacity: 1; }</code></pre></li><li><p>参考：<a href="http://stackoverflow.com/a/4648315" target="_blank" rel="noopener">Disabled input text color 中的评论</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 面向对象</title>
      <link href="/2015/06/15/2015-10-15-JavaScript-Object-Oriented/"/>
      <url>/2015/06/15/2015-10-15-JavaScript-Object-Oriented/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a> 笔记。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。</p><p>——维基百科</p></blockquote><p>一般面向对象包含：继承，封装，多态，抽象</p><hr><h2 id="基于原型的继承"><a href="#基于原型的继承" class="headerlink" title="基于原型的继承"></a>基于原型的继承</h2><pre><code>function Foo() {    this.y = 2;}console.log(typeof Foo.prototype); //objectFoo.prototype.x = 1;var obj3 = new Foo();console.log(obj3.y); //2console.log(obj3.x); //1</code></pre><p>创建函数 <code>Foo</code> 的时候，就会有一个内置的 <code>Foo.prototype</code> 属性，并且这个属性是对象。</p><p>在使用 <code>new Foo();</code> 创建对象实例时。<code>this</code> 会指向一个对象，并且这个对象的原型会指向 <code>Foo.prototype</code> 属性。<code>this.y = 2</code> 给这个对象赋值，并把这个对象返回。把这个对象赋值给 <code>obj3</code>。</p><p><code>y</code> 是 <code>obj3</code> 上的，<code>x</code> 是 <code>obj3</code> 的原型 <code>Foo.prototype</code> 上的。</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-prototype.png" data-fancybox="group" data-caption="prototype" class="fancybox"><img alt="prototype" title="prototype" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-prototype.png" src="/img/loading.gif" class="lazyload"></a></p><hr><h3 id="prototype-属性与原型"><a href="#prototype-属性与原型" class="headerlink" title="prototype 属性与原型"></a>prototype 属性与原型</h3><p>prototype 是函数对象上预设的对象属性。</p><p>原型是对象上的原型，通常是构造器的 prototype 属性。</p><hr><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><pre><code>function Person(name, age) {    this.name = name;    this.age = age;}Person.prototype.LEGS_NUM = 2;Person.prototype.ARMS_NUM = 2;Person.prototype.hi = function() {    console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now&apos;);};Person.prototype.walking = function() {    console.log(this.name + &apos; is walking...&apos;);};function Student(name, age, className) {    Person.call(this, name, age); //使 Person 中的 this 指向 Student    this.className = className;}Student.prototype = Object.create(Person.prototype);Student.prototype.constructor = Student;Student.prototype.hi = function() {    console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now, and from &apos; + this.className + &quot;.&quot;);};Student.prototype.learn = function(subject) {    console.log(this.name + &apos; is learning &apos; + subject + &apos; at &apos; + this.className + &apos;.&apos;);}//testvar gao = new Student(&apos;Gao&apos;, &apos;24&apos;, &apos;Class 3123&apos;);console.log(gao); // 这个对象的具体内容见下图gao.hi(); //Hi, my name is Gao. I&apos;m 24 years old now, and from Class 3123.gao.LEGS_NUM; //2gao.walking(); //Gao is walking...gao.learn(&apos;JavaScript&apos;); //Gao is learning JavaScript at Class 3123.</code></pre><ul><li><code>Object.create(arg)</code> 创建一个空对象，并且这个对象的原型指向参数 <code>arg</code>。</li><li><code>Student.prototype.constructor = Student</code> 为了保证一致性，否则 constructor 指向 Person。</li></ul><hr><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>gao 对象的原型链：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-oop-gao.png" data-fancybox="group" data-caption="Object" class="fancybox"><img alt="Object" title="Object" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-oop-gao.png" src="/img/loading.gif" class="lazyload"></a></p><p>下面通过图形展示原型链：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-%E5%8E%9F%E5%9E%8B%E9%93%BE.png" data-fancybox="group" data-caption="原型链" class="fancybox"><img alt="原型链" title="原型链" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-%E5%8E%9F%E5%9E%8B%E9%93%BE.png" src="/img/loading.gif" class="lazyload"></a></p><hr><h4 id="Object-create-null-amp-bind-null"><a href="#Object-create-null-amp-bind-null" class="headerlink" title="Object.create(null) &amp; .bind(null)"></a><code>Object.create(null)</code> &amp; <code>.bind(null)</code></h4><p>这两种算是特例。</p><p><code>Object.create(null)</code> 和 <code>.bind(null)</code> 这两种方式创建出来的对象是没有 <code>prototype</code> 属性的，为 <code>undefined</code>。</p><hr><h2 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h2><h3 id="改变-prototype"><a href="#改变-prototype" class="headerlink" title="改变 prototype"></a>改变 prototype</h3><p>JavaScript 中的 prototype 是对象，在运行的时候可以修改。</p><p>给 prototype 添加或删除一些属性，是会影响到已经创建好的实例对象的。</p><p>但是，直接修改 prototype 属性，是不会影响到已经创建好的实例对象的。但是会影响到新的实例对象。如下代码：</p><pre><code>// 上接上面的代码// 给 prototype 添加或删除一些属性Student.prototype.x = 101;console.log(gao.x); //101// 直接修改 prototype 属性Student.prototype = {    y: 2};// 不会影响到已创建好的实例对象console.log(gao.x); //101console.log(gao.y); //undefined// 会影响到新创建的实例对象var ying = new Student(&apos;Ying&apos;, 24, &apos;UI&apos;);console.log(ying.x); //undefinedconsole.log(ying.y); //2</code></pre><hr><h3 id="内置构造器的-prototype-属性"><a href="#内置构造器的-prototype-属性" class="headerlink" title="内置构造器的 prototype 属性"></a>内置构造器的 <code>prototype</code> 属性</h3><p>修改内置构造器的 <code>prototype</code> 属性后，在实例化这个对象后，枚举其属性时，会把修改的内置构造器的 <code>prototype</code> 属性也枚举出来，有时候这是要避免的。可用 <code>defineProperty</code> 方法解决。如下代码：</p><pre><code>Object.prototype.x = 1;var obj = {};console.log(obj.x); //1console.log(obj);for (var k in obj) {    console.log(&apos;result---&gt;&apos; + k);}// result---&gt;x</code></pre><p>使用 <code>defineProperty</code> 后：</p><pre><code>Object.defineProperty(Object.prototype, &apos;x&apos;, {    writable: true,    value: 1});var obj = {};console.log(obj.x);//1console.log(obj);for (var k in obj) {    console.log(&apos;result---&gt;&apos; + k);}// nothing output here</code></pre><p>其实也可以这样枚举，使用 <code>hasOwnProperty</code> 方法：</p><pre><code>for (var key in obj) {    if (obj.hasOwnProperty(key)) {        console.log(&quot;result---&gt;&quot; + key);    }}</code></pre><hr><h3 id="创建对象-new-原型链"><a href="#创建对象-new-原型链" class="headerlink" title="创建对象-new/原型链"></a>创建对象-new/原型链</h3><p>![prototype](<a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-new" target="_blank" rel="noopener">http://7q5cdt.com1.z0.glb.clouddn.com/blog-new</a> prototype.png)</p><hr><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><pre><code>console.log([1, 2] instanceof Array); //trueconsole.log([1, 2] instanceof Object); //trueconsole.log(new Object() instanceof Array); //false</code></pre><p>左边要求是对象，右边要求是构造器或函数。它会判断：<strong>右边的构造器中的 <code>prototype</code> 属性是否出现在左边的对象的原型链上。</strong></p><ul><li><strong>注意：</strong>不同的 window 或 iframe 间的对象类型检测<strong>不能</strong>使用 <code>instanceof</code>！</li></ul><hr><h2 id="实现继承的方式"><a href="#实现继承的方式" class="headerlink" title="实现继承的方式"></a>实现继承的方式</h2><pre><code>function Person() {}function Student() {}Student.prototype = Person.prototype; //1Student.prototype = new Person(); //2Student.prototype = Object.create(Person.prototype); //3Student.prototype.constructor = Student;</code></pre><p>注释中：</p><p>1 是错误的。如果改变了 Student 就会改变 Person</p><p>2 可以实现继承，但是其调用了构造函数，若父类构造函数中有形参，那么传值就会比较奇怪。</p><p>3 是最好的方法。创建了一个空对象，并且对象的原型指向参数 Person.prototype。这样便实现了继承。同时原型链写，不向上查找。但是 <code>Object.create</code> 是ES5 中的方法，所以可以使用下列代码做兼容：</p><pre><code>if (!Object.create) {    Object.create = function(proto) {        function F() {}        F.prototype = proto;        return new F;    };}</code></pre><hr><h2 id="模拟重载"><a href="#模拟重载" class="headerlink" title="模拟重载"></a>模拟重载</h2><pre><code>function Person() {    var args = arguments;    if (typeof args[0] === &apos;object&apos; &amp;&amp; args[0]) {        if (args[0].name) {            this.name = args[0].name;        }        if(args[0].age){            this.age = args[0].age;        }    } else {        if (args[0]) {            this.name = args[0];        }        if (args[1]) {            this.age = args[1];        }    }}//重写 toString 方法Person.prototype.toString = function() {    console.log(&apos;name=&apos;+this.name+&apos;, age=&apos;+this.age);};var gao = new Person({name:&apos;Gao&apos;,age:24});gao.toString(); // name=Gao, age=24var ying = new Person(&apos;Ying&apos;,25);ying.toString(); // name=Ying, age=25</code></pre><p>对参数进行判断，模拟实现重载。</p><hr><h2 id="调用子类方法"><a href="#调用子类方法" class="headerlink" title="调用子类方法"></a>调用子类方法</h2><pre><code>function Person(name) {    this.name = name;}function Student(name, className) {    this.className = className;    Person.call(this, name); // 调用基类的构造器}var gao = new Student(&apos;Gao&apos;, &apos;3123&apos;);console.log(gao); // Student {className: &quot;3123&quot;, name: &quot;Gao&quot;}Person.prototype.init = function() {};Student.prototype.init = function() {    // do sth...    Person.prototype.init.apply(this, arguments); // 同时也想调用父类被覆盖的方法};</code></pre><p>主要是两种：调用父类的构造器，调用原型链上父类被覆盖的方法。</p><hr><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><pre><code>function ClassManager() {}ClassManager.prototype.addClass = function(str) {    console.log(&apos;Class: &apos; + str + &apos; added&apos;);    return this;};var manager = new ClassManager();manager.addClass(&apos;classA&apos;).addClass(&apos;classB&apos;).addClass(&apos;classC&apos;);// Class: classA added// Class: classB added// Class: classC added</code></pre><p>重点在于 return this。返回这个 ClassManager 的实例。这样这个实例又可以继续调用方法。</p><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在构造器中 <code>throw new Error(&#39;&#39;);</code> 抛异常。这样防止这个类被直接调用。</p><pre><code>function DetectorBase() {    throw new Error(&apos;Abstract class can not be invoked directly!&apos;);}DetectorBase.detect = function() {    console.log(&apos;Detection starting...&apos;);}DetectorBase.stop = function() {    console.log(&apos;Detection stopped.&apos;);};DetectorBase.init = function() {    throw new Error(&apos;Error&apos;);}var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!function LinkDetector() {}LinkDetector.prototype = Object.create(DetectorBase.prototype);LinkDetector.prototype.constructor = LinkDetector;var l = new LinkDetector();console.log(l); //LinkDetector {}__proto__: LinkDetectorl.detect(); //Uncaught TypeError: l.detect is not a functionl.init(); //Uncaught TypeError: l.init is not a function</code></pre><p><code>var d = new DetectorBase();</code> 是不能实例化的，会报错</p><p><code>l.detect();</code> 但是这个为什么报错我就不知道了。</p><p>已经在原课程下提问了，期待老师的讲解。 <a href="http://www.imooc.com/qadetail/82732" target="_blank" rel="noopener">抽象类中子类为什么不能调用父类的非抽象方法？</a></p><p>问题已经解决了，应该是老师当时的课件写错了，应该再基类中将这两个方法写在其原型 prototype 上。如下：</p><pre><code>function DetectorBase() {    throw new Error(&apos;Abstract class can not be invoked directly!&apos;);}DetectorBase.prototype.detect = function() {    console.log(&apos;Detection starting...&apos;);};DetectorBase.prototype.stop = function() {    console.log(&apos;Detection stopped.&apos;);};DetectorBase.prototype.init = function() {    throw new Error(&apos;Error&apos;);};// var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!function LinkDetector() {}LinkDetector.prototype = Object.create(DetectorBase.prototype);LinkDetector.prototype.constructor = LinkDetector;var l = new LinkDetector();console.log(l); //LinkDetector {}__proto__: LinkDetectorl.detect(); //Detection starting...l.init(); //Uncaught Error: Error</code></pre><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><pre><code>var moduleA;moduleA = function() {    var prop = 1;    function func() {}    return {        func: func,        prop: prop    };}(); // 立即执行匿名函数</code></pre><p>prop，func 不会被泄露到全局作用域。</p><p>或者另一种写法，使用 new</p><pre><code>moduleA = new function() {    var prop = 1;    function func() {}    this.func = func;    this.prop = prop;}</code></pre><p>更复杂的可以使用 Sea.js Kissy Require.js 模块化工具。</p><hr><p>最后补充一点设计模式相关的资料，我还没有来得及看的：</p><ul><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="noopener">学用 JavaScript 设计模式</a></li><li><a href="http://blog.jobbole.com/29454/" target="_blank" rel="noopener">常用的Javascript设计模式</a></li><li><a href="http://developer.51cto.com/art/201109/288650_all.htm" target="_blank" rel="noopener">JavaScript设计模式深入分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 作用域和作用域链</title>
      <link href="/2015/05/20/2015-05-20-scope/"/>
      <url>/2015/05/20/2015-05-20-scope/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h2><p>作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><hr><h3 id="全局作用域-Global-Scope"><a href="#全局作用域-Global-Scope" class="headerlink" title="全局作用域(Global Scope)"></a>全局作用域(Global Scope)</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。</p><ol><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li><li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li><li>所有window对象的属性拥有全局作用域<br> window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等。</li></ol><h3 id="局部作用域-Local-Scope"><a href="#局部作用域-Local-Scope" class="headerlink" title="局部作用域(Local Scope)"></a>局部作用域(Local Scope)</h3><p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域<br>。</p><hr><h2 id="作用域链-Scope-Chain"><a href="#作用域链-Scope-Chain" class="headerlink" title="作用域链(Scope Chain)"></a>作用域链(Scope Chain)</h2><p>在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><ol><li>在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</li><li>函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。</li><li>这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。</li><li>当运行期上下文被销毁，活动对象也随之销毁。</li></ol><p>在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.laruence.com/2009/05/28/863.html" target="_blank" rel="noopener">鸟哥：Javascript作用域原理</a></li><li><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="noopener">理解 JavaScript 作用域和作用域链</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端的一些资料和工具</title>
      <link href="/2015/05/18/2015-05-18-front-end-tools/"/>
      <url>/2015/05/18/2015-05-18-front-end-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。</p><hr><h2 id="色彩与图标"><a href="#色彩与图标" class="headerlink" title="色彩与图标"></a>色彩与图标</h2><h3 id="CSS滤镜"><a href="#CSS滤镜" class="headerlink" title="CSS滤镜"></a>CSS滤镜</h3><ul><li><a href="http://www.cssreflex.com/css-generators/filter" target="_blank" rel="noopener">Filter Effects</a></li></ul><p>界面：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-filter.png" data-fancybox="group" data-caption="Filter Effects" class="fancybox"><img alt="Filter Effects" title="Filter Effects" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-filter.png" src="/img/loading.gif" class="lazyload"></a></p><p>有各种各样的滤镜效果，可以直接调节参数观察变化。</p><p>值得一提的是，这个网站还有很多其他 css 生成器。</p><p>比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform</p><ul><li>可以访问这里去使用这些 css 生成器：<a href="http://www.cssreflex.com/css-generators/" target="_blank" rel="noopener">CSS Generators</a></li></ul><hr><h3 id="渐变CSS代码生成器"><a href="#渐变CSS代码生成器" class="headerlink" title="渐变CSS代码生成器"></a>渐变CSS代码生成器</h3><ul><li><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">Ultimate CSS Gradient Generator</a></li></ul><p>界面如下图：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-color-gradient.png" data-fancybox="group" data-caption="Ultimate CSS Gradient Generator" class="fancybox"><img alt="Ultimate CSS Gradient Generator" title="Ultimate CSS Gradient Generator" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-color-gradient.png" src="/img/loading.gif" class="lazyload"></a></p><p>目前 css 写渐变还很复杂，但是用了这个工具简直太方便了，直接生成 css 代码，还能兼容 ie。</p><hr><h3 id="QQ截图取色-16进制"><a href="#QQ截图取色-16进制" class="headerlink" title="QQ截图取色-16进制"></a>QQ截图取色-16进制</h3><p>在按下 <code>Ctrl+Shift+A</code> 后，再按一下 <code>Ctrl</code> 就可以看到截图框下面的颜色代码变成16进制的代码了。</p><p>如下图：</p><p>普通截图：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-RBGScreenColor.png" data-fancybox="group" data-caption="normal" class="fancybox"><img alt="normal" title="normal" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-RBGScreenColor.png" src="/img/loading.gif" class="lazyload"></a></p><p>按住 <code>Ctrl</code>：</p><p><a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-hexSreenColor.png" data-fancybox="group" data-caption="press ctrl" class="fancybox"><img alt="press ctrl" title="press ctrl" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-hexSreenColor.png" src="/img/loading.gif" class="lazyload"></a></p><p>可以看到第一幅图中的 51, 51, 51 变成了 #333333。</p><hr><h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><ul><li><p><a href="http://nipponcolors.com/" target="_blank" rel="noopener">nipponcolors</a></p><p>  日本的一个配色网站。罗列了很多不饱和经典的颜色，当然，自己选配还是很重要的。</p><p>  <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-chooseColor.png" data-fancybox="group" data-caption="nipponcolors" class="fancybox"><img alt="nipponcolors" title="nipponcolors" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-chooseColor.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p><a href="https://color.adobe.com/zh/explore/most-popular/?time=all" target="_blank" rel="noopener">Adobe Color CC</a></p><p>  Adobe 出的在线配色工具，里面有些现成的配色方案还是很不错的。</p><p>  <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-adobeColorCC.png" data-fancybox="group" data-caption="Adobe Color CC" class="fancybox"><img alt="Adobe Color CC" title="Adobe Color CC" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-adobeColorCC.png" src="/img/loading.gif" class="lazyload"></a></p></li><li><p><a href="http://paletton.com/" target="_blank" rel="noopener">paletton</a></p><p>  提供了各种预览模式，可以在模板网站中预览，在色块中预览。</p><p>  <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-paletton.png" data-fancybox="group" data-caption="paletton" class="fancybox"><img alt="paletton" title="paletton" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-paletton.png" src="/img/loading.gif" class="lazyload"></a></p></li></ul><hr><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><ul><li><p><a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a></p><p>  对中文的搜索支持很好。实际上它是先把中文翻译为英文再搜索的。</p><p>  <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-icon.png" data-fancybox="group" data-caption="easyicon" class="fancybox"><img alt="easyicon" title="easyicon" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-icon.png" src="/img/loading.gif" class="lazyload"></a></p></li></ul><hr><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><ul><li><p><a href="http://braincast.nl/samples/jsoneditor/" target="_blank" rel="noopener">json editor</a></p><p>  将json数据输入进去，会生成一个树形的结构，方便查看每个节点。</p><p>  <a href="http://7q5cdt.com1.z0.glb.clouddn.com/blog-json.png" data-fancybox="group" data-caption="jsoneditor" class="fancybox"><img alt="jsoneditor" title="jsoneditor" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-json.png" src="/img/loading.gif" class="lazyload"></a></p></li></ul><hr><p>本文不定期更新。</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2015/04/22/2015-04-22-baidu-javascript/"/>
      <url>/2015/04/22/2015-04-22-baidu-javascript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。</p><p><strong>任务：</strong> <a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002" target="_blank" rel="noopener">JavaScript基础</a>   </p><p>做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！</p><hr><p>像上一篇文章一样，写些东西记录一下。   </p><hr><h2 id="第一个页面交互"><a href="#第一个页面交互" class="headerlink" title="第一个页面交互"></a>第一个页面交互</h2><p>按照任务中的代码，在IE8下提示：<code>对象不支持“addEventListener”属性或方法</code><br>我猜是IE8浏览器没有这个方法吧。</p><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">JavaScript 指南-MDN</a></p><h3 id="了解JavaScript是什么"><a href="#了解JavaScript是什么" class="headerlink" title="了解JavaScript是什么"></a>了解JavaScript是什么</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F" target="_blank" rel="noopener">来自MDN的解释</a></p><blockquote><p>JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。</p><p>核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：</p><ul><li>客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。</li><li>服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。</li></ul><p>借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。</p><p>Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。</p></blockquote><hr><h3 id="如何在-HTML-页面加载-JavaScript-代码"><a href="#如何在-HTML-页面加载-JavaScript-代码" class="headerlink" title="如何在 HTML 页面加载 JavaScript 代码"></a>如何在 HTML 页面加载 JavaScript 代码</h3><p>使用 <code>&lt;script&gt;</code> 标签在 HTML 文件中添加 JavaScript 代码。</p><p>我们可以将 <code>JavaScript</code> 代码放在 <code>html</code> 文件中任何位置，但是我们一般放在网页的 <code>head</code> 或者 <code>body</code> 部分。</p><p>放在 <code>&lt;head&gt;</code> 部分<br>最常用的方式是在页面中head部分放置 <code>&lt;script&gt;</code> 元素，浏览器解析 <code>head</code> 部分就会执行这个代码，然后才解析页面的其余部分。</p><p>放在 <code>&lt;body&gt;</code> 部分<br>JavaScript 代码在网页读取到该语句的时候就会执行。</p><p><strong>注意</strong>: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。</p><hr><h3 id="为什么把-lt-script-gt-放在-lt-body-gt-前"><a href="#为什么把-lt-script-gt-放在-lt-body-gt-前" class="headerlink" title="为什么把 &lt;script&gt; 放在 &lt;/body&gt; 前"></a>为什么把 <code>&lt;script&gt;</code> 放在 <code>&lt;/body&gt;</code> 前</h3><p>虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。    如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。</p><p><strong>下面是重点</strong></p><p>按照HTML5标准中的HTML语法规则，如果在 <code>&lt;/body&gt;</code> 后再出现 <code>&lt;script&gt;</code> 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 <code>&lt;/body&gt;</code> ，即视作仍旧在body内。所以实际效果和写在 <code>&lt;/body&gt;</code> 之前是没有区别的。</p><p>总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。</p><ul><li><a href="http://www.zhihu.com/question/20027966" target="_blank" rel="noopener">script在body闭合标签之后还是之前-知乎</a></li><li><a href="http://www.zhihu.com/question/19617126" target="_blank" rel="noopener">body 和 html 标签均没有关闭</a></li></ul><hr><h4 id="JavaScript-的性能优化：加载和执行"><a href="#JavaScript-的性能优化：加载和执行" class="headerlink" title="JavaScript 的性能优化：加载和执行"></a>JavaScript 的性能优化：加载和执行</h4><ul><li>扩展阅读：<a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="noopener">JavaScript 的性能优化：加载和执行</a></li></ul><p><strong>脚本位置</strong></p><p>由于脚本会阻塞页面其他资源的下载，因此推荐将所有 <code>&lt;script&gt;</code> 标签尽可能放到 <code>&lt;body&gt;</code> 标签的底部，以尽量减少对整个页面下载的影响。</p><p><strong>组织脚本</strong></p><p>由于每个 <code>&lt;script&gt;</code> 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 <code>&lt;script&gt;</code> 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 <code>&lt;script&gt;</code> 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。</p><p><strong>无阻塞的脚本</strong></p><p>减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。</p><p>无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。</p><ul><li>延迟加载脚本</li></ul><p>HTML 4 为 <code>&lt;script&gt;</code> 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。</p><p>带有 defer 属性的 <code>&lt;script&gt;</code> 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 <code>&lt;script&gt;</code> 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。</p><p>对于如下代码：</p><pre><code>&lt;html&gt;&lt;head&gt;    &lt;title&gt;Script Defer Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type=&quot;text/javascript&quot; defer&gt;        alert(&quot;defer&quot;);    &lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        alert(&quot;script&quot;);    &lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        window.onload = function(){            alert(&quot;load&quot;);        };    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 <code>&lt;script&gt;</code> 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。</p><p>引用的资料可能写的比较早，在 <a href="http://caniuse.com/#search=defer" target="_blank" rel="noopener">CanIUse</a> 上查了一下 defer 发现大部分浏览器都是支持的。如下图：<br><a href="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg" data-fancybox="group" data-caption="defer的支持情况" class="fancybox"><img alt="defer的支持情况" title="defer的支持情况" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>HTML 5 为 <code>&lt;script&gt;</code> 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。</p><p>IE8,9不支持 <code>async</code></p><ul><li>动态脚本元素</li><li>使用 XMLHttpRequest(XHR)对象</li></ul><hr><p><strong>原文中的总结</strong></p><p>减少 JavaScript 对性能的影响有以下几种方法：</p><ul><li>将所有的 <code>&lt;script&gt;</code> 标签放到页面底部，也就是 <code>&lt;/body&gt;</code> 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。</li><li>尽可能地合并脚本。页面中的 <code>&lt;script&gt;</code> 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。</li><li>采用无阻塞下载 JavaScript 脚本的方法：<ul><li>使用 <code>&lt;script&gt;</code> 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；</li><li>使用动态创建的 <code>&lt;script&gt;</code> 元素来下载并执行代码；</li><li>使用 XHR 对象下载 JavaScript 代码并注入页面中。</li></ul></li></ul><p>通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。</p><hr><h2 id="JavaScript数据类型及语言基础"><a href="#JavaScript数据类型及语言基础" class="headerlink" title="JavaScript数据类型及语言基础"></a>JavaScript数据类型及语言基础</h2><h3 id="数据类型概要"><a href="#数据类型概要" class="headerlink" title="数据类型概要"></a>数据类型概要</h3><p>最新的 ECMAScript 标准定义了 7 种数据类型:</p><ul><li>6 种 原始类型:<ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol (new in ECMAScript 6)</li></ul></li><li>和 Object</li></ul><hr><h3 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h3><ul><li><p>一个没有被赋值的变量会有个默认值 undefined</p></li><li><p>null 与 undefined 的不同点：</p><pre><code>typeof null        // object (bug in ECMAScript, should be null)typeof undefined   // undefinednull === undefined // falsenull == undefined // true</code></pre><p>  typeof null 返回 object</p></li><li><p>Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。</p></li><li><p>NaN与任何值都不相等，包括自身。应当使用 <code>x != x</code> 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 <code>true</code>。相似的函数有 <code>isNaN()</code>, <code>isFinite()</code>。</p></li><li><p>数组直接量的语法允许有可选的结尾逗号，故 <code>[,,]</code> 只有两个元素而非三个。</p></li></ul><hr><h3 id="实践判断各种数据类型的方法"><a href="#实践判断各种数据类型的方法" class="headerlink" title="实践判断各种数据类型的方法"></a>实践判断各种数据类型的方法</h3><pre><code>// 判断arr是否为一个数组，返回一个bool值function isArray(arr) {    return typeof arr === &quot;object&quot; &amp;&amp; Object.prototype.toString.call(arr) === &quot;[object Array]&quot;;}// 判断fn是否为一个函数，返回一个bool值function isFunction(fn) {    return typeof fn === &quot;function&quot;;}</code></pre><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>在 ECMAScript5 中，可以直接使用 <code>Array.isArray()</code> 来判断数组。</p><pre><code>Array.isArray([]);  //trueArray.isArray({});  //false</code></pre><p>我看《JavaScript权威指南上》没有推荐使用 <code>instanceof</code>，因为可能会有多窗体(frame)存在。</p><blockquote><p>这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。</p></blockquote><p>所以采用了上述我写的那样的代码</p><hr><h3 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h3><p>声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。</p><p>JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。</p><blockquote><ul><li>原始值是不可更改的。对象的值是可修改的。</li><li>原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。</li></ul></blockquote><hr><h3 id="对象的读取、遍历方式"><a href="#对象的读取、遍历方式" class="headerlink" title="对象的读取、遍历方式"></a>对象的读取、遍历方式</h3><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects" target="_blank" rel="noopener">JavaScript 指南-使用对象</a></p><ul><li>对象</li></ul><p>在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。</p><ul><li>属性</li></ul><p>一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。</p><ul><li>枚举</li></ul><p>你可以在 <code>for...in</code> 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性：</p><pre><code>function showProps(obj, objName) {  var result = &quot;&quot;;  for (var i in obj) {    if (obj.hasOwnProperty(i)) {        result += objName + &quot;.&quot; + i + &quot; = &quot; + obj[i] + &quot;\n&quot;;    }  }  return result;}var srcObj = {    a: 1,    b: {        b1: [&quot;hello&quot;, &quot;hi&quot;],        b2: &quot;JavaScript&quot;    }};console.log(showProps(srcObj,&apos;srcObj&apos;));</code></pre><p>console:</p><pre><code>srcObj.a = 2srcObj.b = [object Object]</code></pre><p>这里使用 <code>hasOwnProperty()</code> 是为了确保是自己的属性而非继承的属性。</p><p>可以如下写，跳过这个对象的方法：</p><pre><code>function showPropsWithoutFun(obj, objName) {    var result = &quot;&quot;;    for (var i in obj) {        if (!obj.hasOwnProperty(i)) {       //跳过继承属性            continue;        }        if (typeof obj[i] === &quot;function&quot;) { //跳过这个对象的方法            continue;        }        result += objName + &quot;.&quot; + i + &quot;=&quot; + obj[i] + &quot;\n&quot;;    }    return result;}</code></pre><p>相关的方法还有：<code>Object.keys()</code>, <code>Object.getOwnPropertyNames()</code></p><p><code>Object.keys()</code> 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。</p><p><code>Object.getOwnPropertyNames()</code> 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。</p><ul><li>创建对象</li></ul><p>创建对象的方式有三种：使用对象初始化器，使用构造函数，使用 <code>Object.create()</code> 方法。</p><p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。</p><ul><li>继承</li></ul><p>所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。</p><ul><li>定义方法</li></ul><p>一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如：</p><pre><code>objectName.methodname = function_name;var myObj = {  myMethod: function(params) {    // ...do something  }};</code></pre><hr><h4 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h4><p>了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法：</p><pre><code>// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等function cloneObject(src) {    // your implement}// 测试用例：var srcObj = {    a: 1,    b: {        b1: [&quot;hello&quot;, &quot;hi&quot;],        b2: &quot;JavaScript&quot;    }};var abObj = srcObj;var tarObj = cloneObject(srcObj);srcObj.a = 2;srcObj.b.b1[0] = &quot;Hello&quot;;console.log(abObj.a);console.log(abObj.b.b1[0]);console.log(tarObj.a);      // 1console.log(tarObj.b.b1[0]);    // &quot;hello&quot;</code></pre><p><strong>参考：</strong></p><ul><li><a href="http://blog.csdn.net/java2000_net/article/details/3014934" target="_blank" rel="noopener">白话简单克隆和深度克隆</a> 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。</li><li><a href="http://www.jb51.net/article/32015.htm" target="_blank" rel="noopener">javascript克隆对象深度介绍</a> 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。</li></ul><p>浅度克隆：基本类型为值传递，对象仍为引用传递。 </p><p>深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。 </p><p><strong>思路：</strong>深度克隆复制目标对象，那么就需要枚举这个对象。</p><ol><li>判断当前属性是否是引用类型，如果是数组或者对象，创建响应类型变量。</li><li>枚举对象内所有属性。</li><li>使用 <code>hasOwnProperty()</code> 方法，排除继承的属性。</li><li>给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。</li><li>返回新的对象。</li></ol><p><strong>我的代码实现：</strong>   </p><pre><code>function cloneObject(src) {    // your implement    var o; //result    if (Object.prototype.toString.call(src) === &quot;[object Array]&quot;) {        o = []; //判断是否是数组，并赋初始值    } else {        o = {};    }    for (var i in src) { //遍历这个对象        if (src.hasOwnProperty(i)) { //排出继承属性            if (typeof src[i] === &quot;object&quot;) {                o[i] = cloneObject(src[i]); //递归赋值            } else {                o[i] = src[i]; //直接赋值            }        }    }    return o;}</code></pre><hr><h3 id="对数组进行去重"><a href="#对数组进行去重" class="headerlink" title="对数组进行去重"></a>对数组进行去重</h3><p><strong>参考：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN Array</a></li><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">JavaScript Array 对象 w3school</a></li></ul><p><strong>要求：</strong></p><pre><code>// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组function uniqArray(arr) {    // your implement}// 使用示例var a = [1, 3, 5, 7, 5, 3];var b = uniqArray(a);console.log(b); // [1, 3, 5, 7]</code></pre><p><strong>思路：</strong></p><ol><li>新建一个空数组</li><li>遍历原数组</li><li>若新数组中不存在当前元素，将其 <code>push</code> 入新数组中</li><li>返回新数组</li></ol><p><strong>实现：</strong></p><pre><code>// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组function uniqArray(arr) {    var newArr = [];    //创建空数组    for (var i in arr) {    //遍历旧数组        if (newArr.indexOf(arr[i]) == -1) {//如果新数组中不存在当前元素            newArr.push(arr[i]);//新数组中加入当前元素        }    }    return newArr;}</code></pre><p><strong>相关方法与知识点：</strong></p><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><ul><li>Array 对象属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回对创建此对象的数组函数的引用。</td></tr><tr><td>length</td><td>设置或返回数组中元素的数目。</td></tr><tr><td>prototype</td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><ul><li>Mutator 方法，这些方法可以改变数组自身</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>pop</td><td>移除数组的最后一个元素，返回值是被删除的元素。</td></tr><tr><td>push</td><td>在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。</td></tr><tr><td>reverse</td><td>颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。</td></tr><tr><td>shift</td><td>删除数组的第一个元素，返回值是删除的元素。</td></tr><tr><td>sort</td><td>对数组中的元素进行排序。</td></tr><tr><td>splice</td><td>添加或删除数组中的一个或多个元素。</td></tr><tr><td>unshift</td><td>添加一个或者多个元素在数组的开头，返回值是新的数组的长度。</td></tr></tbody></table><ul><li>Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array.</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat</td><td>返回一个包含此数组和其他数组和/或值的结合的新数组</td></tr><tr><td>indexOf</td><td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。</td></tr><tr><td>join</td><td>将所有的数组元素连接成一个字符串。</td></tr><tr><td>lastIndexOf</td><td>返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。</td></tr><tr><td>slice</td><td>返回数组中的一段。</td></tr><tr><td>toSource</td><td>Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.</td></tr><tr><td>toString</td><td>返回代表该数组及其元素的字符,重写Object.toString 过程.</td></tr><tr><td>valueOf</td><td>Returns the primitive value of the array. Overrides the Object.valueOf method.</td></tr></tbody></table><ul><li>循环（迭代）过程</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter</td><td>对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。</td></tr><tr><td>forEach</td><td>对数组的每一个元素依次调用参数中指定的函数。</td></tr><tr><td>every</td><td>如果数组中每一个元素都满足参数中提供的测试函数，则返回真。</td></tr><tr><td>map</td><td>Creates a new array with the results of calling a provided function on every element in this array.</td></tr><tr><td>some</td><td>如果数组中至少有一个元素满足参数函数的测试，则返回true。</td></tr></tbody></table><hr><h3 id="实现-trim"><a href="#实现-trim" class="headerlink" title="实现 trim()"></a>实现 <code>trim()</code></h3><p><strong>参考：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">String MDN</a></li><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">JavaScript String 对象 W3school</a></li></ul><p><strong>要求：</strong></p><pre><code>// 中级班同学跳过此题// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符// 假定空白字符只有半角空格、Tab// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串function simpleTrim(str) {    // your implement}// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串// 尝试使用一行简洁的正则表达式完成该题目function trim(str) {    // your implement}// 使用示例var str = &apos;   hi!  &apos;;str = trim(str);console.log(str); // &apos;hi!&apos;</code></pre><p><strong>思路：</strong></p><p>对于 <code>simpleTrim()</code> 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 <code>slice()</code> 取出子字符串。</p><p>对于 <code>trim()</code> 使用正则表达式。</p><p><strong>实现：</strong></p><pre><code>function simpleTrim(str) {    var i;    var j;    for (i = 0; i &lt; str.length; i++) { //从头遍历字符串        if (str.charAt(i) != &quot; &quot; &amp;&amp; str.charAt(i) != &quot;\t&quot;) { //当不为空的时候            break; //跳出循环        }    }    for (j = str.length - 1; j &gt;= 0; j--) {        if (str.charAt(j) != &quot; &quot; &amp;&amp; str.charAt(j) != &quot;\t&quot;) { //当不为空的时候            break; //跳出循环        }    }    return str.slice(i, j + 1); //返回子字符串}function trim(str) {    return str.replace(/^\s+|\s+$/g, &apos;&apos;);}</code></pre><p>关于正则表达式：</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>上面的思路是匹配开头和结尾的空白字符，并全局匹配。</p><ul><li><code>^</code>：匹配字符串的开头，在多行检索中，匹配一行的开头。</li><li><code>$</code>：匹配字符串的结尾，在多行检索中，匹配一行的结尾。</li><li><code>|</code>：选择，匹配的是该符号左边的子表达式或右边的子表达式。</li><li><code>\s</code>：任何 Unicode 空白符。</li><li><code>g</code>：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。</li></ul><p>以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。</p><p><strong>相关方法和知识点：</strong></p><h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><ul><li>String 对象属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>对创建该对象的函数的引用</td></tr><tr><td>length</td><td>字符串的长度</td></tr><tr><td>prototype</td><td>允许您向对象添加属性和方法</td></tr></tbody></table><ul><li>String 对象方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>charCodeAt()</td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td>concat()</td><td>连接字符串。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>lastIndexOf()</td><td>从后向前搜索字符串。</td></tr><tr><td>localeCompare()</td><td>用本地特定的顺序来比较两个字符串。</td></tr><tr><td>match()</td><td>找到一个或多个正则表达式的匹配。</td></tr><tr><td>replace()</td><td>替换与正则表达式匹配的子串。</td></tr><tr><td>search()</td><td>检索与正则表达式相匹配的值。</td></tr><tr><td>slice()</td><td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td>split()</td><td>把字符串分割为字符串数组。</td></tr><tr><td>substr()</td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td>toLowerCase()</td><td>把字符串转换为小写。</td></tr><tr><td>toUpperCase()</td><td>把字符串转换为大写。</td></tr><tr><td>toString()</td><td>返回字符串。</td></tr><tr><td>valueOf()</td><td>返回某个字符串对象的原始值。</td></tr></tbody></table><ul><li>静态方法</li></ul><p><code>String.fromCharCode()</code> 使用作为参数传入的字符编码创建一个新的字符串。</p><ul><li>HTML方法</li></ul><p>由于不是标准方法，这里就不列举了。</p><hr><h3 id="遍历数组，使每一个元素执行-fn-函数"><a href="#遍历数组，使每一个元素执行-fn-函数" class="headerlink" title="遍历数组，使每一个元素执行 fn 函数"></a>遍历数组，使每一个元素执行 <code>fn</code> 函数</h3><p><strong>要求：</strong></p><pre><code>// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递function each(arr, fn) {    // your implement}// 其中fn函数可以接受两个参数：item和index// 使用示例var arr = [&apos;java&apos;, &apos;c&apos;, &apos;php&apos;, &apos;html&apos;];function output(item) {    console.log(item)}each(arr, output);  // java, c, php, html// 使用示例var arr = [&apos;java&apos;, &apos;c&apos;, &apos;php&apos;, &apos;html&apos;];function output(item, index) {    console.log(index + &apos;: &apos; + item)}each(arr, output);  // 0:java, 1:c, 2:php, 3:html</code></pre><p><strong>分析：</strong></p><p>这个任务有点像 <code>ECMAScript5</code> 中新增的数组方法：<code>forEach()</code>。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下：</p><p><strong>实现：</strong></p><pre><code>function each(arr, fn) {    for(var i in arr){        fn(arr[i],i);    }}</code></pre><hr><h3 id="获取对象中第一层元素个数"><a href="#获取对象中第一层元素个数" class="headerlink" title="获取对象中第一层元素个数"></a>获取对象中第一层元素个数</h3><p><strong>要求：</strong></p><pre><code>// 获取一个对象里面第一层元素的数量，返回一个整数function getObjectLength(obj) {}// 使用示例var obj = {    a: 1,    b: 2,    c: {        c1: 3,        c2: 4    }};console.log(getObjectLength(obj)); // 3</code></pre><p><strong>实现：</strong></p><pre><code>function getObjectLength(obj) {    return Object.keys(obj).length;}</code></pre><p>这个自己写的比较简单，不知道可以这样写不。其中 <code>Object.keys(o)</code> 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。</p><hr><h3 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><strong>要求：</strong></p><pre><code>// 判断是否为邮箱地址function isEmail(emailStr) {    // your implement}// 判断是否为手机号function isMobilePhone(phone) {    // your implement}</code></pre><p><strong>分析：</strong></p><p>邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。</p><p>手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。<a href="http://baike.baidu.com/link?url=2nwM_XyoKXLNPxk0-uDwGT4SxIFncXy7dqB3VbsH3tSaueYRri3CYOWWF9qb84zUqeKkq9uTF2YfetoiyJVm7_" target="_blank" rel="noopener">国际电话区号_百度百科</a></p><p>并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。</p><p><strong>实现：</strong></p><pre><code>// 判断是否为邮箱地址function isEmail(emailStr) {    var pattern = /^(\w+\.)*\w+@\w+(\.\w+)+$/;    return pattern.test(emailStr);}// 判断是否为手机号function isMobilePhone(phone) {    var pattern = /^(\+\d{1,4})?\d{7,11}$/;    return pattern.test(phone);}</code></pre><p><strong>相关方法和知识点：</strong></p><ul><li>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions" target="_blank" rel="noopener">RegExp MDN</a></li><li>正则表达式修饰符：</li></ul><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>g</td><td>全局匹配</td></tr><tr><td>i</td><td>忽略大小写</td></tr><tr><td>m</td><td>让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。</td></tr></tbody></table><ul><li>字符类别</li></ul><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>[…]</td><td>方括号内的任意字符</td></tr><tr><td>[^…]</td><td>不在方括号内的任意字符</td></tr><tr><td>.</td><td>（点号，小数点）匹配任意单个字符，但是换行符除外，包括：\n \r \u2028 或 \u2029。<br><br>需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符<br><br>例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。</td></tr><tr><td>\d</td><td>匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。<br><br>例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。</td></tr><tr><td>\D</td><td>匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。<br><br>例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。</td></tr><tr><td>\w</td><td>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。<br><br>例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。</td></tr><tr><td>\W</td><td>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。<br><br>例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。</td></tr><tr><td>\s</td><td>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。<br><br>等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。<br><br>例如 /\s\w*/ 匹配 “foo bar” 中的 ‘ bar’。</td></tr><tr><td>\S</td><td>匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。<br><br>例如，/\S\w*/ 匹配 “foo bar” 中的 ‘foo’。</td></tr><tr><td>[\b]</td><td>匹配一个退格符（backspace）（不要与 \b 混淆）</td></tr></tbody></table><ul><li>直接量字符</li></ul><table><thead><tr><th>字符</th><th>匹配</th></tr></thead><tbody><tr><td>数字和字母字符</td><td>自身</td></tr><tr><td>\t</td><td>匹配一个水平制表符（tab）</td></tr><tr><td>\r</td><td>匹配一个回车符（carriage return）</td></tr><tr><td>\n</td><td>匹配一个换行符（linefeed）</td></tr><tr><td>\v</td><td>匹配一个垂直制表符（vertical tab）</td></tr><tr><td>\f</td><td>匹配一个换页符（form-feed）</td></tr><tr><td>\0</td><td>匹配一个 NUL 字符。不要在此后面跟小数点。</td></tr><tr><td>\cX</td><td>X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。<br><br>例如，/\cM/ 匹配字符串中的 control-M。</td></tr><tr><td>\xhh</td><td>匹配编码为 hh （两个十六进制数字）的字符。</td></tr><tr><td>\uhhhh</td><td>匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</td></tr></tbody></table><ul><li>边界</li></ul><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。<br><br>例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。</td></tr><tr><td>$</td><td>匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。<br><br>例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。</td></tr><tr><td>\b</td><td>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）<br><br>例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。</td></tr><tr><td>\B</td><td>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。<br><br>例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “ye”。</td></tr></tbody></table><hr><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>参考：</p><ul><li><a href="http://www.w3school.com.cn/htmldom/index.asp" target="_blank" rel="noopener">HTML DOM 教程 W3C</a></li><li><a href="http://www.w3school.com.cn/js/js_htmldom.asp" target="_blank" rel="noopener">JavaScript HTML DOM W3C</a></li><li><a href="http://www.w3school.com.cn/jsref/dom_obj_document.asp" target="_blank" rel="noopener">参考手册-HTML DOM Document 对象</a></li><li><a href="http://www.w3school.com.cn/jsref/dom_obj_all.asp" target="_blank" rel="noopener">参考手册-HTML DOM Element 对象</a></li></ul><hr><h3 id="基本任务"><a href="#基本任务" class="headerlink" title="基本任务"></a>基本任务</h3><p><strong>任务：</strong></p><p>先来一些简单的，在你的util.js中完成以下任务：</p><pre><code>// 为element增加一个样式名为newClassName的新样式function addClass(element, newClassName) {    // your implement}// 移除element中的样式oldClassNamefunction removeClass(element, oldClassName) {    // your implement}// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值function isSiblingNode(element, siblingNode) {    // your implement}// 获取element相对于浏览器窗口的位置，返回一个对象{x, y}function getPosition(element) {    // your implement}</code></pre><p><strong>思路：</strong></p><ul><li><p><code>addClass()</code></p><p>  对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。</p></li><li><p><code>removeClass()</code></p><p>  获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 <code>RegExp()</code> 来创建，并且使用 <code>\b</code> 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。</p></li><li><p><code>isSiblingNode()</code></p><p>  直接判断两个父节点是不是相同</p></li><li><p><code>getPosition()</code></p><p>  下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。</p><blockquote><p><code>offsetTop</code>, <code>offsetLeft</code> 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。</p><p><code>offsetParent</code> 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。</p><p>所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 <code>offsetTop</code>, <code>offsetLeft</code>。</p><p>如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。</p><p>这里可能要用到一个递归算法。</p></blockquote><p>  <strong>另一种方法：</strong></p><p>  使用 <code>getBoundingClientRect()</code> 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。</p><p>  关于滚动条的位置 <code>scrollTop</code>, <code>scrollLeft</code> 这两个属性的使用，各个浏览器还都不一样。</p><ul><li><p>详情见 <a href="http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html" target="_blank" rel="noopener">document.body.scrollTop or document.documentElement.scrollTop</a>。</p><p>简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 <code>document.documentElement</code>来代表，相应的滚动距离则通过 <code>document.documentElement.scrollLeft</code> 和 <code>document.documentElement.scrollTop</code> 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 <code>document.body.scrollLeft</code> 和 <code>document.body.scrollTop</code> 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 <code>document.body</code> 来获取的。</p><p>documentElement 对应的是 html 标签，而 body 对应的是 body 标签</p><p>针对跨浏览器的解决方案则可简单的用如下代码获取：</p><p>  var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);<br>  var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop); </p></li></ul></li></ul><p><strong>实现：</strong></p><pre><code>// 为element增加一个样式名为newClassName的新样式function addClass(element, newClassName) {    var oldClassName = element.className; //获取旧的样式类    element.className = oldClassName === &quot;&quot; ? newClassName : oldClassName + &quot; &quot; + newClassName;}// 移除element中的样式oldClassNamefunction removeClass(element, oldClassName) {    var originClassName = element.className; //获取原先的样式类    var pattern = new RegExp(&quot;\\b&quot; + oldClassName + &quot;\\b&quot;); //使用构造函数构造动态的正则表达式    element.className = originClassName.replace(pattern, &apos;&apos;);}function isSiblingNode(element, siblingNode) {    return element.parentNode === siblingNode.parentNode;}function getPosition(element) {    var pos={};    pos.x = element.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);     pos.y = element.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop);    return pos;}</code></pre><hr><h3 id="mini"><a href="#mini" class="headerlink" title="mini $"></a>mini $</h3><p><strong>任务：</strong></p><p>接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务：</p><pre><code>// 实现一个简单的Queryfunction $(selector) {}// 可以通过id获取DOM对象，通过#标示，例如$(&quot;#adom&quot;); // 返回id为adom的DOM对象// 可以通过tagName获取DOM对象，例如$(&quot;a&quot;); // 返回第一个&lt;a&gt;对象// 可以通过样式名称获取DOM对象，例如$(&quot;.classa&quot;); // 返回第一个样式定义包含classa的对象// 可以通过attribute匹配获取DOM对象，例如$(&quot;[data-log]&quot;); // 返回第一个包含属性data-log的对象$(&quot;[data-time=2015]&quot;); // 返回第一个包含属性data-time且值为2015的对象// 可以通过简单的组合提高查询便利性，例如$(&quot;#adom .classa&quot;); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象</code></pre><p><strong>参考：</strong></p><ul><li><a href="http://www.imooc.com/code/4477" target="_blank" rel="noopener">Sizzle选择器</a></li><li><a href="http://www.cnblogs.com/xesam/archive/2012/02/15/2352466.html" target="_blank" rel="noopener">Sizzle引擎–原理与实践（一）</a></li><li><a href="http://www.cnblogs.com/rubylouvre/archive/2011/01/24/1942818.html" target="_blank" rel="noopener">Sizzle是怎样工作的</a></li></ul><p><strong>思路：</strong></p><ol><li>通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr</li><li>遍历 selectorArr，条件判断各种情况。</li><li>得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。</li></ol><p><strong>实现：</strong></p><pre><code>//多个选择器有点难到我了，看了一些资料觉得思路应该如下：//1.如果存在#，直接从#开始向后查//2.如果存在tag直接找到所有的tag然后向后查//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。function $(selector) {    if (!selector) {        return null;    }    if (selector == document) {        return document;    }    selector = selector.trim();    if (selector.indexOf(&quot; &quot;) !== -1) { //若存在空格        var selectorArr = selector.split(/\s+/); //拆成数组        var rootScope = myQuery(selectorArr[0]); //第一次的查找范围        var i = null;        var j = null;        var result = [];        //循环选择器中的每一个元素        for (i = 1; i &lt; selectorArr.length; i++) {            for (j = 0; j &lt; rootScope.length; j++) {                result.push(myQuery(selectorArr[i], rootScope[j]));            }            // rootScope = result;            // 目前这个方法还有bug        }        return result[0][0];    } else { //只有一个，直接查询        return myQuery(selector, document)[0];    }}/** * 针对一个内容查找结果 success * @param  {String} selector 选择器内容 * @param  {Element} root    根节点元素 * @return {NodeList数组}    节点列表，可能是多个节点也可能是一个 */function myQuery(selector, root) {    var signal = selector[0]; //    var allChildren = null;    var content = selector.substr(1);    var currAttr = null;    var result = [];    root = root || document; //若没有给root，赋值document    switch (signal) {        case &quot;#&quot;:            result.push(document.getElementById(content));            break;        case &quot;.&quot;:            allChildren = root.getElementsByTagName(&quot;*&quot;);            // var pattern0 = new RegExp(&quot;\\b&quot; + content + &quot;\\b&quot;);            for (i = 0; i &lt; allChildren.length; i++) {                currAttr = allChildren[i].getAttribute(&quot;class&quot;);                if (currAttr !== null) {                    var currAttrsArr = currAttr.split(/\s+/);                    console.log(currAttr);                    for (j = 0; j &lt; currAttrsArr.length; j++) {                        if (content === currAttrsArr[j]) {                            result.push(allChildren[i]);                            console.log(result);                        }                    }                }            }            break;        case &quot;[&quot;: //属性选择            if (content.search(&quot;=&quot;) == -1) { //只有属性，没有值                allChildren = root.getElementsByTagName(&quot;*&quot;);                for (i = 0; i &lt; allChildren.length; i++) {                    if (allChildren[i].getAttribute(selector.slice(1, -1)) !== null) {                        result.push(allChildren[i]);                    }                }            } else { //既有属性，又有值                allChildren = root.getElementsByTagName(&quot;*&quot;);                var pattern = /\[(\w+)\s*\=\s*(\w+)\]/; //为了分离等号前后的内容                var cut = selector.match(pattern); //分离后的结果，为数组                var key = cut[1]; //键                var value = cut[2]; //值                for (i = 0; i &lt; allChildren.length; i++) {                    if (allChildren[i].getAttribute(key) == value) {                        result.push(allChildren[i]);                    }                }            }            break;        default: //tag            result = root.getElementsByTagName(selector);            break;    }    return result;}</code></pre><hr><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="绑定注册事件与移除事件"><a href="#绑定注册事件与移除事件" class="headerlink" title="绑定注册事件与移除事件"></a>绑定注册事件与移除事件</h3><p><strong>任务与实现：</strong></p><pre><code>// 给一个element绑定一个针对event事件的响应，响应函数为listenerfunction addEvent(element, event, listener) {    if (element.addEventListener) {        element.addEventListener(event,listener);    } else if(element.attachEvent){        element.attachEvent(&quot;on&quot;+event,listener);    }}// 移除element对象对于event事件发生时执行listener的响应function removeEvent(element, event, listener) {    if (element.removeEventListenr) {        element.removeEventListenr(event,listener);    } else if(element.detachEvent){        element.detachEvent(&quot;on&quot;+event,listener);    }}</code></pre><p><strong>相关说明：</strong></p><p>IE8+ 支持 <code>addEventListener()</code>。IE8 以下的版本使用 <code>attachEvent()</code>。</p><ul><li><code>attachEvent()</code> 不支持时间捕获。</li><li><code>attachEvent()</code> 第一个参数事件处理程序属性名使用前缀 on。</li><li><code>attachEvent()</code> 允许相同的事件处理程序函数注册多次。</li></ul><hr><h3 id="click-与-enter-键事件绑定"><a href="#click-与-enter-键事件绑定" class="headerlink" title="click 与 enter 键事件绑定"></a>click 与 enter 键事件绑定</h3><p><strong>任务与实现：</strong></p><pre><code>// 实现对click事件的绑定function addClickEvent(element, listener) {    addEvent(element, &quot;click&quot;, listener);}// 实现对于按Enter键时的事件绑定function addEnterEvent(element, listener) {    addEvent(element, &quot;keydown&quot;, function(event) {        if (event.keyCode == 13) {            listener();        }    });}</code></pre><p><strong>相关说明：</strong></p><p>这里我直接使用了上一个任务写好的 <code>addEvent()</code> 函数。这样可以简化代码，并有良好的兼容性。</p><p>enter 键的 keyCode 为 13。</p><hr><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p><strong>参考：</strong></p><ul><li><a href="http://www.cnblogs.com/Aralic/p/4446030.html" target="_blank" rel="noopener">javascript事件代理（委托）</a></li><li><a href="http://www.cnblogs.com/leo388/p/4461579.html" target="_blank" rel="noopener">JS - 事件代理</a></li></ul><p><strong>任务与实现：</strong></p><pre><code>function delegateEvent(element,tag,eventName,listener){    addEvent(element, eventName, function(event){        var target = event.target || event.srcElement;        if(target.tagName.toLowerCase() == tag.toLowerCase()) {            listener.call(target, event);        }    });}</code></pre><hr><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p><strong>任务与实现：</strong></p><pre><code>// 判断是否为IE浏览器，返回-1或者版本号function isIE() {    var s = navigator.userAgent.toLowerCase();    console.log(s);    //ie10的信息：    //mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0)    //ie11的信息：    //mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko    var ie = s.match(/rv:([\d.]+)/) || s.match(/msie ([\d.]+)/);    if(ie) {        return ie[1];    } else {        return -1;    }}// 设置cookiefunction setCookie(cookieName, cookieValue, expiredays) {    var cookie = cookieName + &quot;=&quot; + encodeURIComponent(cookieValue);    if (typeof expiredays === &quot;number&quot;) {        cookie += &quot;;max-age=&quot; + (expiredays * 60 * 60 * 24);    }    document.cookie = cookie;}// 获取cookie值function getCookie(cookieName) {    var cookie = {};    var all = document.cookie;    if (all===&quot;&quot;) {        return cookie;    }    var list = all.split(&quot;; &quot;);    for (var i = 0; i &lt; list.length; i++) {        var p = list[i].indexOf(&quot;=&quot;);        var name = list[i].substr(0, p);        var value = list[i].substr(p + 1);        value = decodeURIComponent(value);        cookie[name] = value;    }    return cookie;}</code></pre><ul><li>参考自：JavaScript权威指南</li></ul><hr><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><strong>任务：</strong></p><pre><code>// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：function ajax(url, options) {    // your implement}// 使用示例：ajax(    &apos;http://localhost:8080/server/ajaxtest&apos;,     {        data: {            name: &apos;simon&apos;,            password: &apos;123456&apos;        },        onsuccess: function (responseText, xhr) {            console.log(responseText);        }    });　</code></pre><p><strong>实现：</strong></p><pre><code>function ajax(url, options) {    var dataResult; //结果data    // 处理data    if (typeof(options.data) === &apos;object&apos;) {        var str = &apos;&apos;;        for (var c in options.data) {            str = str + c + &apos;=&apos; + options.data[c] + &apos;&amp;&apos;;        }        dataResult = str.substring(0, str.length - 1);    }    // 处理type    options.type = options.type || &apos;GET&apos;;    //获取XMLHttpRequest对象    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);    // 发送请求    oXhr.open(options.type, url, true);    if (options.type == &apos;GET&apos;) {        oXhr.send(null);    } else {        oXhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);        oXhr.send(dataResult);    }    // readyState    xhr.onreadystatechange = function() {        if (xhr.readyState === 4) {            if (xhr.status === 200) {                if (options.onsuccess) {                    options.onsuccess(xhr.responseText, xhr.responseXML);                }            } else {                if (options.onfail) {                    options.onfail();                }            }        }    };}</code></pre><p><strong>说明：</strong></p><ol><li><p>首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp; 连接。</p></li><li><p>处理 type，默认是 GET 请求。</p></li><li><p>使用 <code>open()</code> 指明请求方法和 url。方法一般为 GET 或 POST。</p></li><li><p>调用 <code>send()</code> 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 <code>setRequestHeaders()</code> 来指定 “Content-type” 头。这样便成功发送了请求。</p></li><li><p>取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。</p><ul><li><p><code>readyState</code> 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表：</p><p>值 | 含义</p></li></ul><p> —|—<br> 0 | open() 尚未调用<br> 1 | open() 已调用<br> 2 | 接收到响应头信息<br> 3 | 接收到响应主体<br> 4 | 响应完成</p><ul><li><code>status</code> 和 <code>statusText</code> 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。</li><li><code>getResponseHeader()</code> 和 <code>getAllResponseHeaders()</code> 能查询响应头。</li><li>响应主体可以从 <code>responseText</code> 属性中得到文本形式的，从 <code>responseXML</code> 属性中得到 Document 形式的。</li></ul></li><li><p>补充一点 <code>onreadystatechange</code> 事件会在 <code>readyState</code> 改变时被触发。 </p></li></ol><p><strong>参考：</strong></p><ul><li><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">Ajax W3C</a></li><li><a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/" target="_blank" rel="noopener">Comet：基于 HTTP 长连接的“服务器推”技术</a></li></ul><hr><h2 id="练习1：处理兴趣列表"><a href="#练习1：处理兴趣列表" class="headerlink" title="练习1：处理兴趣列表"></a>练习1：处理兴趣列表</h2><h3 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h3><p>在<code>task0002</code>目录下创建一个<code>task0002_1.html</code>文件，以及一个<code>js</code>目录和<code>css</code>目录，在<code>js</code>目录中创建<code>task0002_1.js</code>，并将之前写的<code>util.js</code>也拷贝到<code>js</code>目录下。然后完成以下需求。</p><p><strong>第一阶段</strong></p><p>在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。</p><p>当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。</p><p><strong>第二阶段</strong></p><p>单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。</p><p>当点击按钮时的行为同上</p><p><strong>第三阶段</strong></p><p>用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。</p><p>同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是对字符串的操作，<code>split()</code> 的使用，以及正则表达式的使用。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_1.html" target="_blank" rel="noopener">在线demo</a></li></ul><hr><h2 id="练习2：倒计时"><a href="#练习2：倒计时" class="headerlink" title="练习2：倒计时"></a>练习2：倒计时</h2><h3 id="任务要求-1"><a href="#任务要求-1" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_2.html</code>文件，在<code>js</code>目录中创建<code>task0002_2.js</code>，并在其中编码，实现一个倒计时功能。</p><ul><li>界面首先有一个文本输入框，允许按照特定的格式<code>YYYY-MM-DD</code>输入年月日；</li><li>输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差</li><li>在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒</li><li>每一秒钟更新倒计时上显示的数</li><li>如果时差为0，则倒计时停止</li></ul><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li><p><code>setInterval()</code> 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p>   <code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。由 <code>setInterval()</code> 返回的 ID 值可用作 <code>clearInterval()</code> 方法的参数。</p></li><li><p><code>clearInterval()</code> 方法可取消由 <code>setInterval()</code> 设置的 timeout。</p><p>  <code>clearInterval()</code> 方法的参数必须是由 <code>setInterval()</code> 返回的 ID 值。</p></li><li><p><code>setTimeout()</code> 方法用于在指定的毫秒数后调用函数或计算表达式。</p><p>  setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。   </p></li><li><p><code>clearTimeout()</code> 方法可取消由 setTimeout() 方法设置的 timeout。</p></li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_2.html" target="_blank" rel="noopener">在线demo</a></li></ul><hr><h2 id="练习3：图片轮播"><a href="#练习3：图片轮播" class="headerlink" title="练习3：图片轮播"></a>练习3：图片轮播</h2><h3 id="任务要求-2"><a href="#任务要求-2" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_3.html</code>文件，在<code>js</code>目录中创建<code>task0002_3.js</code>，并在其中编码，实现一个轮播图的功能。</p><ul><li>图片数量及URL均在HTML中写好</li><li>可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长</li><li>图片切换的动画要流畅</li><li>在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片</li></ul><p>效果示例：<a href="http://echarts.baidu.com/" target="_blank" rel="noopener">http://echarts.baidu.com/</a> 上面的轮播图（不需要做左右两个箭头）</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。</p><p>对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。</p><p><strong>参考：</strong></p><ul><li><a href="http://www.itxueyuan.org/view/6323.html" target="_blank" rel="noopener">JS图片切换</a></li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_3.html" target="_blank" rel="noopener">在线demo</a></li></ul><h3 id="关于变速运动"><a href="#关于变速运动" class="headerlink" title="关于变速运动"></a>关于变速运动</h3><p>评论中有人问到运动部分为什么这样写，下面我讲一下吧。</p><pre><code>function startMove(target) {    clearInterval(timerInner);    timerInner = setInterval(function() {        var speed = (target - imgListDiv.offsetLeft) / 6;        speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed);        imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;    }, 30);}</code></pre><p>上面是运动部分代码。</p><ul><li><p>参数 <code>target</code> 是运动终点的位置。</p></li><li><p>首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。</p><pre><code>clearInterval(timerInner);</code></pre></li><li><p>下面开始开启计时器，每隔 30ms 执行一次内部的函数。</p></li><li><p>变速运动</p><pre><code>var speed = (target - imgListDiv.offsetLeft) / 6;</code></pre><p>  逐渐变慢，最后停止，距离越远速度越大，速度由距离决定</p><p>  速度=(目标值-当前值)/缩放系数</p><p>  这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。</p></li><li><p>速度取整</p><pre><code>speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed);</code></pre><p>  像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整</p></li><li><p>最后关于运动终止条件。</p><pre><code>imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;</code></pre><p>  由这一行可以看出，<code>imgListDiv.style.left</code> 在不断增大，即 <code>imgListDiv.offsetLeft</code> 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。</p><p>  再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。</p><pre><code>var speed = (target - imgListDiv.offsetLeft) / 6;</code></pre><p>  当不断增大的 <code>imgListDiv.offsetLeft</code> 等于 <code>target</code> 时，<code>speed</code> 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。</p></li></ul><hr><h2 id="练习4：输入框即时提示"><a href="#练习4：输入框即时提示" class="headerlink" title="练习4：输入框即时提示"></a>练习4：输入框即时提示</h2><h3 id="任务要求-3"><a href="#任务要求-3" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_4.html</code>文件，在<code>js</code>目录中创建<code>task0002_4.js</code>，并在其中编码，实现一个类似百度搜索框的输入提示的功能。</p><p>要求如下：</p><ul><li>允许使用鼠标点击选中提示栏中的某个选项</li><li>允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中</li><li>选中后，提示内容变更到输入框中</li></ul><p><strong>初级班：</strong></p><ul><li>不要求和后端交互，可以自己伪造一份提示数据例如：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var suggestData &#x3D; [&#39;Simon&#39;, &#39;Erik&#39;, &#39;Kener&#39;];</span><br></pre></td></tr></table></figure></div><p><strong>中级班：</strong></p><ul><li>自己搭建一个后端Server，使用Ajax来获取提示数据</li></ul><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。</p><p>关于 input 监听的代码如下：</p><pre><code>function addInputListener() {    if (inputArea.addEventListener) { // all browsers except IE before version 9        inputArea.addEventListener(&quot;input&quot;, OnInput);    }    if (inputArea.attachEvent) { // Internet Explorer and Opera        inputArea.attachEvent(&quot;onpropertychange&quot;, OnPropChanged); // Internet Explorer    }}// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9function OnInput(event) {    var inputValue = event.target.value;    handleInput(inputValue);}// Internet Explorerfunction OnPropChanged(event) {    var inputValue = &quot;&quot;;    if (event.propertyName.toLowerCase() == &quot;value&quot;) {        inputValue = event.srcElement.value;        handleInput(inputValue);    }} </code></pre><p>其中 handleInput() 为下一步要执行的方法。</p><p>其实后来想了想也可以使用 keyup 事件了做这个任务。</p><p>匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。</p><p>然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。</p><p><strong>参考：</strong></p><ul><li><a href="http://help.dottoro.com/ljhxklln.php" target="_blank" rel="noopener">oninput 事件</a></li></ul><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_4.html" target="_blank" rel="noopener">在线demo</a></li></ul><hr><h2 id="练习5：拖拽交互"><a href="#练习5：拖拽交互" class="headerlink" title="练习5：拖拽交互"></a>练习5：拖拽交互</h2><h3 id="任务要求-4"><a href="#任务要求-4" class="headerlink" title="任务要求"></a>任务要求</h3><ul><li>实现一个可拖拽交互的界面</li><li>如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动</li><li>被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动</li><li>注意拖拽释放后，要添加到准确的位置</li><li>拖拽到什么位置认为是可以添加到新容器的规则自己定</li><li>注意交互中良好的用户体验和使用引导</li></ul><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。</li><li>初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。</li><li>拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。</li><li>在 mousemove 中判断，不能让鼠标拖出浏览器窗口。</li><li>在 mouseup 中判断，是否到达指定区域。完成拖拽。</li></ol><p>我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_5.html" target="_blank" rel="noopener">在线demo</a></li></ul><hr><h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/index.html" target="_blank" rel="noopener">在线 Demo</a></li></ul><p>加油！向着下一个目标前进！</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML, CSS基础</title>
      <link href="/2015/04/15/2015-04-15-baidu-1/"/>
      <url>/2015/04/15/2015-04-15-baidu-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p><strong>任务：</strong> [HTML、CSS基础] </p><p>有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 [同步一个 fork] 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。   </p><hr><p>写点东西记录一下我的做题过程吧。   </p><hr><h2 id="CSS-如何工作"><a href="#CSS-如何工作" class="headerlink" title="CSS 如何工作"></a>CSS 如何工作</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/How_CSS_works" target="_blank" rel="noopener">CSS 如何工作</a> Mozilla 的开发者文档讲的很好。</p><blockquote><p>浏览器在展现一个文档的时候，必须要把文档内容和相应的样式信息结合起来展示。 这个处理过程一般分两个阶段：   </p><ol><li>浏览器先将标记语言和 CSS 转换成 DOM (文档对象模型)结构。 这时 DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。   </li><li>最后浏览器把 DOM 的内容展示出来。   </li></ol></blockquote><hr><h2 id="层叠和继承"><a href="#层叠和继承" class="headerlink" title="层叠和继承"></a>层叠和继承</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Cascading_and_inheritance" target="_blank" rel="noopener">参考资料: 层叠和继承</a></p><blockquote><p>对于层叠来说，共有三种主要的样式来源：</p><ul><li><p>浏览器对HTML定义的默认样式。</p></li><li><p>用户定义的样式。</p></li><li><p>开发者定义的样式，可以有三种形式：</p><ul><li>定义在外部文件（外链样式）：本教程中案例主要是通过这种形式定义样式。<ul><li>在页面的头部定义（内联样式）：通过这种形式定义的样式只在本页面内生效。</li><li>定义在特定的元素身上（行内样式）：这种形式多用于测试，可维护性较差。</li></ul></li></ul></li></ul><p>用户定义的样式表会覆盖浏览器定义的默认样式，然后网页开发者定义的样式又会覆盖用户样式。</p><p>再来看看优先级，从高到低依次为：网页开发者定义的样式、网页阅读者定义的样式、浏览器的默认样式。</p><p>对继承的元素来说，子元素自身的样式优先级高于从父级继承来的样式。</p><blockquote><p>更多细节<br>CSS 另外提供了一个 !important 关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。<br>这就意味着，作为开发者，你很难准确的预知页面最终在用户电脑上的显示效果。   </p></blockquote></blockquote><hr><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_Started/Selectors" target="_blank" rel="noopener">参考资料:选择器（Selectors）</a></p><hr><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><hr><h3 id="类选择器（Class-selectors）"><a href="#类选择器（Class-selectors）" class="headerlink" title="类选择器（Class selectors）"></a>类选择器（Class selectors）</h3><blockquote><p>通过设置元素的 class 属性，可以为元素指定类名。类名由开发者自己指定。 文档中的多个元素可以拥有同一个类名。</p><p>在写样式表时，类选择器是以英文句号（.）开头的。</p></blockquote><hr><h3 id="ID选择器（ID-selectors）"><a href="#ID选择器（ID-selectors）" class="headerlink" title="ID选择器（ID selectors）"></a>ID选择器（ID selectors）</h3><blockquote><p>通过设置元素的 id 属性为该元素制定ID。ID名由开发者指定。每个ID在文档中必须是唯一的。</p><p>在写样式表时，ID选择器是以#开头的。</p></blockquote><hr><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote><ul><li>如果多余一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有更高确定度的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。</li><li>如果样式中包含冲突的规则，且它们具有相同的确定度。那么，后出现的规则优先级高。</li><li>如果你遇到规则冲突，你可以增加其中一条的确定度或将之移到后面以使它具有更高优先级。</li></ul></blockquote><hr><h3 id="伪类选择器（Pseudo-classes-selectors）"><a href="#伪类选择器（Pseudo-classes-selectors）" class="headerlink" title="伪类选择器（Pseudo-classes selectors）"></a>伪类选择器（Pseudo-classes selectors）</h3><hr><h3 id="基于关系的选择器"><a href="#基于关系的选择器" class="headerlink" title="基于关系的选择器"></a>基于关系的选择器</h3><table><thead><tr><th>选择器</th><th>选择的元素</th></tr></thead><tbody><tr><td>A E</td><td>任何是元素A的后代元素E (后代节点指A的子节点，子节点的子节点，以此类推)</td></tr><tr><td>A &gt; E</td><td>任何元素A的子元素</td></tr><tr><td>E:first-child</td><td>任何元素的第一个子元素E</td></tr><tr><td>B + E</td><td>任何元素B的下一个兄弟元素E</td></tr></tbody></table><hr><h2 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h2><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a><code>text-indent</code></h3><p><strong>定义和用法</strong><br>text-indent 属性规定文本块中首行文本的缩进。<br>注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。   </p><p><strong>可能的值</strong>    </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>定义固定的缩进。默认值：0。</td></tr><tr><td>%</td><td>定义基于父元素宽度的百分比的缩进。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 text-indent 属性的值。</td></tr></tbody></table><hr><h3 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a><code>text-transform</code></h3><p><strong>定义和用法</strong><br>text-transform 属性控制文本的大小写。      </p><p><strong>说明</strong><br>这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。   </p><p><strong>可能的值</strong>  </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义带有小写字母和大写字母的标准的文本。</td></tr><tr><td>capitalize</td><td>文本中的每个单词以大写字母开头。</td></tr><tr><td>uppercase</td><td>定义仅有大写字母。</td></tr><tr><td>lowercase</td><td>定义无大写字母，仅有小写字母。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 text-transform 属性的值。</td></tr></tbody></table><hr><h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a><code>text-decoration</code></h3><p><strong>定义和用法</strong><br>text-decoration 属性规定添加到文本的修饰。<br>注释：修饰的颜色由 “color” 属性设置。<br>注释：IE、Chrome 或 Safari 不支持 “blink” 属性值。    </p><p><strong>说明</strong><br>这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。</p><hr><h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a><code>text-align</code></h3><p><strong>定义和用法</strong><br>text-align 属性规定元素中的文本的水平对齐方式。<br>该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。   </p><p><strong>可能的值</strong>   </p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>把文本排列到左边。默认值：由浏览器决定。</td></tr><tr><td>right</td><td>把文本排列到右边。</td></tr><tr><td>center</td><td>把文本排列到中间。</td></tr><tr><td>justify</td><td>实现两端对齐文本效果。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 text-align 属性的值。</td></tr></tbody></table><hr><h3 id="word-spacing"><a href="#word-spacing" class="headerlink" title="word-spacing"></a><code>word-spacing</code></h3><p><strong>定义</strong><br>word-spacing 属性增加或减少单词间的空白（即字间隔）。<br>该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。<br>注释：允许使用负值。</p><hr><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a><code>white-space</code></h3><p><strong>定义和用法</strong><br>white-space 属性设置如何处理元素内的空白。<br>这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><p><strong>可能的值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。其行为方式类似 HTML 中的 <code>&lt;pre&gt;</code> 标签。</td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到 <code>&lt;br&gt;</code> 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 white-space 属性的值。</td></tr></tbody></table><hr><h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a><code>@font-face</code></h3><p><strong>CSS3 @font-face 规则</strong><br>在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。<br>通过 CSS3，web 设计师可以使用他们喜欢的任意字体。<br>当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。<br>您“自己的”的字体是在 CSS3 @font-face 规则中定义的。   </p><p>注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。</p><p><strong>使用您需要的字体</strong><br>在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。<br>如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)：</p><p><strong>实例</strong></p><pre><code>@font-face {    font-family: myFirstFont;    src: url(&apos;Sansation_Light.ttf&apos;),          url(&apos;Sansation_Light.eot&apos;); /* IE9+ */}div {    font-family: myFirstFont;}</code></pre><p><strong>CSS3 字体描述符</strong></p><p>下面的表格列出了能够在 @font-face 规则中定义的所有字体描述符：</p><table><thead><tr><th>描述符</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>font-family</td><td>name</td><td>必需。规定字体的名称。</td></tr><tr><td>src</td><td>URL</td><td>必需。定义字体文件的 URL。</td></tr><tr><td>font-stretch</td><td>normal<br>condensed<br>ultra-condensed<br>extra-condensed<br>semi-condensed<br>expanded<br>semi-expanded<br>extra-expanded<br>ultra-expanded</td><td>可选。定义如何拉伸字体。默认是 “normal”。</td></tr><tr><td>font-style</td><td>ormal<br>italic<br>oblique</td><td>可选。定义字体的样式。默认是 “normal”。</td></tr><tr><td>font-weight</td><td>normal<br>bold<br>100<br>200<br>300<br>400<br>500<br>600<br>700<br>800<br>900</td><td>选。定义字体的粗细。默认是 “normal”。</td></tr><tr><td>unicode-range</td><td>unicode-range</td><td>可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。</td></tr></tbody></table><hr><h2 id="深入了解行高属性"><a href="#深入了解行高属性" class="headerlink" title="深入了解行高属性"></a>深入了解行高属性</h2><p><a href="http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html" target="_blank" rel="noopener">参考：深入了解css的行高Line Height属性</a></p><p>一般来说，设置行高为<code>值：纯数字</code>是最理想的方式，因为其会随着对应的 <code>font-size</code> 而缩放。</p><hr><h2 id="盒模型及定位"><a href="#盒模型及定位" class="headerlink" title="盒模型及定位"></a>盒模型及定位</h2><h3 id="已知宽度的div居中"><a href="#已知宽度的div居中" class="headerlink" title="已知宽度的div居中"></a>已知宽度的div居中</h3><ul><li>用两种方法来实现一个背景色为红色、宽度为960px的<div>在浏览器中居中</div></li></ul><p>我的方法一：</p><p>使用 <code>margin：0 auto;</code></p><p>html文件</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Document&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-2.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;center&quot;&gt;aaa&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css文件</p><pre><code>.center {    width: 960px;    margin: 0 auto;    background-color: red;}</code></pre><p>方法二：</p><p>绝对定位，左边距离 body 50%，<code>margin-left: -480px</code></p><pre><code>.center {    width: 960px;    background-color: red;    position: absolute;    left: 50%;    margin-left: -480px;}</code></pre><hr><h4 id="对于居中的补充"><a href="#对于居中的补充" class="headerlink" title="对于居中的补充"></a>对于居中的补充</h4><p>参考自 <a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a>。</p><p>像下面这样写css代码，使用 <code>max-width</code> 替代 <code>width</code>  可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。</p><p>有效的避免了如下问题：<br>当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。</p><pre><code>#main {    max-width: 600px;    margin: 0 auto; }</code></pre><hr><ul><li><a href="http://www.cnblogs.com/2050/p/3392803.html" target="_blank" rel="noopener">CSS布局奇淫技巧之–各种居中</a></li></ul><hr><h3 id="早期css滑动门"><a href="#早期css滑动门" class="headerlink" title="早期css滑动门"></a>早期css滑动门</h3><ul><li>有的圆角矩形是复杂图案，无法直接用border-radius，请在不使用 border-radius 的情况下实现一个可复用的高度和宽度都自适应的圆角矩形<br>示例 <a href="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_7.png" data-fancybox="group" data-caption="圆角矩形" class="fancybox"><img alt="圆角矩形" title="圆角矩形" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_7.png" src="/img/loading.gif" class="lazyload"></a></li></ul><p>这道题我一开始不会做，查阅了资料，发现这就是所谓的 css 滑动门的应用。<a href="http://www.bkjia.com/webzh/759711.html" target="_blank" rel="noopener">妙味云课堂之css：滑动门、圆角、css精灵</a><br>使用三层嵌套，或者四层嵌套的 <code>div</code>，通过背景图定位等方式可以实现。</p><hr><h3 id="左侧固定右侧自适应宽度的两列布局"><a href="#左侧固定右侧自适应宽度的两列布局" class="headerlink" title="左侧固定右侧自适应宽度的两列布局"></a>左侧固定右侧自适应宽度的两列布局</h3><ul><li>用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 <a href="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_3.jpg" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_3.jpg" src="/img/loading.gif" class="lazyload"></a></li></ul><p>我的方法一：</p><p>不使用浮动，使用绝对定位，将左上角的块放好位置，右边的块设置<code>margin-left</code></p><p>html 文件：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;layout&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-3.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;left&quot;&gt;DIV-A&lt;/div&gt;            &lt;div class=&quot;right&quot;&gt;DIV-B&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;bottom&quot;&gt;DIV-C&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css 文件：</p><pre><code>.row {    position: relative;}.left {    width: 100px;    height: 100px;    background-color: red;    position: absolute;    top: 0;    left: 0;}.right {    height: 100px;    background-color: blue;    margin-left: 100px;}.bottom {    height: 100px;    background-color: yellow;} </code></pre><p>方法二：   </p><p>使用浮动，左边的块使用浮动，右边的块使用<code>margin-left</code></p><pre><code>.left {    width: 100px;    height: 100px;    background-color: red;    float: left;}.right {    height: 100px;    background-color: blue;    margin-left: 100px;}.bottom {    height: 100px;    background-color: yellow;}</code></pre><hr><p><strong>补充：</strong></p><p>看完了后面的 BFC 之后，本题和下一题都可以用另一种方法了<br>总之我已经震惊了！太爽了！有没有！</p><p>html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;使用 BFC 进行两列布局&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;two-col-layout-with-BFC.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;left&quot;&gt;DIV-A&lt;/div&gt;        &lt;div class=&quot;right&quot;&gt;DIV-B&lt;/div&gt;        &lt;div class=&quot;bottom&quot;&gt;DIV-C&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css</p><pre><code>.left{    width: 100px;    height: 100px;    background-color: blue;    float: left;}.right{    height: 100px;    background-color: yellow;    overflow: hidden;}.bottom{    height: 100px;    background-color: red;}</code></pre><hr><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><ul><li>用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化</li></ul><p>原题中参考资料 <a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="noopener">双飞翼布局</a>   </p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Flying Swing Layout&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-4.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;bd&quot;&gt;            &lt;div class=&quot;main&quot;&gt;                &lt;div class=&quot;main-wrap&quot;&gt;                    &lt;p&gt;Flying Swing Layout&lt;/p&gt;                &lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;sub&quot;&gt;                &lt;p&gt;Flying Swing Layout&lt;/p&gt;                left            &lt;/div&gt;            &lt;div class=&quot;extra&quot;&gt;                &lt;p&gt;Flying Swing Layout&lt;/p&gt;                right            &lt;/div&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css</p><pre><code>.bd {    /*padding: 0 190px;*/}.main {    float: left;    width: 100%;    background-color: #aaa;}.main-wrap {    margin: 0 190px;}.sub {    float: left;    width: 190px;    margin-left: -100%;    background-color: blue;            /*position: relative;    left: -190px;*/}.extra {    float: left;    width: 190px;    margin-left: -190px;    background-color: yellow;            /*position: relative;    right: -190px;*/}</code></pre><hr><p><strong>补充：</strong></p><p>使用 BFC 的另一种方法，我再一次震惊！</p><p>代码超级简单！</p><p>html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;flying-Swing-BFC&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;flying-Swing-BFC.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;        &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;        &lt;div class=&quot;main&quot;&gt;            flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html        &lt;/div&gt;        &lt;div class=&quot;footer&quot;&gt;            footerfooterfooterfooterfooterfooterfooterfooterfooter        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css</p><pre><code>.left{    width: 100px;    background-color: red;    float: left;}.right{    width: 200px;    background-color: blue;    float: right;}.main{    background-color: #eee;    overflow: hidden;}</code></pre><hr><h3 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h3><ul><li>实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 <a href="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_4.jpg" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_4.jpg" src="/img/loading.gif" class="lazyload"></a>)<a href="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_5.jpg" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_5.jpg" src="/img/loading.gif" class="lazyload"></a></li></ul><p>这个题我觉的直接将每一个块浮动起来就好了，不知我理解的对不对。</p><p>html文件</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Document&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-5.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;        &lt;div&gt;&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css文件</p><pre><code>body {    background-color: red;}div {    width: 150px;    height: 100px;    margin: 10px;    float: left;    background-color: blue;}</code></pre><hr><h3 id="清除浮动-闭合浮动"><a href="#清除浮动-闭合浮动" class="headerlink" title="清除浮动/闭合浮动"></a>清除浮动/闭合浮动</h3><p>参考自 <a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动 by 一丝冰凉</a> </p><ol><li>清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none；</li><li>闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。</li></ol><p>我们想要达到的效果更确切地说是闭合浮动，而不是单纯的清除浮动，设置clear：both清除浮动并不能解决warp高度塌陷的问题。</p><p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（<strong>高度塌陷</strong>）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。</p><p>最后一丝姐给了两个精益求精方案，我觉得方案一更易于理解，这里实践一下：</p><p>下面是源码</p><p>html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;Document&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;close-float.css&quot;&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;row clearfix&quot;&gt;            &lt;div class=&quot;left&quot;&gt;                &lt;h1&gt;left&lt;/h1&gt;                &lt;div&gt;Content or Something&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;row2&quot;&gt;Row2&lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>css</p><pre><code>.row {    border: 1px solid red;}.clearfix:after {    content: &quot;\200B&quot;;    display: block;    height: 0;    clear: both;}.clearfix {    *zoom: 1;}.left {    width: 200px;    float: left;    background-color: #eee;}.right {    width: 200px;    float: right;    background-color: #eee;}.row2 {    width: 600px;    height: 50px;    background-color: #aaa;}</code></pre><p>其中<code>*zoom: 1</code>是为了触发<code>hasLayout</code></p><hr><p>还有另一种解决方案！</p><p>参考自：<a href="http://zh.learnlayout.com/clearfix.html" target="_blank" rel="noopener">清除浮动（clearfix hack）</a></p><p>直接使用，如下代码即可</p><pre><code>.clearfix{    overflow: auto;    zoom: 1;}</code></pre><p>(实际上，我看完后面的资料，再翻到这里就明白了！正是使用了BFC原理！！！！！！！)</p><hr><p><strong>但是今天遇到一个坑！</strong></p><p>如果使用了 <code>over-flow</code>，在后面如果有元素要绝对布局在父元素的外面的，意思就是出现 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> 的值为负值时，就会出现看不到，或者滚动条的问题！</p><p>若是有这种要求，我觉得还是用一丝姐姐的解决方案比较好。</p><hr><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><code>box-sizing</code></h3><p>当你设置一个元素为 <code>box-sizing: border-box;</code> 时，此元素的内边距和边框不再会增加它的宽度。</p><p>他们的内边距和边框都是向内的挤压的。支持IE8+，需要加浏览器内核。</p><pre><code>.simple {    width: 500px;    margin: 20px auto;    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    box-sizing: border-box;}</code></pre><hr><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>媒体查询</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">MDN CSS媒体查询</a></p></li><li><p><a href="http://zh.learnlayout.com/media-queries.html" target="_blank" rel="noopener">媒体查询-学习CSS布局</a></p><p>  <code>@media screen and (min-width: 500px) and (max-width: 800px) { ... }</code></p></li><li><p><a href="https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/" target="_blank" rel="noopener">An Introduction to Meta Viewport and @viewport</a></p></li></ul><hr><h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><ul><li><a href="http://zh.learnlayout.com/column.html" target="_blank" rel="noopener">column</a></li></ul><hr><h3 id="BFC-和-IE-的-hasLayout"><a href="#BFC-和-IE-的-hasLayout" class="headerlink" title="BFC 和 IE 的 hasLayout"></a>BFC 和 IE 的 hasLayout</h3><ul><li><a href="http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html" target="_blank" rel="noopener">BFC和IE的hasLayout</a></li><li><a href="http://outofmemory.cn/wr/?u=http%3A%2F%2Fkkeys.me%2Fpost%2F68547473290" target="_blank" rel="noopener">Block Formatting Context 的几大用处</a></li></ul><p>看完这个资料后我震惊了！竟然可以这么玩儿！<br>我将本文之前提到的两列布局，双飞翼布局又重新写了一遍！太爽了！代码超级简洁！</p><p><strong>Block Formatting Context 的几大用处：</strong></p><ol><li>防止 margin 折叠</li><li>清除float</li><li>不会环绕float元素</li></ol><p>相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model" target="_blank" rel="noopener">视觉格式化模型(visual formatting model)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文(block formatting context)</a></li></ul><hr><h3 id="div-三列等高"><a href="#div-三列等高" class="headerlink" title="div 三列等高"></a><code>div</code> 三列等高</h3><p><a href="http://show.sysu.edu.cn/?action-blogdetail-uid-2383-id-5040" target="_blank" rel="noopener">纯CSS实现三列DIV等高布局</a></p><p>最关键的地方有3句：</p><p>最外层div设置一个溢出隐藏</p><pre><code>#wrap {    overflow:hidden;}</code></pre><p>每一个子块设置 padding 和 margin</p><pre><code>#left,#center,#right{    margin-bottom:-10000px;    padding-bottom:10000px;}</code></pre><p>overflow:hidden;    ‘隐藏溢出。如果内容溢出wrap层，则不显示。 </p><p>margin-bottom:-10000px;    ‘底部边距-10000px。<br>padding-bottom:10000px;    ‘底部填充10000px。<br>上面这两句能够实现的效果就是，产生10000px的填充，然后用负的边距把它给抵销掉。</p><hr><h3 id="去除inline-block元素间间距"><a href="#去除inline-block元素间间距" class="headerlink" title="去除inline-block元素间间距"></a>去除inline-block元素间间距</h3><p>一开始我不知道是因为使用了 <code>display: inline-block</code> 会有间距。后来查找资料找到了相关的方案。</p><ul><li><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">去除inline-block元素间间距的N种方法</a></li><li><a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/" target="_blank" rel="noopener">Fighting the Space Between Inline Block Elements</a></li></ul><p>真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。<br>这种表现是符合规范的应该有的表现。</p><p>解决方法有很多，上述博文中提到的有：</p><ol><li>移除空格</li><li>使用 <code>margin</code> 负值</li><li>取消闭合标签</li><li>使用 <code>font-size: 0</code></li><li>使用 <code>letter-spacing</code></li><li>使用 <code>word-spacing</code></li><li>其他</li></ol><p>我觉得使用 4 <code>font-size: 0</code> 比较好，对别的元素影响最小。代码如下：在 <code>a</code> 的外层将字体尺寸设为 0，载对内层的 <code>a</code> 重新设置字体大小，即可。</p><pre><code>nav {    font-size: 0;}nav a {    font-size: 16px;}</code></pre><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">HTML、CSS的代码规范</a> 自己要试着改变一些代码风格了，规范化！  </li><li><a href="http://www.zhihu.com/question/20455165" target="_blank" rel="noopener">顾轶灵:Web语义化</a><br>我看他回答最后的举例的Sildes做的非常好，可以经常看看。<a href="http://justineo.github.io/slideshows/semantic-html/" target="_blank" rel="noopener">Semantic HTML</a>。他的其他Slides也做的非常好，很喜欢这种风格！</li><li><a href="http://www.w3cfuns.com/blog-5445898-5398950.html" target="_blank" rel="noopener">CSS命名规范@W3C Funs</a> 起名不再困难！</li><li>[点击阅读: CSS浏览器兼容性列表-维基百科](点击阅读: CSS浏览器兼容性列表) 类似的我想到了 <a href="http://caniuse.com/" target="_blank" rel="noopener">Can I Use</a>，Can I Use 包含的更多，包括 HTML5, CSS SVG, JS API 等。</li></ul><hr><ul><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a></li><li><a href="http://mediaqueri.es/" target="_blank" rel="noopener">Media Queries</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients" target="_blank" rel="noopener">使用CSS渐变</a></li><li><a href="http://www.w3cplus.com/content/css3-gradient" target="_blank" rel="noopener">CSS3 Gradient</a></li><li><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">CSS渐变生成器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步一个 fork</title>
      <link href="/2015/04/12/2015-04-12-Syncing-a-fork/"/>
      <url>/2015/04/12/2015-04-12-Syncing-a-fork/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="如何使用搜索引擎"><a href="#如何使用搜索引擎" class="headerlink" title="如何使用搜索引擎"></a>如何使用搜索引擎</h2><p>其实这个问题并不难，我又被坑了。百度搜的东西不靠谱啊，以后这种问题一定要用<strong>英文</strong>在 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 或者 <a href="http://cn.bing.com/" target="_blank" rel="noopener">Bing</a> 上搜索，这样才能搜到原汁原味的答案。就当是一个教训吧。   </p><p>搜索 fork sync，就可以看到 GitHub 自己的帮助文档 <a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="noopener">Syncing a fork</a> 点进去看这篇的时候，注意到有一个 Tip: Before you can sync your fork with an upstream repository, you must <a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="noopener">configure a remote that points to the upstream repository</a> in Git.<br>根据这两篇文章，问题迎刃而解！   </p><hr><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><hr><h3 id="Configuring-a-remote-for-a-fork"><a href="#Configuring-a-remote-for-a-fork" class="headerlink" title="Configuring a remote for a fork"></a>Configuring a remote for a fork</h3><ul><li><p>给 fork 配置一个 remote   </p></li><li><p>主要使用 <code>git remote -v</code> 查看远程状态。   </p></li></ul><pre><code>git remote -v# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</code></pre><ul><li>添加一个将被同步给 fork 远程的上游仓库      </li></ul><pre><code>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</code></pre><ul><li>再次查看状态确认是否配置成功。   </li></ul><pre><code>git remote -v# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</code></pre><hr><h3 id="Syncing-a-fork"><a href="#Syncing-a-fork" class="headerlink" title="Syncing a fork"></a>Syncing a fork</h3><ul><li>从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master<br><code>git fetch upstream</code>    </li></ul><pre><code>git fetch upstream# remote: Counting objects: 75, done.# remote: Compressing objects: 100% (53/53), done.# remote: Total 62 (delta 27), reused 44 (delta 9)# Unpacking objects: 100% (62/62), done.# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY#  * [new branch]      master     -> upstream/master</code></pre><ul><li>切换到本地主分支(如果不在的话)<br><code>git checkout master</code>    </li></ul><pre><code>git checkout master# Switched to branch 'master'</code></pre><ul><li>把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。<br><code>git merge upstream/master</code>      </li></ul><pre><code>git merge upstream/master# Updating a422352..5fdff0f# Fast-forward#  README                    |    9 -------#  README.md                 |    7 ++++++#  2 files changed, 7 insertions(+), 9 deletions(-)#  delete mode 100644 README#  create mode 100644 README.md</code></pre><ul><li>如果想更新到 GitHub 的 fork 上，直接 <code>git push origin master</code> 就好了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断两个数组是否相似 (arraysSimilar)</title>
      <link href="/2015/04/06/2015-04-06-arrays-similar/"/>
      <url>/2015/04/06/2015-04-06-arrays-similar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目来自 <a href="http://imooc.com/code/5760" target="_blank" rel="noopener">慕课网 JavaScript 深入浅出 1-6 编程练习</a>    </p><p>请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：    </p><ol><li>数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。</li><li>数组的长度一致。</li><li>类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.</li></ol><p>当以上全部满足，则返回<strong>“判定结果:通过”</strong>，否则返回<strong>“判定结果:不通过”</strong>。    </p><p>题目给出了 index.html 如下：</p><pre><code>&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb18030&quot;&gt;    &lt;title&gt;Untitled Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type=&quot;text/javascript&quot;&gt;           /*         * param1 Array          * param2 Array         * return true or false         */        function arraysSimilar(arr1, arr2){        }    &lt;/script&gt;    &lt;script src=&quot;testData.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>其中 testData.js 是测试用例，代码如下</p><pre><code>var result = function() {    //以下为多组测试数据    var cases = [{        arr1: [1, true, null],        arr2: [null, false, 100],        expect: true    }, {        arr1: [            function() {},            100        ],        arr2: [100, {}],        expect: false    }, {        arr1: [null, 999],        arr2: [{},            444        ],        expect: false    }, {        arr1: [window, 1, true, new Date(), &quot;hahaha&quot;, (function() {}), undefined],        arr2: [undefined, (function() {}), &quot;okokok&quot;, new Date(), false, 2, window],        expect: true    }, {        arr1: [new Date()],        arr2: [{}],        expect: false    }, {        arr1: [window],        arr2: [{}],        expect: false    }, {        arr1: [undefined, 1],        arr2: [null, 2],        expect: false    }, {        arr1: [new Object, new Object, new Object],        arr2: [{}, {},            null        ],        expect: false    }, {        arr1: null,        arr2: null,        expect: false    }, {        arr1: [],        arr2: undefined,        expect: false    }, {        arr1: &quot;abc&quot;,        arr2: &quot;cba&quot;,        expect: false    }];    //使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则&quot;不通过&quot;,所以大家要完成arraysSimilar函数,具体要求，详见任务要求。        for (var i = 0; i &lt; cases.length; i++) {        if (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) {            document.write(&quot;不通过！case&quot; + (i + 1) + &quot;不正确！arr1=&quot; + JSON.stringify(cases[i].arr1) + &quot;, arr2=&quot; + JSON.stringify(cases[i].arr2) + &quot; 的判断结果不是&quot; + cases[i].expect);            return false;        }    }    return true;}();document.write(&quot;判定结果:&quot; + (result ? &quot;通过&quot; : &quot;不通过&quot;));</code></pre><hr><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。<br>又因为题目中要求数组长度必须一致，这也是第二个限制条件。<br>最后再区分具体的类型。   </p><p>理清思路我们可以分为以下步骤：   </p><ol><li>判断传入的参数是否为数组 (使用 <code>instanceof</code> 方法)</li><li>检查两个数组长度是否一致</li><li>分别判断数组内元素的基本数据类型 (使用 <code>typeof</code> 方法)</li><li>因为 <code>typeof</code> 只能检查基本数据类型，对于 <code>null</code>, <code>Date</code>, <code>window</code> 返回的都是 <code>object</code>，所以使用 <code>Object.prototype.toString.apply()</code> 来检查这些对象类型，其返回值为：<code>&#39;[object Null]&#39;</code>, <code>&#39;[object Date]&#39;</code>, <code>&#39;[object global]&#39;</code></li><li>分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。</li></ol><hr><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><p>JavaScript代码如下</p><pre><code>/** * ===================================================== * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求： * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。 * 2. 数组的长度一致。 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window. * * 当以上全部满足，则返回&quot;判定结果:通过&quot;，否则返回&quot;判定结果:不通过&quot;。 * =====================================================  *//** param1 Array* param2 Array* return true or false*/function arraysSimilar(arr1, arr2){    if (arr1 instanceof Array &amp;&amp; arr2 instanceof Array ) {    //先判断传入的是否是数组        if (arr1.length == arr2.length) {                    //判断数组长度            console.log(&quot;same-length&quot;);            console.log(arr1);            console.log(arr2);            //开始判断数组内部是否相似            return sameLengthArraysSimilar(arr1, arr2);        } else{            //两个数组长度不同返回false            return false;        }    } else {        //传入的参数不是数组返回false        return false;    }}/** * 判断两个等长的数组内部是否相似 * 遍历数组 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同 * @param  {Array} arr1 数组1 * @param  {Array} arr2 数组2 * @return {true,false} */function sameLengthArraysSimilar(arr1,arr2) {    var numInArr1 = 0;    var numInArr2 = 0;    var booleanInArr1 = 0;    var booleanInArr2 = 0;    var funInArr1 = 0;    var funInArr2 = 0;    var undefinedInArr1 = 0;    var undefinedInArr2 = 0;    var stringInArr1 = 0;    var stringInArr2 = 0;    var nullInArr1 = 0;    var nullInArr2 = 0;    var dateInArr1 = 0;    var dateInArr2 = 0;    var windowInArr1 = 0;    var windowInArr2 = 0;    for (var i = 0; i &lt; arr1.length; i++) {        if(typeof arr1[i] === &apos;number&apos; ){            numInArr1 ++;        } else if(typeof arr1[i] === &apos;boolean&apos;){            booleanInArr1 ++;        } else if(typeof arr1[i] === &apos;function&apos;){            funInArr1 ++;        } else if(typeof arr1[i] === &apos;undefined&apos;){            undefinedInArr1 ++;        } else if(typeof arr1[i] === &apos;string&apos;){            stringInArr1 ++;        } else if(typeof arr1[i] ===&apos;object&apos;){            if(Object.prototype.toString.apply(arr1[i]) === &apos;[object Null]&apos;){                nullInArr1 ++;            } else if(Object.prototype.toString.apply(arr1[i]) === &apos;[object Date]&apos;){                dateInArr1 ++;            } else if(Object.prototype.toString.apply(arr1[i]) === &apos;[object global]&apos;){                windowInArr1 ++;            }        }        if(typeof arr2[i] === &apos;number&apos;){            numInArr2 ++;        } else if(typeof arr2[i] === &apos;boolean&apos;){            booleanInArr2 ++;        } else if(typeof arr2[i] === &apos;function&apos;){            funInArr2 ++;        } else if(typeof arr2[i] === &apos;undefined&apos;){            undefinedInArr2 ++;        } else if(typeof arr2[i] === &apos;string&apos;){            stringInArr2 ++;        } else if(typeof arr2[i] ===&apos;object&apos;){            if(Object.prototype.toString.apply(arr2[i]) === &apos;[object Null]&apos;){                nullInArr2 ++;            } else if(Object.prototype.toString.apply(arr2[i]) === &apos;[object Date]&apos;){                dateInArr2 ++;            } else if(Object.prototype.toString.apply(arr2[i]) === &apos;[object global]&apos;){                windowInArr2 ++;            }        }    }    console.log(&quot;num---&quot;+numInArr1);    console.log(&quot;num---&quot;+numInArr2);    console.log(&quot;boo---&quot;+booleanInArr1);    console.log(&quot;boo---&quot;+booleanInArr2);    console.log(&quot;null---&quot;+nullInArr1);    console.log(&quot;null---&quot;+nullInArr2);    console.log(&quot;window---&quot;+windowInArr1);    console.log(&quot;window---&quot;+windowInArr2);    console.log(&quot;date---&quot;+dateInArr1);    console.log(&quot;date---&quot;+dateInArr2);    console.log(&quot;string---&quot;+stringInArr1);    console.log(&quot;string---&quot;+stringInArr2);    console.log(&quot;fun---&quot;+funInArr1);    console.log(&quot;fun---&quot;+funInArr2);    console.log(&quot;undefined---&quot;+undefinedInArr1);    console.log(&quot;undefined---&quot;+undefinedInArr2);    if(numInArr1 == numInArr2 &amp;&amp; booleanInArr1==booleanInArr2 &amp;&amp; funInArr1==funInArr2 &amp;&amp; undefinedInArr1==undefinedInArr2 &amp;&amp; stringInArr1==stringInArr2 &amp;&amp; nullInArr1==nullInArr2 &amp;&amp; dateInArr1==dateInArr2 &amp;&amp; windowInArr1==windowInArr2){        console.log(&apos;================================true&apos;);        return true;    }else{        console.log(&apos;================================false&apos;);        return false;    }}</code></pre><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>上述代码完美的跑完所有的测试用例，读者 <a href="http://gaohaoyang.github.io/javascript-test/arraysSimilar/" target="_blank" rel="noopener">点击这里查看结果</a>，并且可以按 <code>f12</code> 看 Console 信息， 里面有代码的执行过程。  </li><li>当然你也可以复制本文的 JavaScript 代码，在 <a href="http://imooc.com/code/5760" target="_blank" rel="noopener">慕课网的习题</a> 下跑一下，也可以看到 <code>判定结果:通过</code> 的结果</li><li>完整源代码在我的 GitHub <a href="https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar" target="_blank" rel="noopener">javascript-test/arraysSimilar/</a> 仓库中   </li><li>其实我的代码逻辑并不复杂，有点<strong>空间换时间</strong>的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 <code>console.log()</code> 也并没有多少行。</li><li>各位读者有什么好的想法欢迎留言交流！</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
